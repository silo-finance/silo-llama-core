{
  "address": "0xc60d70867ED895b6CBE056e0c1D0148953742043",
  "abi": [
    {
      "inputs": [],
      "name": "Unsupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CRV_USD",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FRAX",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FRX_USDC_POOL",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SDAI",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SDAI_FRAX_POOL",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SDAI_SUSDE_POOL",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SUSDE",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TRI_CRV_POOL",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDC",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDC_CRV_USD_POOOL",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "towardsAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "towardsNative",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdd11392513e4414ca83f7b0eabe03276dc23e22da1a666bcab832f1ab1f077f7",
  "receipt": {
    "to": null,
    "from": "0x6d228Fa4daD2163056A48Fc2186d716f5c65E89A",
    "contractAddress": "0xc60d70867ED895b6CBE056e0c1D0148953742043",
    "transactionIndex": 89,
    "gasUsed": "439423",
    "logsBloom": "0x
    "blockHash": "0x80b523f1033f0b88f006aa6293d58ce374ae538180806f10da06860d38b9dd41",
    "transactionHash": "0xdd11392513e4414ca83f7b0eabe03276dc23e22da1a666bcab832f1ab1f077f7",
    "logs": [],
    "blockNumber": 19512059,
    "cumulativeGasUsed": "8599271",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6c36d79f10eb1e5915538519b046a2a1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Unsupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CRV_USD\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FRAX\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FRX_USDC_POOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SDAI\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SDAI_FRAX_POOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SDAI_SUSDE_POOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUSDE\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRI_CRV_POOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC_CRV_USD_POOOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"towardsAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"towardsNative\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"sUSDe Magician IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\",\"kind\":\"dev\",\"methods\":{\"towardsAsset(address,uint256)\":{\"details\":\"As Curve LP Tokens can be collateral-only assets we skip the implementation of this function\"},\"towardsNative(address,uint256)\":{\"params\":{\"_amount\":\"Amount of the `_asset`\",\"_asset\":\"Asset to be unwrapped\"},\"returns\":{\"amountOut\":\"Amount of the `tokenOut` that we received\",\"tokenOut\":\"A token that the `_asset` has been converted to\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"towardsNative(address,uint256)\":{\"notice\":\"Operates to unwrap an `_asset`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/liquidation/magicians/sUSDe/SUSDeViaCurveMaigicianEth.sol\":\"SUSDeViaCurveMaigicianEth\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"contracts/liquidation/magicians/_common/libraries/CrvUSDToWethViaTriCrvPoolLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../../interfaces/ICurvePoolLike256WithReturn.sol\\\";\\n\\n/// @dev Curve pool exchange\\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\\nlibrary CrvUSDToWethViaTriCrvPoolLib {\\n    uint256 constant public WETH_INDEX = 1;\\n    uint256 constant public CRV_USD_INDEX = 0;\\n\\n    uint256 constant public UNKNOWN_AMOUNT = 1;\\n\\n    function crvUsdToWethViaTriCrv(\\n        uint256 _amount,\\n        address _pool,\\n        IERC20 _crvUsd\\n    )\\n        internal\\n        returns (uint256 receivedWeth)\\n    {\\n        _crvUsd.approve(_pool, _amount);\\n\\n        receivedWeth = ICurvePoolLike256WithReturn(_pool).exchange(\\n            CRV_USD_INDEX,\\n            WETH_INDEX,\\n            _amount,\\n            UNKNOWN_AMOUNT\\n        );\\n    }\\n\\n    function wethToCrvUsdViaTriCrv(\\n        uint256 _amount,\\n        address _pool,\\n        IERC20 _weth\\n    )\\n        internal\\n        returns (uint256 receivedCrv)\\n    {\\n        _weth.approve(_pool, _amount);\\n\\n        receivedCrv = ICurvePoolLike256WithReturn(_pool).exchange(\\n            WETH_INDEX,\\n            CRV_USD_INDEX,\\n            _amount,\\n            UNKNOWN_AMOUNT\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x8469ecbe2acb9210ea88494b5a9780eadf15042dc6438a8fa1eea87cd38cdbe8\",\"license\":\"MIT\"},\"contracts/liquidation/magicians/_common/libraries/FraxUsdcPoolLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../../interfaces/ICurvePoolLike128WithReturn.sol\\\";\\n\\n/// @dev Curve pool exchange\\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\\nlibrary FraxUsdcPoolLib {\\n    int128 constant public FRAX_INDEX = 0;\\n    int128 constant public USDC_INDEX = 1;\\n\\n    uint256 constant public UNKNOWN_AMOUNT = 1;\\n\\n    function fraxToUsdcViaCurve(uint256 _amount, address _pool, IERC20 _frax) internal returns (uint256) {\\n        _frax.approve(_pool, _amount);\\n\\n        return ICurvePoolLike128WithReturn(_pool).exchange(\\n            FRAX_INDEX,\\n            USDC_INDEX,\\n            _amount,\\n            UNKNOWN_AMOUNT\\n        );\\n    }\\n\\n    function usdcToFraxViaCurve(uint256 _amount, address _pool, IERC20 _usdc) internal returns (uint256) {\\n        _usdc.approve(_pool, _amount);\\n\\n        return ICurvePoolLike128WithReturn(_pool).exchange(\\n            USDC_INDEX,\\n            FRAX_INDEX,\\n            _amount,\\n            UNKNOWN_AMOUNT\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x48de59b787ae7673f557135ca0f8077ae4d90f5dc33b8564cf67ff4dc91e5de4\",\"license\":\"MIT\"},\"contracts/liquidation/magicians/_common/libraries/SdaiFraxPoolLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../../interfaces/ICurvePoolLike128WithReturn.sol\\\";\\n\\n/// @dev Curve pool exchange\\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\\nlibrary SdaiFraxPoolLib {\\n    int128 constant public FRAX_INDEX = 0;\\n    int128 constant public SDAI_INDEX = 1;\\n\\n    uint256 constant public UNKNOWN_AMOUNT = 1;\\n\\n    function sdaiToFraxViaCurve(uint256 _amount, address _pool, IERC20 _sDAI) internal returns (uint256 receivedWeth) {\\n        _sDAI.approve(_pool, _amount);\\n\\n        receivedWeth = ICurvePoolLike128WithReturn(_pool).exchange(\\n            SDAI_INDEX,\\n            FRAX_INDEX,\\n            _amount,\\n            UNKNOWN_AMOUNT\\n        );\\n    }\\n\\n    function fraxToSdaiViaCurve(uint256 _amount, address _pool, IERC20 _frax) internal returns (uint256 receivedCrv) {\\n        _frax.approve(_pool, _amount);\\n\\n        receivedCrv = ICurvePoolLike128WithReturn(_pool).exchange(\\n            FRAX_INDEX,\\n            SDAI_INDEX,\\n            _amount,\\n            UNKNOWN_AMOUNT\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x55d9f51f86023f2f877da5d4ae17141d575f4c5cbda91462f9c76b52804b48b7\",\"license\":\"MIT\"},\"contracts/liquidation/magicians/_common/libraries/SdaiSusdePoolLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../../interfaces/ICurvePoolLike128WithReturn.sol\\\";\\n\\n/// @dev Curve pool exchange\\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\\nlibrary SdaiSusdePoolLib {\\n    int128 constant public SDAI_INDEX = 0;\\n    int128 constant public SUSDE_INDEX = 1;\\n\\n    uint256 constant public UNKNOWN_AMOUNT = 1;\\n\\n    function susdeToSdaiViaCurve(\\n        uint256 _amount,\\n        address _pool,\\n        IERC20 _sUSDe\\n    ) internal returns (uint256 receivedWeth) {\\n        _sUSDe.approve(_pool, _amount);\\n\\n        receivedWeth = ICurvePoolLike128WithReturn(_pool).exchange(\\n            SUSDE_INDEX,\\n            SDAI_INDEX,\\n            _amount,\\n            UNKNOWN_AMOUNT\\n        );\\n    }\\n\\n    function sdaiToSusdeViaCurve(uint256 _amount, address _pool, IERC20 _sDAI) internal returns (uint256 receivedCrv) {\\n        _sDAI.approve(_pool, _amount);\\n\\n        receivedCrv = ICurvePoolLike128WithReturn(_pool).exchange(\\n            SDAI_INDEX,\\n            SUSDE_INDEX,\\n            _amount,\\n            UNKNOWN_AMOUNT\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xa0bd4d8e6bf3d3eec463ff1cac59939623bdf06e1e32a83b90fe6445e30e10e3\",\"license\":\"MIT\"},\"contracts/liquidation/magicians/_common/libraries/UsdcCrvUsdcPoolLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../../interfaces/ICurvePoolLike128WithReturn.sol\\\";\\n\\n/// @dev Curve pool exchange\\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\\nlibrary UsdcCrvUsdcPoolLib {\\n    int128 constant public USDC_INDEX = 0;\\n    int128 constant public CRV_USD_INDEX = 1;\\n\\n    uint256 constant public UNKNOWN_AMOUNT = 1;\\n\\n    function usdcToCrvUsdViaCurve(uint256 _amount, address _pool, IERC20 _usdc) internal returns (uint256) {\\n        _usdc.approve(_pool, _amount);\\n\\n        return ICurvePoolLike128WithReturn(_pool).exchange(\\n            USDC_INDEX,\\n            CRV_USD_INDEX,\\n            _amount,\\n            UNKNOWN_AMOUNT\\n        );\\n    }\\n\\n    function crvUsdToUsdcViaCurve(uint256 _amount, address _pool, IERC20 _crvUsd) internal returns (uint256) {\\n        _crvUsd.approve(_pool, _amount);\\n\\n        return ICurvePoolLike128WithReturn(_pool).exchange(\\n            CRV_USD_INDEX,\\n            USDC_INDEX,\\n            _amount,\\n            UNKNOWN_AMOUNT\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xcc360892fe46333593bbcc6d1962680e03ef5245be410b343f5ff03136b91a18\",\"license\":\"MIT\"},\"contracts/liquidation/magicians/interfaces/ICurvePoolLike128WithReturn.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface ICurvePoolLike128WithReturn {\\n    // solhint-disable func-name-mixedcase\\n    function exchange(int128 i, int128 j, uint256 dx, uint256 minDy) external returns (uint256);\\n    function remove_liquidity_one_coin(uint256 amount, int128 i, uint256 minDy) external returns (uint256);\\n    function exchange_underlying(int128 _i, int128 _j, uint256 _dx, uint256 _minDy) external returns (uint256);\\n    function get_dy(int128 i, int128 j, uint256 dx) external view returns (uint256);\\n    // solhint-enable func-name-mixedcase\\n}\\n\",\"keccak256\":\"0x76678eaec7d80bcd814573eef3890219bc2b82e23c248730b3b3c686adb93f60\",\"license\":\"MIT\"},\"contracts/liquidation/magicians/interfaces/ICurvePoolLike256WithReturn.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface ICurvePoolLike256WithReturn {\\n    // solhint-disable func-name-mixedcase\\n    function exchange(uint256 i, uint256 j, uint256 dx, uint256 minDy) external returns (uint256);\\n    function get_dy(uint256 i, uint256 j, uint256 dx) external view returns (uint256);\\n    // solhint-enable func-name-mixedcase\\n}\\n\",\"keccak256\":\"0xc8f9e8ae8f9edbba67ea13eb887a30fb35da84c527d46e11cded157ac9525a30\",\"license\":\"MIT\"},\"contracts/liquidation/magicians/interfaces/IMagician.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9.0;\\n\\n/// @notice Extension for the Liquidation helper to support such operations as unwrapping\\ninterface IMagician {\\n    /// @notice Operates to unwrap an `_asset`\\n    /// @param _asset Asset to be unwrapped\\n    /// @param _amount Amount of the `_asset`\\n    /// @return tokenOut A token that the `_asset` has been converted to\\n    /// @return amountOut Amount of the `tokenOut` that we received\\n    function towardsNative(address _asset, uint256 _amount) external returns (address tokenOut, uint256 amountOut);\\n\\n    /// @notice Performs operation opposit to `towardsNative`\\n    /// @param _asset Asset to be wrapped\\n    /// @param _amount Amount of the `_asset`\\n    /// @return tokenOut A token that the `_asset` has been converted to\\n    /// @return amountOut Amount of the quote token that we spent to get `_amoun` of the `_asset`\\n    function towardsAsset(address _asset, uint256 _amount) external returns (address tokenOut, uint256 amountOut);\\n}\\n\",\"keccak256\":\"0xb48290785d1be3d5b1ed767ee628faa69ee7ded238de776d66b9e0795536ff50\",\"license\":\"MIT\"},\"contracts/liquidation/magicians/sUSDe/SUSDeViaCurveMaigicianEth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../interfaces/IMagician.sol\\\";\\nimport \\\"../_common/libraries/FraxUsdcPoolLib.sol\\\";\\nimport \\\"../_common/libraries/SdaiFraxPoolLib.sol\\\";\\nimport \\\"../_common/libraries/SdaiSusdePoolLib.sol\\\";\\nimport \\\"../_common/libraries/UsdcCrvUsdcPoolLib.sol\\\";\\nimport \\\"../_common/libraries/CrvUSDToWethViaTriCrvPoolLib.sol\\\";\\n\\n/// @dev sUSDe Magician\\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\\ncontract SUSDeViaCurveMaigicianEth is IMagician {\\n    using FraxUsdcPoolLib for uint256;\\n    using SdaiFraxPoolLib for uint256;\\n    using SdaiSusdePoolLib for uint256;\\n    using UsdcCrvUsdcPoolLib for uint256;\\n    using CrvUSDToWethViaTriCrvPoolLib for uint256;\\n\\n    IERC20 public constant SUSDE = IERC20(0x9D39A5DE30e57443BfF2A8307A4256c8797A3497);\\n    IERC20 public constant SDAI = IERC20(0x83F20F44975D03b1b09e64809B757c47f942BEeA);\\n    IERC20 public constant FRAX = IERC20(0x853d955aCEf822Db058eb8505911ED77F175b99e);\\n    IERC20 public constant USDC = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\\n    IERC20 public constant CRV_USD = IERC20(0xf939E0A03FB07F59A73314E73794Be0E57ac1b4E);\\n\\n    address public constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n    address public constant SDAI_FRAX_POOL = 0xcE6431D21E3fb1036CE9973a3312368ED96F5CE7;\\n    address public constant USDC_CRV_USD_POOOL = 0x4DEcE678ceceb27446b35C672dC7d61F30bAD69E;\\n    address public constant FRX_USDC_POOL = 0xDcEF968d416a41Cdac0ED8702fAC8128A64241A2;\\n    address public constant SDAI_SUSDE_POOL = 0x167478921b907422F8E88B43C4Af2B8BEa278d3A;\\n    address public constant TRI_CRV_POOL = 0x4eBdF703948ddCEA3B11f675B4D1Fba9d2414A14;\\n\\n    error Unsupported();\\n\\n    /// @inheritdoc IMagician\\n    function towardsNative(\\n        address _asset,\\n        uint256 _amount\\n    )\\n        external\\n        virtual\\n        returns (address tokenOut, uint256 amountOut)\\n    {\\n        if (_asset != address(SUSDE)) revert Unsupported();\\n\\n        tokenOut = address(WETH);\\n\\n        amountOut;\\n\\n        {\\n            amountOut = _amount\\n                .susdeToSdaiViaCurve(SDAI_SUSDE_POOL, SUSDE)\\n                .sdaiToFraxViaCurve(SDAI_FRAX_POOL, SDAI)\\n                .fraxToUsdcViaCurve(FRX_USDC_POOL, FRAX)\\n                .usdcToCrvUsdViaCurve(USDC_CRV_USD_POOOL, USDC);\\n        }\\n\\n        amountOut = amountOut.crvUsdToWethViaTriCrv(TRI_CRV_POOL, CRV_USD);\\n    }\\n\\n    /// @dev As Curve LP Tokens can be collateral-only assets we skip the implementation of this function\\n    function towardsAsset(address, uint256) external virtual pure returns (address, uint256) {\\n        revert Unsupported();\\n    }\\n}\\n\",\"keccak256\":\"0xdef1c6c7050cd8d357885563df57a31956f4c777bdd0242ff58d807737668a39\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506106fb806100206000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806389a302711161008c578063b10d3a1811610066578063b10d3a18146101f3578063b17032b81461020e578063c7dbfb6414610229578063e25d77a11461024457600080fd5b806389a30271146101a2578063ad5c4648146101bd578063b0e4556f146101d857600080fd5b806321ebbf01146100d4578063307121091461010b57806337e6d6841461013e57806368905b5e146101595780636ea477da146101745780638100913f14610187575b600080fd5b6100e76100e236600461064b565b61025f565b604080516001600160a01b0390931683526020830191909152015b60405180910390f35b610126739d39a5de30e57443bff2a8307a4256c8797a349781565b6040516001600160a01b039091168152602001610102565b61012673167478921b907422f8e88b43c4af2b8bea278d3a81565b61012673ce6431d21e3fb1036ce9973a3312368ed96f5ce781565b6100e761018236600461064b565b6103ba565b6101267383f20f44975d03b1b09e64809b757c47f942beea81565b61012673a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4881565b61012673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b61012673853d955acef822db058eb8505911ed77f175b99e81565b61012673f939e0a03fb07f59a73314e73794be0e57ac1b4e81565b610126734dece678ceceb27446b35c672dc7d61f30bad69e81565b610126734ebdf703948ddcea3b11f675b4d1fba9d2414a1481565b61012673dcef968d416a41cdac0ed8702fac8128a64241a281565b6000806001600160a01b038416739d39a5de30e57443bff2a8307a4256c8797a34971461029f57604051634851657960e11b815260040160405180910390fd5b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2915061037c734dece678ceceb27446b35c672dc7d61f30bad69e73a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4861037573dcef968d416a41cdac0ed8702fac8128a64241a273853d955acef822db058eb8505911ed77f175b99e8273ce6431d21e3fb1036ce9973a3312368ed96f5ce77383f20f44975d03b1b09e64809b757c47f942beea61036e8c73167478921b907422f8e88b43c4af2b8bea278d3a739d39a5de30e57443bff2a8307a4256c8797a34976103d6565b91906103d6565b91906104d7565b90506103b181734ebdf703948ddcea3b11f675b4d1fba9d2414a1473f939e0a03fb07f59a73314e73794be0e57ac1b4e610591565b90509250929050565b600080604051634851657960e11b815260040160405180910390fd5b60405163095ea7b360e01b81526001600160a01b038381166004830152602482018590526000919083169063095ea7b3906044016020604051808303816000875af1158015610429573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044d9190610683565b50604051630f7c084960e21b8152600160048201819052600060248301526044820186905260648201526001600160a01b03841690633df02124906084015b6020604051808303816000875af11580156104ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cf91906106ac565b949350505050565b60405163095ea7b360e01b81526001600160a01b038381166004830152602482018590526000919083169063095ea7b3906044016020604051808303816000875af115801561052a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054e9190610683565b50604051630f7c084960e21b8152600060048201526001602482018190526044820186905260648201526001600160a01b03841690633df021249060840161048c565b60405163095ea7b360e01b81526001600160a01b038381166004830152602482018590526000919083169063095ea7b3906044016020604051808303816000875af11580156105e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106089190610683565b50604051630b68372160e31b8152600060048201526001602482018190526044820186905260648201526001600160a01b03841690635b41b9089060840161048c565b6000806040838503121561065e57600080fd5b82356001600160a01b038116811461067557600080fd5b946020939093013593505050565b60006020828403121561069557600080fd5b815180151581146106a557600080fd5b9392505050565b6000602082840312156106be57600080fd5b505191905056fea26469706673582212209f118914ada82098e00a261be2e0df484c74af35323e851d1784094d823fa49b64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c806389a302711161008c578063b10d3a1811610066578063b10d3a18146101f3578063b17032b81461020e578063c7dbfb6414610229578063e25d77a11461024457600080fd5b806389a30271146101a2578063ad5c4648146101bd578063b0e4556f146101d857600080fd5b806321ebbf01146100d4578063307121091461010b57806337e6d6841461013e57806368905b5e146101595780636ea477da146101745780638100913f14610187575b600080fd5b6100e76100e236600461064b565b61025f565b604080516001600160a01b0390931683526020830191909152015b60405180910390f35b610126739d39a5de30e57443bff2a8307a4256c8797a349781565b6040516001600160a01b039091168152602001610102565b61012673167478921b907422f8e88b43c4af2b8bea278d3a81565b61012673ce6431d21e3fb1036ce9973a3312368ed96f5ce781565b6100e761018236600461064b565b6103ba565b6101267383f20f44975d03b1b09e64809b757c47f942beea81565b61012673a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4881565b61012673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b61012673853d955acef822db058eb8505911ed77f175b99e81565b61012673f939e0a03fb07f59a73314e73794be0e57ac1b4e81565b610126734dece678ceceb27446b35c672dc7d61f30bad69e81565b610126734ebdf703948ddcea3b11f675b4d1fba9d2414a1481565b61012673dcef968d416a41cdac0ed8702fac8128a64241a281565b6000806001600160a01b038416739d39a5de30e57443bff2a8307a4256c8797a34971461029f57604051634851657960e11b815260040160405180910390fd5b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2915061037c734dece678ceceb27446b35c672dc7d61f30bad69e73a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4861037573dcef968d416a41cdac0ed8702fac8128a64241a273853d955acef822db058eb8505911ed77f175b99e8273ce6431d21e3fb1036ce9973a3312368ed96f5ce77383f20f44975d03b1b09e64809b757c47f942beea61036e8c73167478921b907422f8e88b43c4af2b8bea278d3a739d39a5de30e57443bff2a8307a4256c8797a34976103d6565b91906103d6565b91906104d7565b90506103b181734ebdf703948ddcea3b11f675b4d1fba9d2414a1473f939e0a03fb07f59a73314e73794be0e57ac1b4e610591565b90509250929050565b600080604051634851657960e11b815260040160405180910390fd5b60405163095ea7b360e01b81526001600160a01b038381166004830152602482018590526000919083169063095ea7b3906044016020604051808303816000875af1158015610429573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044d9190610683565b50604051630f7c084960e21b8152600160048201819052600060248301526044820186905260648201526001600160a01b03841690633df02124906084015b6020604051808303816000875af11580156104ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cf91906106ac565b949350505050565b60405163095ea7b360e01b81526001600160a01b038381166004830152602482018590526000919083169063095ea7b3906044016020604051808303816000875af115801561052a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054e9190610683565b50604051630f7c084960e21b8152600060048201526001602482018190526044820186905260648201526001600160a01b03841690633df021249060840161048c565b60405163095ea7b360e01b81526001600160a01b038381166004830152602482018590526000919083169063095ea7b3906044016020604051808303816000875af11580156105e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106089190610683565b50604051630b68372160e31b8152600060048201526001602482018190526044820186905260648201526001600160a01b03841690635b41b9089060840161048c565b6000806040838503121561065e57600080fd5b82356001600160a01b038116811461067557600080fd5b946020939093013593505050565b60006020828403121561069557600080fd5b815180151581146106a557600080fd5b9392505050565b6000602082840312156106be57600080fd5b505191905056fea26469706673582212209f118914ada82098e00a261be2e0df484c74af35323e851d1784094d823fa49b64736f6c634300080d0033",
  "devdoc": {
    "details": "sUSDe Magician IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.",
    "kind": "dev",
    "methods": {
      "towardsAsset(address,uint256)": {
        "details": "As Curve LP Tokens can be collateral-only assets we skip the implementation of this function"
      },
      "towardsNative(address,uint256)": {
        "params": {
          "_amount": "Amount of the `_asset`",
          "_asset": "Asset to be unwrapped"
        },
        "returns": {
          "amountOut": "Amount of the `tokenOut` that we received",
          "tokenOut": "A token that the `_asset` has been converted to"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "towardsNative(address,uint256)": {
        "notice": "Operates to unwrap an `_asset`"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}