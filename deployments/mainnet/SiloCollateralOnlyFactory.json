{
  "address": "0xBd7a2fC68cD1C5700E8A4A82544c07f1a16922D1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_repository",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidSiloRepository",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRepository",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "InitSiloRepository",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "silo",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "version",
          "type": "uint128"
        }
      ],
      "name": "NewSiloCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_siloAsset",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "_version",
          "type": "uint128"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "createSilo",
      "outputs": [
        {
          "internalType": "address",
          "name": "silo",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "siloFactoryPing",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "siloRepository",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x444e450160ed606d5ddf4130d72be72e792562f29d1661e5830e375bf121bc26",
  "receipt": {
    "to": null,
    "from": "0x6d228Fa4daD2163056A48Fc2186d716f5c65E89A",
    "contractAddress": "0xBd7a2fC68cD1C5700E8A4A82544c07f1a16922D1",
    "transactionIndex": 94,
    "gasUsed": "5367788",
    "logsBloom": "0x
    "blockHash": "0x1041cd0970dc5fdb7e17b9b6c9cfb6c4f5d7807c3f403f30a6b7a51eef72a067",
    "transactionHash": "0x444e450160ed606d5ddf4130d72be72e792562f29d1661e5830e375bf121bc26",
    "logs": [
      {
        "transactionIndex": 94,
        "blockNumber": 19512060,
        "transactionHash": "0x444e450160ed606d5ddf4130d72be72e792562f29d1661e5830e375bf121bc26",
        "address": "0xBd7a2fC68cD1C5700E8A4A82544c07f1a16922D1",
        "topics": [
          "0x62b7374e631dbf873146b0bd9f3390235a4a47128c3336ec4344c32bc28fe292"
        ],
        "data": "0x",
        "logIndex": 188,
        "blockHash": "0x1041cd0970dc5fdb7e17b9b6c9cfb6c4f5d7807c3f403f30a6b7a51eef72a067"
      }
    ],
    "blockNumber": 19512060,
    "cumulativeGasUsed": "13319150",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xbcd67f35c7a2f212db0ad7f68fc773b5ac15377c"
  ],
  "numDeployments": 1,
  "solcInputHash": "f54a3d0792a4c0cf636375248fbefe53",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_repository\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidSiloRepository\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRepository\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"InitSiloRepository\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"silo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"version\",\"type\":\"uint128\"}],\"name\":\"NewSiloCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_siloAsset\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_version\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"createSilo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"silo\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"siloFactoryPing\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"siloRepository\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:security-contact\":\"security@silo.finance\",\"details\":\"Silo Factory is registered within SiloRepository contract and it's given a version. Each version is different Silo Factory that deploys different Silo implementation. Many Factory contracts can be registered with the Repository contract.\",\"errors\":{\"InvalidSiloRepository()\":[{\"details\":\"Revert on a false sanity check with `Ping` library\"}],\"OnlyRepository()\":[{\"details\":\"Revert on a silo creation if a msg.sender is not a silo repository\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_repository\":\"A silo repository address\"}},\"createSilo(address,uint128,bytes)\":{\"params\":{\"_data\":\"(optional) data that may be needed during silo creation\",\"_siloAsset\":\"unique asset for which Silo is deployed\",\"_version\":\"version of silo implementation\"},\"returns\":{\"silo\":\"deployed Silo address\"}},\"siloFactoryPing()\":{\"details\":\"just a helper method to see if address is a factory\"}},\"title\":\"SiloCollateralOnlyFactory\",\"version\":1},\"userdoc\":{\"events\":{\"NewSiloCreated(address,address,uint128)\":{\"notice\":\"Emitted when Silo is deployed\"}},\"kind\":\"user\",\"methods\":{\"createSilo(address,uint128,bytes)\":{\"notice\":\"Deploys Silo\"}},\"notice\":\"Silo Factory has one job, deploy Silo implementation\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/siloFactories/SiloCollateralOnlyFactory.sol\":\"SiloCollateralOnlyFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd1d8caaeb45f78e0b0715664d56c220c283c89bf8b8c02954af86404d6b367f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/BaseSilo.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./utils/LiquidationReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/IBaseSilo.sol\\\";\\nimport \\\"./interfaces/IGuardedLaunch.sol\\\";\\nimport \\\"./interfaces/ISiloRepository.sol\\\";\\nimport \\\"./interfaces/IPriceProvidersRepository.sol\\\";\\nimport \\\"./interfaces/IInterestRateModel.sol\\\";\\nimport \\\"./interfaces/IShareToken.sol\\\";\\n\\nimport \\\"./lib/Ping.sol\\\";\\nimport \\\"./lib/EasyMathV2.sol\\\";\\nimport \\\"./lib/TokenHelper.sol\\\";\\nimport \\\"./lib/SolvencyV2.sol\\\";\\n\\n/// @title BaseSilo\\n/// @dev Base contract for Silo core logic.\\n/// @custom:security-contact security@silo.finance\\nabstract contract BaseSilo is IBaseSilo, ReentrancyGuard, LiquidationReentrancyGuard {\\n    using SafeERC20 for ERC20;\\n    using EasyMathV2 for uint256;\\n\\n    ISiloRepository immutable public override siloRepository;\\n\\n    // asset address for which Silo was created\\n    address public immutable siloAsset;\\n\\n    /// @dev version of silo\\n    /// @notice It tells us which `SiloRepository.siloFactory(version)` created this Silo\\n    uint128 public immutable VERSION; // solhint-disable-line var-name-mixedcase\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    uint256 private immutable _ASSET_DECIMAL_POINTS;\\n\\n    /// @dev stores all *synced* assets (bridge assets + removed bridge assets + siloAsset)\\n    address[] private _allSiloAssets;\\n\\n    /// @dev asset => AssetStorage\\n    mapping(address => AssetStorage) private _assetStorage;\\n\\n    /// @dev asset => AssetInterestData\\n    mapping(address => AssetInterestData) private _interestData;\\n\\n    error AssetDoesNotExist();\\n    error BorrowNotPossible();\\n    error DepositNotPossible();\\n    error DepositsExceedLimit();\\n    error InvalidRepository();\\n    error InvalidSiloVersion();\\n    error MaximumLTVReached();\\n    error NotEnoughLiquidity();\\n    error NotEnoughDeposits();\\n    error NotSolvent();\\n    error OnlyRouter();\\n    error Paused();\\n    error UnexpectedEmptyReturn();\\n    error UserIsZero();\\n\\n    modifier onlyExistingAsset(address _asset) {\\n        if (_interestData[_asset].status == AssetStatus.Undefined) {\\n            revert AssetDoesNotExist();\\n        }\\n\\n        _;\\n    }\\n\\n    modifier onlyRouter() {\\n        if (msg.sender != siloRepository.router()) revert OnlyRouter();\\n\\n        _;\\n    }\\n\\n    modifier validateMaxDepositsAfter(address _asset) {\\n        _;\\n\\n        IPriceProvidersRepository priceProviderRepo = siloRepository.priceProvidersRepository();\\n\\n        AssetStorage storage _assetState = _assetStorage[_asset];\\n        uint256 allDeposits = _assetState.totalDeposits + _assetState.collateralOnlyDeposits;\\n\\n        if (\\n            priceProviderRepo.getPrice(_asset) * allDeposits / (10 ** IERC20Metadata(_asset).decimals()) >\\n            IGuardedLaunch(address(siloRepository)).getMaxSiloDepositsValue(address(this), _asset)\\n        ) {\\n            revert DepositsExceedLimit();\\n        }\\n    }\\n\\n    constructor (ISiloRepository _repository, address _siloAsset, uint128 _version) {\\n        if (!Ping.pong(_repository.siloRepositoryPing)) revert InvalidRepository();\\n        if (_version == 0) revert InvalidSiloVersion();\\n\\n        uint256 decimals = TokenHelper.assertAndGetDecimals(_siloAsset);\\n\\n        VERSION = _version;\\n        siloRepository = _repository;\\n        siloAsset = _siloAsset;\\n        _ASSET_DECIMAL_POINTS = 10**decimals;\\n    }\\n\\n    /// @dev this is exposed only for test purposes, but it is safe to leave it like that\\n    function initAssetsTokens() external nonReentrant {\\n        _initAssetsTokens();\\n    }\\n\\n    /// @inheritdoc IBaseSilo\\n    function syncBridgeAssets() external override nonReentrant {\\n        // sync removed assets\\n        address[] memory removedBridgeAssets = siloRepository.getRemovedBridgeAssets();\\n\\n        for (uint256 i = 0; i < removedBridgeAssets.length; i++) {\\n            // If removed bridge asset is the silo asset for this silo, do not remove it\\n            address removedBridgeAsset = removedBridgeAssets[i];\\n            if (removedBridgeAsset != siloAsset) {\\n                _interestData[removedBridgeAsset].status = AssetStatus.Removed;\\n                emit AssetStatusUpdate(removedBridgeAsset, AssetStatus.Removed);\\n            }\\n        }\\n\\n        // must be called at the end, because we overriding `_assetStorage[removedBridgeAssets[i]].removed`\\n        _initAssetsTokens();\\n    }\\n\\n    /// @inheritdoc IBaseSilo\\n    function assetStorage(address _asset) external view override returns (AssetStorage memory) {\\n        return _assetStorage[_asset];\\n    }\\n\\n    /// @inheritdoc IBaseSilo\\n    function interestData(address _asset) external view override returns (AssetInterestData memory) {\\n        return _interestData[_asset];\\n    }\\n\\n    /// @inheritdoc IBaseSilo\\n    function utilizationData(address _asset) external view override returns (UtilizationData memory data) {\\n        AssetStorage storage _assetState = _assetStorage[_asset];\\n\\n        return UtilizationData(\\n            _assetState.totalDeposits,\\n            _assetState.totalBorrowAmount,\\n            _interestData[_asset].interestRateTimestamp\\n        );\\n    }\\n\\n    /// @inheritdoc IBaseSilo\\n    function getAssets() public view override returns (address[] memory assets) {\\n        return _allSiloAssets;\\n    }\\n\\n    /// @inheritdoc IBaseSilo\\n    function getAssetsWithState() public view override returns (\\n        address[] memory assets,\\n        AssetStorage[] memory assetsStorage\\n    ) {\\n        assets = _allSiloAssets;\\n        assetsStorage = new AssetStorage[](assets.length);\\n\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            assetsStorage[i] = _assetStorage[assets[i]];\\n        }\\n    }\\n\\n    /// @inheritdoc IBaseSilo\\n    function isSolvent(address _user) public view override returns (bool) {\\n        if (_user == address(0)) revert UserIsZero();\\n\\n        (address[] memory assets, AssetStorage[] memory assetsStates) = getAssetsWithState();\\n\\n        (uint256 userLTV, uint256 liquidationThreshold) = SolvencyV2.calculateLTVs(\\n            SolvencyV2.SolvencyParams(\\n                siloRepository,\\n                ISilo(address(this)),\\n                assets,\\n                assetsStates,\\n                _user\\n            ),\\n            SolvencyV2.TypeofLTV.LiquidationThreshold\\n        );\\n\\n        return userLTV <= liquidationThreshold;\\n    }\\n\\n    /// @inheritdoc IBaseSilo\\n    function depositPossible(address _asset, address _depositor) public view override returns (bool) {\\n        return _assetStorage[_asset].debtToken.balanceOf(_depositor) == 0\\n            && _interestData[_asset].status == AssetStatus.Active;\\n    }\\n\\n    /// @inheritdoc IBaseSilo\\n    function borrowPossible(address _asset, address _borrower) public view override returns (bool) {\\n        AssetStorage storage _assetState = _assetStorage[_asset];\\n\\n        return _assetState.collateralToken.balanceOf(_borrower) == 0\\n            && _assetState.collateralOnlyToken.balanceOf(_borrower) == 0\\n            && _interestData[_asset].status == AssetStatus.Active;\\n    }\\n\\n    /// @inheritdoc IBaseSilo\\n    function liquidity(address _asset) public view returns (uint256) {\\n        return ERC20(_asset).balanceOf(address(this)) - _assetStorage[_asset].collateralOnlyDeposits;\\n    }\\n\\n    /// @dev Initiate asset by deploying accounting EC20 tokens for collateral and debt\\n    /// @param _tokensFactory factory contract that deploys collateral and debt tokens\\n    /// @param _asset which asset to initialize\\n    /// @param _isBridgeAsset true if initialized asset is a bridge asset\\n    function _initAsset(ITokensFactory _tokensFactory, address _asset, bool _isBridgeAsset) internal {\\n        AssetSharesMetadata memory metadata = _generateSharesNames(_asset, _isBridgeAsset);\\n\\n        AssetStorage storage _assetState = _assetStorage[_asset];\\n\\n        _assetState.collateralToken = _tokensFactory.createShareCollateralToken(\\n            metadata.collateralName, metadata.collateralSymbol, _asset\\n        );\\n\\n        _assetState.collateralOnlyToken = _tokensFactory.createShareCollateralToken(\\n            metadata.protectedName, metadata.protectedSymbol, _asset\\n        );\\n\\n        _assetState.debtToken = _tokensFactory.createShareDebtToken(\\n            metadata.debtName, metadata.debtSymbol, _asset\\n        );\\n\\n        // keep synced asset in storage array\\n        _allSiloAssets.push(_asset);\\n        _interestData[_asset].status = AssetStatus.Active;\\n        emit AssetStatusUpdate(_asset, AssetStatus.Active);\\n    }\\n\\n    /// @dev Initializes all assets (bridge assets + unique asset) for Silo but only if asset has not been\\n    /// initialized already. It's safe to call it multiple times. It's safe for anyone to call it at any time.\\n    function _initAssetsTokens() internal {\\n        ITokensFactory tokensFactory = siloRepository.tokensFactory();\\n\\n        // init silo asset if needed\\n        if (address(_assetStorage[siloAsset].collateralToken) == address(0)) {\\n            _initAsset(tokensFactory, siloAsset, false);\\n        }\\n\\n        // sync active assets\\n        address[] memory bridgeAssets = siloRepository.getBridgeAssets();\\n\\n        for (uint256 i = 0; i < bridgeAssets.length; i++) {\\n            address bridgeAsset = bridgeAssets[i];\\n            // In case a bridge asset is added that already has a Silo,\\n            // do not initiate that asset in its Silo\\n            if (address(_assetStorage[bridgeAsset].collateralToken) == address(0)) {\\n                _initAsset(tokensFactory, bridgeAsset, true);\\n            } else {\\n                _interestData[bridgeAsset].status = AssetStatus.Active;\\n                emit AssetStatusUpdate(bridgeAsset, AssetStatus.Active);\\n            }\\n        }\\n    }\\n\\n    /// @dev Generate asset shares tokens names and symbols\\n    /// @param _asset asset for which shares tokens will be initializaed\\n    /// @param _isBridgeAsset true if initialized asset is a bridge asset\\n    function _generateSharesNames(address _asset, bool _isBridgeAsset)\\n        internal\\n        view\\n        returns (AssetSharesMetadata memory metadata)\\n    {\\n        // Naming convention in UNI example:\\n        // - for siloAsset: sUNI, dUNI, spUNI\\n        // - for bridgeAsset: sWETH-UNI, dWETH-UNI, spWETH-UNI\\n        string memory assetSymbol = TokenHelper.symbol(_asset);\\n\\n        metadata = AssetSharesMetadata({\\n            collateralName: string.concat(\\\"Silo Finance Borrowable \\\", assetSymbol, \\\" Deposit\\\"),\\n            collateralSymbol: string.concat(\\\"s\\\", assetSymbol),\\n            protectedName: string.concat(\\\"Silo Finance Protected \\\", assetSymbol, \\\" Deposit\\\"),\\n            protectedSymbol: string.concat(\\\"sp\\\", assetSymbol),\\n            debtName: string.concat(\\\"Silo Finance \\\", assetSymbol, \\\" Debt\\\"),\\n            debtSymbol: string.concat(\\\"d\\\", assetSymbol)\\n        });\\n\\n        if (_isBridgeAsset) {\\n            string memory baseSymbol = TokenHelper.symbol(siloAsset);\\n\\n            metadata.collateralName = string.concat(metadata.collateralName, \\\" in \\\", baseSymbol, \\\" Silo\\\");\\n            metadata.collateralSymbol = string.concat(metadata.collateralSymbol, \\\"-\\\", baseSymbol);\\n\\n            metadata.protectedName = string.concat(metadata.protectedName, \\\" in \\\", baseSymbol, \\\" Silo\\\");\\n            metadata.protectedSymbol = string.concat(metadata.protectedSymbol, \\\"-\\\", baseSymbol);\\n\\n            metadata.debtName = string.concat(metadata.debtName, \\\" in \\\", baseSymbol, \\\" Silo\\\");\\n            metadata.debtSymbol = string.concat(metadata.debtSymbol, \\\"-\\\", baseSymbol);\\n        }\\n    }\\n\\n    /// @dev Main deposit function that handles all deposit logic and validation\\n    /// @param _asset asset address that is being deposited\\n    /// @param _from wallet address form which to pull asset tokens\\n    /// @param _depositor wallet address that will be granted ownership of deposited tokens. Keep in mind\\n    /// that deposit can be made by Router contract but the owner of the deposit should be user.\\n    /// @param _amount deposit amount\\n    /// @param _collateralOnly true if deposit should be used for collateral only. Otherwise false.\\n    /// Collateral only deposit cannot be borrowed by anyone and does not earn any interest. However,\\n    /// it can be used as collateral and can be subject to liquidation.\\n    /// @return collateralAmount deposited amount\\n    /// @return collateralShare `_depositor` collateral shares based on deposited amount\\n    function _deposit(\\n        address _asset,\\n        address _from,\\n        address _depositor,\\n        uint256 _amount,\\n        bool _collateralOnly\\n    )\\n        internal\\n        nonReentrant\\n        validateMaxDepositsAfter(_asset)\\n        returns (uint256 collateralAmount, uint256 collateralShare)\\n    {\\n        // MUST BE CALLED AS FIRST METHOD!\\n        _accrueInterest(_asset);\\n\\n        if (!depositPossible(_asset, _depositor)) revert DepositNotPossible();\\n\\n        AssetStorage storage _state = _assetStorage[_asset];\\n\\n        collateralAmount = _amount;\\n\\n        uint256 totalDepositsCached = _collateralOnly ? _state.collateralOnlyDeposits : _state.totalDeposits;\\n\\n        if (_collateralOnly) {\\n            collateralShare = _amount.toShare(totalDepositsCached, _state.collateralOnlyToken.totalSupply());\\n            _state.collateralOnlyDeposits = totalDepositsCached + _amount;\\n            _state.collateralOnlyToken.mint(_depositor, collateralShare);\\n        } else {\\n            collateralShare = _amount.toShare(totalDepositsCached, _state.collateralToken.totalSupply());\\n            _state.totalDeposits = totalDepositsCached + _amount;\\n            _state.collateralToken.mint(_depositor, collateralShare);\\n        }\\n\\n        ERC20(_asset).safeTransferFrom(_from, address(this), _amount);\\n\\n        emit Deposit(_asset, _depositor, _amount, _collateralOnly);\\n    }\\n\\n    /// @dev Main withdraw function that handles all withdraw logic and validation\\n    /// @param _asset asset address that is being withdrawn\\n    /// @param _depositor wallet address that is an owner of the deposited tokens\\n    /// @param _receiver wallet address that will receive withdrawn tokens. It's possible that Router\\n    /// contract is the owner of deposited tokens but we want user to get these tokens directly.\\n    /// @param _amount amount to withdraw. If amount is equal to maximum value stored by uint256 type\\n    /// (type(uint256).max), it will be assumed that user wants to withdraw all tokens and final account\\n    /// will be dynamically calculated including interest.\\n    /// @param _collateralOnly true if collateral only tokens are to be withdrawn. Otherwise false.\\n    /// User can deposit the same asset as collateral only and as regular deposit. During withdraw,\\n    /// it must be specified which tokens are to be withdrawn.\\n    /// @return withdrawnAmount withdrawn amount that was transferred to user\\n    /// @return withdrawnShare burned share based on `withdrawnAmount`\\n    function _withdraw(address _asset, address _depositor, address _receiver, uint256 _amount, bool _collateralOnly)\\n        internal\\n        nonReentrant // because we transferring tokens\\n        onlyExistingAsset(_asset)\\n        returns (uint256 withdrawnAmount, uint256 withdrawnShare)\\n    {\\n        // MUST BE CALLED AS FIRST METHOD!\\n        _accrueInterest(_asset);\\n\\n        (withdrawnAmount, withdrawnShare) = _withdrawAsset(\\n            _asset,\\n            _amount,\\n            _depositor,\\n            _receiver,\\n            _collateralOnly,\\n            0 // do not apply any fees on regular withdraw\\n        );\\n\\n        if (withdrawnAmount == 0) revert UnexpectedEmptyReturn();\\n\\n        if (!isSolvent(_depositor)) revert NotSolvent();\\n\\n        emit Withdraw(_asset, _depositor, _receiver, withdrawnAmount, _collateralOnly);\\n    }\\n\\n    /// @dev Main borrow function that handles all borrow logic and validation\\n    /// @param _asset asset address that is being borrowed\\n    /// @param _borrower wallet address that will own debt\\n    /// @param _receiver wallet address that will receive borrowed tokens. It's possible that Router\\n    /// contract is executing borrowing for user and should be the one receiving tokens, however,\\n    /// the owner of the debt should be user himself.\\n    /// @param _amount amount of asset to borrow\\n    /// @return debtAmount borrowed amount\\n    /// @return debtShare user debt share based on borrowed amount\\n    function _borrow(address _asset, address _borrower, address _receiver, uint256 _amount)\\n        internal\\n        nonReentrant\\n        returns (uint256 debtAmount, uint256 debtShare)\\n    {\\n        // MUST BE CALLED AS FIRST METHOD!\\n        _accrueInterest(_asset);\\n\\n        if (!borrowPossible(_asset, _borrower)) revert BorrowNotPossible();\\n\\n        if (liquidity(_asset) < _amount) revert NotEnoughLiquidity();\\n\\n        AssetStorage storage _state = _assetStorage[_asset];\\n\\n        uint256 totalBorrowAmount = _state.totalBorrowAmount;\\n        uint256 entryFee = siloRepository.entryFee();\\n        uint256 fee = entryFee == 0 ? 0 : _amount * entryFee / SolvencyV2._PRECISION_DECIMALS;\\n        debtShare = (_amount + fee).toShareRoundUp(totalBorrowAmount, _state.debtToken.totalSupply());\\n        debtAmount = _amount;\\n\\n        _state.totalBorrowAmount = totalBorrowAmount + _amount + fee;\\n        _interestData[_asset].protocolFees += fee;\\n\\n        _state.debtToken.mint(_borrower, debtShare);\\n\\n        emit Borrow(_asset, _borrower, _amount);\\n        ERC20(_asset).safeTransfer(_receiver, _amount);\\n\\n        // IMPORTANT - keep `validateBorrowAfter` at the end\\n        _validateBorrowAfter(_borrower);\\n    }\\n\\n    /// @dev Main repay function that handles all repay logic and validation\\n    /// @param _asset asset address that is being repaid\\n    /// @param _borrower wallet address for which debt is being repaid\\n    /// @param _repayer wallet address that will pay the debt. It's possible that Router\\n    /// contract is executing repay for user and should be the one paying the debt.\\n    /// @param _amount amount of asset to repay\\n    /// @return repaidAmount amount repaid\\n    /// @return repaidShare burned debt share\\n    function _repay(address _asset, address _borrower, address _repayer, uint256 _amount)\\n        internal\\n        onlyExistingAsset(_asset)\\n        nonReentrant\\n        returns (uint256 repaidAmount, uint256 repaidShare)\\n    {\\n        // MUST BE CALLED AS FIRST METHOD!\\n        _accrueInterest(_asset);\\n\\n        AssetStorage storage _state = _assetStorage[_asset];\\n        (repaidAmount, repaidShare) = _calculateDebtAmountAndShare(_state, _borrower, _amount);\\n\\n        if (repaidShare == 0) revert UnexpectedEmptyReturn();\\n\\n        emit Repay(_asset, _borrower, repaidAmount);\\n\\n        ERC20(_asset).safeTransferFrom(_repayer, address(this), repaidAmount);\\n\\n        // change debt state before, because share token state is changes the same way (notification is after burn)\\n        _state.totalBorrowAmount -= repaidAmount;\\n        _state.debtToken.burn(_borrower, repaidShare);\\n    }\\n\\n    /// @param _assets all current assets, this is an optimization, so we don't have to read it from storage few times\\n    /// @param _user user to liquidate\\n    /// @param _flashReceiver address which will get all collaterals and will be notified once collaterals will be send\\n    /// @param _flashReceiverData custom data to forward to receiver\\n    /// @return receivedCollaterals amounts of collaterals transferred to `_flashReceiver`\\n    /// @return shareAmountsToRepay expected amounts to repay\\n    function _userLiquidation(\\n        address[] memory _assets,\\n        address _user,\\n        IFlashLiquidationReceiver _flashReceiver,\\n        bytes memory _flashReceiverData\\n    )\\n        internal\\n        // we can not use `nonReentrant` because we are using it in `_repay`,\\n        // and `_repay` needs to be reentered as part of a liquidation\\n        liquidationNonReentrant\\n        returns (uint256[] memory receivedCollaterals, uint256[] memory shareAmountsToRepay)\\n    {\\n        // gracefully fail if _user is solvent\\n        if (isSolvent(_user)) {\\n            uint256[] memory empty = new uint256[](_assets.length);\\n            return (empty, empty);\\n        }\\n\\n        (receivedCollaterals, shareAmountsToRepay) = _flashUserLiquidation(_assets, _user, address(_flashReceiver));\\n\\n        // _flashReceiver needs to repayFor user\\n        _flashReceiver.siloLiquidationCallback(\\n            _user,\\n            _assets,\\n            receivedCollaterals,\\n            shareAmountsToRepay,\\n            _flashReceiverData\\n        );\\n\\n        for (uint256 i = 0; i < _assets.length; i++) {\\n            if (receivedCollaterals[i] != 0 || shareAmountsToRepay[i] != 0) {\\n                emit Liquidate(_assets[i], _user, shareAmountsToRepay[i], receivedCollaterals[i]);\\n            }\\n        }\\n\\n        if (!isSolvent(_user)) revert NotSolvent();\\n    }\\n\\n    function _flashUserLiquidation(address[] memory _assets, address _borrower, address _liquidator)\\n        internal\\n        returns (uint256[] memory receivedCollaterals, uint256[] memory amountsToRepay)\\n    {\\n        uint256 assetsLength = _assets.length;\\n        receivedCollaterals = new uint256[](assetsLength);\\n        amountsToRepay = new uint256[](assetsLength);\\n\\n        uint256 protocolLiquidationFee = siloRepository.protocolLiquidationFee();\\n\\n        for (uint256 i = 0; i < assetsLength; i++) {\\n            _accrueInterest(_assets[i]);\\n\\n            AssetStorage storage _state = _assetStorage[_assets[i]];\\n\\n            // we do not allow for partial repayment on liquidation, that's why max\\n            (amountsToRepay[i],) = _calculateDebtAmountAndShare(_state, _borrower, type(uint256).max);\\n\\n            (uint256 withdrawnOnlyAmount,) = _withdrawAsset(\\n                _assets[i],\\n                type(uint256).max,\\n                _borrower,\\n                _liquidator,\\n                true, // collateral only\\n                protocolLiquidationFee\\n            );\\n\\n            (uint256 withdrawnAmount,) = _withdrawAsset(\\n                _assets[i],\\n                type(uint256).max,\\n                _borrower,\\n                _liquidator,\\n                false, // collateral only\\n                protocolLiquidationFee\\n            );\\n\\n            receivedCollaterals[i] = withdrawnOnlyAmount + withdrawnAmount;\\n        }\\n    }\\n\\n    /// @dev Utility function for withdrawing an asset\\n    /// @param _asset asset to withdraw\\n    /// @param _assetAmount amount of asset to withdraw\\n    /// @param _depositor wallet address that is an owner of the deposit\\n    /// @param _receiver wallet address that is receiving the token\\n    /// @param _collateralOnly true if withdraw collateral only.\\n    /// @param _protocolLiquidationFee if provided (!=0) liquidation fees will be applied and returned\\n    /// `withdrawnAmount` will be decreased\\n    /// @return withdrawnAmount amount of asset that has been sent to receiver\\n    /// @return burnedShare burned share based on `withdrawnAmount`\\n    function _withdrawAsset(\\n        address _asset,\\n        uint256 _assetAmount,\\n        address _depositor,\\n        address _receiver,\\n        bool _collateralOnly,\\n        uint256 _protocolLiquidationFee\\n    )\\n        internal\\n        returns (uint256 withdrawnAmount, uint256 burnedShare)\\n    {\\n        (uint256 assetTotalDeposits, IShareToken shareToken, uint256 availableLiquidity) =\\n            _getWithdrawAssetData(_asset, _collateralOnly);\\n\\n        if (_assetAmount == type(uint256).max) {\\n            burnedShare = shareToken.balanceOf(_depositor);\\n            withdrawnAmount = burnedShare.toAmount(assetTotalDeposits, shareToken.totalSupply());\\n        } else {\\n            burnedShare = _assetAmount.toShareRoundUp(assetTotalDeposits, shareToken.totalSupply());\\n            withdrawnAmount = _assetAmount;\\n        }\\n\\n        if (withdrawnAmount == 0) {\\n            // we can not revert here, because liquidation will fail when one of collaterals will be empty\\n            return (0, 0);\\n        }\\n\\n        if (assetTotalDeposits < withdrawnAmount) revert NotEnoughDeposits();\\n\\n        unchecked {\\n            // can be unchecked because of the `if` above\\n            assetTotalDeposits -=  withdrawnAmount;\\n        }\\n\\n        uint256 amountToTransfer = _applyLiquidationFee(_asset, withdrawnAmount, _protocolLiquidationFee);\\n\\n        if (availableLiquidity < amountToTransfer) revert NotEnoughLiquidity();\\n\\n        AssetStorage storage _state = _assetStorage[_asset];\\n\\n        if (_collateralOnly) {\\n            _state.collateralOnlyDeposits = assetTotalDeposits;\\n        } else {\\n            _state.totalDeposits = assetTotalDeposits;\\n        }\\n\\n        shareToken.burn(_depositor, burnedShare);\\n        // in case token sent in fee-on-transfer type of token we do not care when withdrawing\\n        ERC20(_asset).safeTransfer(_receiver, amountToTransfer);\\n    }\\n\\n    /// @notice Calculates liquidations fee and returns amount of asset transferred to liquidator\\n    /// @param _asset asset address\\n    /// @param _amount amount on which we will apply fee\\n    /// @param _protocolLiquidationFee liquidation fee in SolvencyV2._PRECISION_DECIMALS\\n    /// @return change amount left after subtracting liquidation fee\\n    function _applyLiquidationFee(address _asset, uint256 _amount, uint256 _protocolLiquidationFee)\\n        internal\\n        returns (uint256 change)\\n    {\\n        if (_protocolLiquidationFee == 0) {\\n            return _amount;\\n        }\\n\\n        uint256 liquidationFeeAmount;\\n\\n        (\\n            liquidationFeeAmount,\\n            _interestData[_asset].protocolFees\\n        ) = SolvencyV2.calculateLiquidationFee(_interestData[_asset].protocolFees, _amount, _protocolLiquidationFee);\\n\\n        unchecked {\\n            // if fees will not be higher than 100% this will not underflow, this is responsibility of siloRepository\\n            // in case we do underflow, we can expect liquidator reject tx because of too little change\\n            change = _amount - liquidationFeeAmount;\\n        }\\n    }\\n\\n    /// @dev harvest protocol fees from particular asset\\n    /// @param _asset asset we want to harvest fees from\\n    /// @param _receiver address of fees receiver\\n    /// @return harvestedFees harvested fee\\n    function _harvestProtocolFees(address _asset, address _receiver)\\n        internal\\n        nonReentrant\\n        returns (uint256 harvestedFees)\\n    {\\n        AssetInterestData storage data = _interestData[_asset];\\n\\n        harvestedFees = data.protocolFees - data.harvestedProtocolFees;\\n\\n        uint256 currentLiquidity = liquidity(_asset);\\n\\n        if (harvestedFees > currentLiquidity) {\\n            harvestedFees = currentLiquidity;\\n        }\\n\\n        if (harvestedFees == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // This can't overflow because this addition is less than or equal to data.protocolFees\\n            data.harvestedProtocolFees += harvestedFees;\\n        }\\n\\n        ERC20(_asset).safeTransfer(_receiver, harvestedFees);\\n    }\\n\\n    /// @notice Accrue interest for asset\\n    /// @dev Silo Interest Rate Model implements dynamic interest rate that changes every second. Returned\\n    /// interest rate by the model is compounded rate so it can be used in math calculations as if it was\\n    /// static. Rate is calculated for the time range between last update and current timestamp.\\n    /// @param _asset address of the asset for which interest should be accrued\\n    /// @return accruedInterest total accrued interest\\n    function _accrueInterest(address _asset) internal returns (uint256 accruedInterest) {\\n        /// @dev `_accrueInterest` is called on every user action, including liquidation. It's enough to check\\n        /// if Silo is paused in this function.\\n        if (IGuardedLaunch(address(siloRepository)).isSiloPaused(address(this), _asset)) {\\n            revert Paused();\\n        }\\n\\n        AssetStorage storage _state = _assetStorage[_asset];\\n        AssetInterestData storage _assetInterestData = _interestData[_asset];\\n        uint256 lastTimestamp = _assetInterestData.interestRateTimestamp;\\n\\n        // This is the first time, so we can return early and save some gas\\n        if (lastTimestamp == 0) {\\n            _assetInterestData.interestRateTimestamp = uint64(block.timestamp);\\n            return 0;\\n        }\\n\\n        // Interest has already been accrued this block\\n        if (lastTimestamp == block.timestamp) {\\n            return 0;\\n        }\\n\\n        uint256 rcomp = _getModel(_asset).getCompoundInterestRateAndUpdate(_asset, block.timestamp);\\n        uint256 protocolShareFee = siloRepository.protocolShareFee();\\n\\n        uint256 totalBorrowAmountCached = _state.totalBorrowAmount;\\n        uint256 protocolFeesCached = _assetInterestData.protocolFees;\\n        uint256 newProtocolFees;\\n        uint256 protocolShare;\\n        uint256 depositorsShare;\\n\\n        accruedInterest = totalBorrowAmountCached * rcomp / SolvencyV2._PRECISION_DECIMALS;\\n\\n        unchecked {\\n            // If we overflow on multiplication it should not revert tx, we will get lower fees\\n            protocolShare = accruedInterest * protocolShareFee / SolvencyV2._PRECISION_DECIMALS;\\n            newProtocolFees = protocolFeesCached + protocolShare;\\n\\n            if (newProtocolFees < protocolFeesCached) {\\n                protocolShare = type(uint256).max - protocolFeesCached;\\n                newProtocolFees = type(uint256).max;\\n            }\\n    \\n            depositorsShare = accruedInterest - protocolShare;\\n        }\\n\\n        // update contract state\\n        _state.totalBorrowAmount = totalBorrowAmountCached + accruedInterest;\\n        _state.totalDeposits = _state.totalDeposits + depositorsShare;\\n        _assetInterestData.protocolFees = newProtocolFees;\\n        _assetInterestData.interestRateTimestamp = uint64(block.timestamp);\\n    }\\n\\n    /// @dev gets interest rates model object\\n    /// @param _asset asset for which to calculate interest rate\\n    /// @return IInterestRateModel interest rates model object\\n    function _getModel(address _asset) internal view returns (IInterestRateModel) {\\n        return IInterestRateModel(siloRepository.getInterestRateModel(address(this), _asset));\\n    }\\n\\n    /// @dev calculates amount to repay based on user shares, we do not apply virtual balances here,\\n    /// if needed, they need to be apply beforehand\\n    /// @param _state asset storage struct\\n    /// @param _borrower borrower address\\n    /// @param _amount proposed amount of asset to repay. Based on that,`repayShare` is calculated.\\n    /// @return amount amount of asset to repay\\n    /// @return repayShare amount of debt token representing debt ownership\\n    function _calculateDebtAmountAndShare(AssetStorage storage _state, address _borrower, uint256 _amount)\\n        internal\\n        view\\n        returns (uint256 amount, uint256 repayShare)\\n    {\\n        uint256 borrowerDebtShare = _state.debtToken.balanceOf(_borrower);\\n        uint256 debtTokenTotalSupply = _state.debtToken.totalSupply();\\n        uint256 totalBorrowed = _state.totalBorrowAmount;\\n        uint256 maxAmount = borrowerDebtShare.toAmountRoundUp(totalBorrowed, debtTokenTotalSupply);\\n\\n        if (_amount >= maxAmount) {\\n            amount = maxAmount;\\n            repayShare = borrowerDebtShare;\\n        } else {\\n            amount = _amount;\\n            repayShare = _amount.toShare(totalBorrowed, debtTokenTotalSupply);\\n        }\\n    }\\n\\n    /// @dev verifies if user did not borrow more than allowed maximum\\n    function _validateBorrowAfter(address _user) private view {\\n        (address[] memory assets, AssetStorage[] memory assetsStates) = getAssetsWithState();\\n\\n        (uint256 userLTV, uint256 maximumAllowedLTV) = SolvencyV2.calculateLTVs(\\n            SolvencyV2.SolvencyParams(\\n                siloRepository,\\n                ISilo(address(this)),\\n                assets,\\n                assetsStates,\\n                _user\\n            ),\\n            SolvencyV2.TypeofLTV.MaximumLTV\\n        );\\n\\n        if (userLTV > maximumAllowedLTV) revert MaximumLTVReached();\\n    }\\n\\n    function _getWithdrawAssetData(address _asset, bool _collateralOnly)\\n        private\\n        view\\n        returns(uint256 assetTotalDeposits, IShareToken shareToken, uint256 availableLiquidity)\\n    {\\n        AssetStorage storage _state = _assetStorage[_asset];\\n\\n        if (_collateralOnly) {\\n            assetTotalDeposits = _state.collateralOnlyDeposits;\\n            shareToken = _state.collateralOnlyToken;\\n            availableLiquidity = assetTotalDeposits;\\n        } else {\\n            assetTotalDeposits = _state.totalDeposits;\\n            shareToken = _state.collateralToken;\\n            availableLiquidity = liquidity(_asset);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3fc1daf0a94273cfc78238fbb6b13583e04a77bb4c13af9806d5572eafd460f6\",\"license\":\"BUSL-1.1\"},\"contracts/SiloCollateralOnly.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\nimport \\\"./SiloV2.sol\\\";\\n\\n/// @notice Modification of the Silo where a siloAsset can be deposited\\n/// only as collateral only asset and can't be borrowed.\\n/// Such assets as Curve LP Tokens should be added only with trusted underlying pool assets.\\n/// Otherwise, we should consider a possibility of the Read-Only Reentrancy attack on a Curve Oracle.\\n/// More about attack vector and solution on how to avoid it:\\n/// https://chainsecurity.com/curve-lp-oracle-manipulation-post-mortem/\\ncontract SiloCollateralOnly is SiloV2 {\\n    /// @dev Revert if deposit/withdraw operations performed with a silo asset are\\n    /// not marked as collateral only\\n    error SiloAssetIsCollateralOnly();\\n\\n    /// @dev Revert on a deposit with a silo asset marked as not collateral only\\n    /// @dev Revert on a withdrawal if a silo asset will be withdrawn as not collateral only\\n    /// @param _asset Asset to be deposited/withdrawn into/from the silo\\n    /// @param _collateralOnly Flag whether the deposit/withtrawal is collateral only or not\\n    modifier assetIsCollateralOnly(address _asset, bool _collateralOnly) {\\n        if (_asset == siloAsset && !_collateralOnly) revert SiloAssetIsCollateralOnly();\\n        _;\\n    }\\n\\n    constructor (ISiloRepository _repository, address _siloAsset, uint128 _version)\\n        SiloV2(_repository, _siloAsset, _version)\\n    {\\n        // initial setup is done in BaseSilo, nothing to do here\\n    }\\n\\n    /// @inheritdoc ISilo\\n    function deposit(address _asset, uint256 _amount, bool _collateralOnly)\\n        external\\n        virtual\\n        override\\n        assetIsCollateralOnly(_asset, _collateralOnly)\\n        returns (uint256 collateralAmount, uint256 collateralShare)\\n    {\\n        return _deposit(_asset, msg.sender, msg.sender, _amount, _collateralOnly);\\n    }\\n\\n    /// @inheritdoc ISilo\\n    function depositFor(\\n        address _asset,\\n        address _depositor,\\n        uint256 _amount,\\n        bool _collateralOnly\\n    )\\n        external\\n        virtual\\n        override\\n        assetIsCollateralOnly(_asset, _collateralOnly)\\n        returns (uint256 collateralAmount, uint256 collateralShare)\\n    {\\n        return _deposit(_asset, msg.sender, _depositor, _amount, _collateralOnly);\\n    }\\n\\n    /// @inheritdoc ISilo\\n    function withdraw(address _asset, uint256 _amount, bool _collateralOnly)\\n        external\\n        virtual\\n        override\\n        assetIsCollateralOnly(_asset, _collateralOnly)\\n        returns (uint256 withdrawnAmount, uint256 withdrawnShare)\\n    {\\n        return _withdraw(_asset, msg.sender, msg.sender, _amount, _collateralOnly);\\n    }\\n\\n    /// @inheritdoc ISilo\\n    function withdrawFor(\\n        address _asset,\\n        address _depositor,\\n        address _receiver,\\n        uint256 _amount,\\n        bool _collateralOnly\\n    )\\n        external\\n        virtual\\n        override\\n        onlyRouter\\n        assetIsCollateralOnly(_asset, _collateralOnly)\\n        returns (uint256 withdrawnAmount, uint256 withdrawnShare)\\n    {\\n        return _withdraw(_asset, _depositor, _receiver, _amount, _collateralOnly);\\n    }\\n\\n        /// @inheritdoc ISilo\\n    function borrow(address _asset, uint256 _amount)\\n        external\\n        virtual\\n        override\\n        returns (uint256 debtAmount, uint256 debtShare)\\n    {\\n        // Revert on a attempt to borrow a Silo asset.\\n        if (_isSiloAsset(_asset)) revert(); // solhint-disable-line reason-string\\n\\n        return _borrow(_asset, msg.sender, msg.sender, _amount);\\n    }\\n\\n    /// @inheritdoc ISilo\\n    function borrowFor(address _asset, address _borrower, address _receiver, uint256 _amount)\\n        external\\n        virtual\\n        override\\n        onlyRouter\\n        returns (uint256 debtAmount, uint256 debtShare)\\n    {\\n        // Revert on a attempt to borrow a Silo asset.\\n        if (_isSiloAsset(_asset)) revert(); // solhint-disable-line reason-string\\n\\n        return _borrow(_asset, _borrower, _receiver, _amount);\\n    }\\n\\n    /// @dev Check if the asset is the silo asset\\n    /// @param _asset Asset to be deposited/withdrawn into/from the silo\\n    function _isSiloAsset(address _asset) internal view returns (bool) {\\n        return _asset == siloAsset;\\n    }\\n}\\n\",\"keccak256\":\"0xe6e4172ef5011e11bd410b5db6fc50bda1978dbda83f925dd0c52325b858ee68\",\"license\":\"BUSL-1.1\"},\"contracts/SiloV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport \\\"./interfaces/ISilo.sol\\\";\\nimport \\\"./BaseSilo.sol\\\";\\n\\n/// @title Silo with virtual methods\\n/// @notice Silo is the main component of the protocol. It implements lending logic, manages and isolates\\n/// risk, acts as a vault for assets, and performs liquidations. Each Silo is composed of the unique asset\\n/// for which it was created (ie. UNI) and bridge assets (ie. ETH and SiloDollar). There may be multiple\\n/// bridge assets at any given time.\\n/// @dev Main Silo contact that inherits from Base contract. It implements all user/UI facing methods.\\n/// @custom:security-contact security@silo.finance\\ncontract SiloV2 is ISilo, BaseSilo {\\n    constructor (ISiloRepository _repository, address _siloAsset, uint128 _version)\\n        BaseSilo(_repository, _siloAsset, _version)\\n    {\\n        // initial setup is done in BaseSilo, nothing to do here\\n    }\\n\\n    /// @inheritdoc ISilo\\n    function deposit(address _asset, uint256 _amount, bool _collateralOnly)\\n        external\\n        virtual\\n        override\\n        returns (uint256 collateralAmount, uint256 collateralShare)\\n    {\\n        return _deposit(_asset, msg.sender, msg.sender, _amount, _collateralOnly);\\n    }\\n\\n    /// @inheritdoc ISilo\\n    function depositFor(\\n        address _asset,\\n        address _depositor,\\n        uint256 _amount,\\n        bool _collateralOnly\\n    )\\n        external\\n        virtual\\n        override\\n        returns (uint256 collateralAmount, uint256 collateralShare)\\n    {\\n        return _deposit(_asset, msg.sender, _depositor, _amount, _collateralOnly);\\n    }\\n\\n    /// @inheritdoc ISilo\\n    function withdraw(address _asset, uint256 _amount, bool _collateralOnly)\\n        external\\n        virtual\\n        override\\n        returns (uint256 withdrawnAmount, uint256 withdrawnShare)\\n    {\\n        return _withdraw(_asset, msg.sender, msg.sender, _amount, _collateralOnly);\\n    }\\n\\n    /// @inheritdoc ISilo\\n    function withdrawFor(address _asset, address _depositor, address _receiver, uint256 _amount, bool _collateralOnly)\\n        external\\n        virtual\\n        override\\n        onlyRouter\\n        returns (uint256 withdrawnAmount, uint256 withdrawnShare)\\n    {\\n        return _withdraw(_asset, _depositor, _receiver, _amount, _collateralOnly);\\n    }\\n\\n    /// @inheritdoc ISilo\\n    function borrow(\\n        address _asset,\\n        uint256 _amount\\n    )\\n        external\\n        virtual\\n        override\\n        returns (uint256 debtAmount, uint256 debtShare)\\n    {\\n        return _borrow(_asset, msg.sender, msg.sender, _amount);\\n    }\\n\\n    /// @inheritdoc ISilo\\n    function borrowFor(address _asset, address _borrower, address _receiver, uint256 _amount)\\n        external\\n        virtual\\n        override\\n        onlyRouter\\n        returns (uint256 debtAmount, uint256 debtShare)\\n    {\\n        return _borrow(_asset, _borrower, _receiver, _amount);\\n    }\\n\\n    /// @inheritdoc ISilo\\n    function repay(address _asset, uint256 _amount)\\n        external\\n        virtual\\n        override\\n        returns (uint256 repaidAmount, uint256 repaidShare)\\n    {\\n        return _repay(_asset, msg.sender, msg.sender, _amount);\\n    }\\n\\n    /// @inheritdoc ISilo\\n    function repayFor(address _asset, address _borrower, uint256 _amount)\\n        external\\n        virtual\\n        override\\n        returns (uint256 repaidAmount, uint256 repaidShare)\\n    {\\n        return _repay(_asset, _borrower, msg.sender, _amount);\\n    }\\n\\n    /// @inheritdoc ISilo\\n    function flashLiquidate(address[] memory _users, bytes memory _flashReceiverData)\\n        external\\n        virtual\\n        override\\n        returns (\\n            address[] memory assets,\\n            uint256[][] memory receivedCollaterals,\\n            uint256[][] memory shareAmountsToRepay\\n        )\\n    {\\n        assets = getAssets();\\n        uint256 usersLength = _users.length;\\n        receivedCollaterals = new uint256[][](usersLength);\\n        shareAmountsToRepay = new uint256[][](usersLength);\\n\\n        for (uint256 i = 0; i < usersLength; i++) {\\n            (\\n                receivedCollaterals[i],\\n                shareAmountsToRepay[i]\\n            ) = _userLiquidation(assets, _users[i], IFlashLiquidationReceiver(msg.sender), _flashReceiverData);\\n        }\\n    }\\n\\n    /// @inheritdoc ISilo\\n    function harvestProtocolFees() external virtual override returns (uint256[] memory harvestedAmounts) {\\n        address[] memory assets = getAssets();\\n        harvestedAmounts = new uint256[](assets.length);\\n\\n        address repositoryOwner = siloRepository.owner();\\n\\n        for (uint256 i; i < assets.length;) {\\n            unchecked {\\n                // it will not overflow because fee is much lower than any other amounts\\n                harvestedAmounts[i] = _harvestProtocolFees(assets[i], repositoryOwner);\\n                // we run out of gas before we overflow i\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc ISilo\\n    function accrueInterest(address _asset) public virtual override returns (uint256 interest) {\\n        return _accrueInterest(_asset);\\n    }\\n}\\n\",\"keccak256\":\"0xc6d4df680cc2b9f76f7917080b1f0d551c80db3ccf1a78e587932e38a7f68020\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IBaseSilo.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\nimport \\\"./IShareToken.sol\\\";\\nimport \\\"./IFlashLiquidationReceiver.sol\\\";\\nimport \\\"./ISiloRepository.sol\\\";\\n\\ninterface IBaseSilo {\\n    enum AssetStatus { Undefined, Active, Removed }\\n\\n    /// @dev Storage struct that holds all required data for a single token market\\n    struct AssetStorage {\\n        /// @dev Token that represents a share in totalDeposits of Silo\\n        IShareToken collateralToken;\\n        /// @dev Token that represents a share in collateralOnlyDeposits of Silo\\n        IShareToken collateralOnlyToken;\\n        /// @dev Token that represents a share in totalBorrowAmount of Silo\\n        IShareToken debtToken;\\n        /// @dev COLLATERAL: Amount of asset token that has been deposited to Silo with interest earned by depositors.\\n        /// It also includes token amount that has been borrowed.\\n        uint256 totalDeposits;\\n        /// @dev COLLATERAL ONLY: Amount of asset token that has been deposited to Silo that can be ONLY used\\n        /// as collateral. These deposits do NOT earn interest and CANNOT be borrowed.\\n        uint256 collateralOnlyDeposits;\\n        /// @dev DEBT: Amount of asset token that has been borrowed with accrued interest.\\n        uint256 totalBorrowAmount;\\n    }\\n\\n    /// @dev Storage struct that holds data related to fees and interest\\n    struct AssetInterestData {\\n        /// @dev Total amount of already harvested protocol fees\\n        uint256 harvestedProtocolFees;\\n        /// @dev Total amount (ever growing) of asset token that has been earned by the protocol from\\n        /// generated interest.\\n        uint256 protocolFees;\\n        /// @dev Timestamp of the last time `interestRate` has been updated in storage.\\n        uint64 interestRateTimestamp;\\n        /// @dev True if asset was removed from the protocol. If so, deposit and borrow functions are disabled\\n        /// for that asset\\n        AssetStatus status;\\n    }\\n\\n    /// @notice data that InterestModel needs for calculations\\n    struct UtilizationData {\\n        uint256 totalDeposits;\\n        uint256 totalBorrowAmount;\\n        /// @dev timestamp of last interest accrual\\n        uint64 interestRateTimestamp;\\n    }\\n\\n    /// @dev Shares names and symbols that are generated while asset initialization\\n    struct AssetSharesMetadata {\\n        /// @dev Name for the collateral shares token\\n        string collateralName;\\n        /// @dev Symbol for the collateral shares token\\n        string collateralSymbol;\\n        /// @dev Name for the collateral only (protected collateral) shares token\\n        string protectedName;\\n        /// @dev Symbol for the collateral only (protected collateral) shares token\\n        string protectedSymbol;\\n        /// @dev Name for the debt shares token\\n        string debtName;\\n        /// @dev Symbol for the debt shares token\\n        string debtSymbol;\\n    }\\n\\n    /// @notice Emitted when deposit is made\\n    /// @param asset asset address that was deposited\\n    /// @param depositor wallet address that deposited asset\\n    /// @param amount amount of asset that was deposited\\n    /// @param collateralOnly type of deposit, true if collateralOnly deposit was used\\n    event Deposit(address indexed asset, address indexed depositor, uint256 amount, bool collateralOnly);\\n\\n    /// @notice Emitted when withdraw is made\\n    /// @param asset asset address that was withdrawn\\n    /// @param depositor wallet address that deposited asset\\n    /// @param receiver wallet address that received asset\\n    /// @param amount amount of asset that was withdrew\\n    /// @param collateralOnly type of withdraw, true if collateralOnly deposit was used\\n    event Withdraw(\\n        address indexed asset,\\n        address indexed depositor,\\n        address indexed receiver,\\n        uint256 amount,\\n        bool collateralOnly\\n    );\\n\\n    /// @notice Emitted on asset borrow\\n    /// @param asset asset address that was borrowed\\n    /// @param user wallet address that borrowed asset\\n    /// @param amount amount of asset that was borrowed\\n    event Borrow(address indexed asset, address indexed user, uint256 amount);\\n\\n    /// @notice Emitted on asset repay\\n    /// @param asset asset address that was repaid\\n    /// @param user wallet address that repaid asset\\n    /// @param amount amount of asset that was repaid\\n    event Repay(address indexed asset, address indexed user, uint256 amount);\\n\\n    /// @notice Emitted on user liquidation\\n    /// @param asset asset address that was liquidated\\n    /// @param user wallet address that was liquidated\\n    /// @param shareAmountRepaid amount of collateral-share token that was repaid. This is collateral token representing\\n    /// ownership of underlying deposit.\\n    /// @param seizedCollateral amount of underlying token that was seized by liquidator\\n    event Liquidate(address indexed asset, address indexed user, uint256 shareAmountRepaid, uint256 seizedCollateral);\\n\\n    /// @notice Emitted when the status for an asset is updated\\n    /// @param asset asset address that was updated\\n    /// @param status new asset status\\n    event AssetStatusUpdate(address indexed asset, AssetStatus indexed status);\\n\\n    /// @return version of the silo contract\\n    function VERSION() external returns (uint128); // solhint-disable-line func-name-mixedcase\\n\\n    /// @notice Synchronize current bridge assets with Silo\\n    /// @dev This function needs to be called on Silo deployment to setup all assets for Silo. It needs to be\\n    /// called every time a bridged asset is added or removed. When bridge asset is removed, depositing and borrowing\\n    /// should be disabled during asset sync.\\n    function syncBridgeAssets() external;\\n\\n    /// @notice Get Silo Repository contract address\\n    /// @return Silo Repository contract address\\n    function siloRepository() external view returns (ISiloRepository);\\n\\n    /// @notice Get asset storage data\\n    /// @param _asset asset address\\n    /// @return AssetStorage struct\\n    function assetStorage(address _asset) external view returns (AssetStorage memory);\\n\\n    /// @notice Get asset interest data\\n    /// @param _asset asset address\\n    /// @return AssetInterestData struct\\n    function interestData(address _asset) external view returns (AssetInterestData memory);\\n\\n    /// @dev helper method for InterestRateModel calculations\\n    function utilizationData(address _asset) external view returns (UtilizationData memory data);\\n\\n    /// @notice Calculates solvency of an account\\n    /// @param _user wallet address for which solvency is calculated\\n    /// @return true if solvent, false otherwise\\n    function isSolvent(address _user) external view returns (bool);\\n\\n    /// @notice Returns all initialized (synced) assets of Silo including current and removed bridge assets\\n    /// @return assets array of initialized assets of Silo\\n    function getAssets() external view returns (address[] memory assets);\\n\\n    /// @notice Returns all initialized (synced) assets of Silo including current and removed bridge assets\\n    /// with corresponding state\\n    /// @return assets array of initialized assets of Silo\\n    /// @return assetsStorage array of assets state corresponding to `assets` array\\n    function getAssetsWithState() external view returns (address[] memory assets, AssetStorage[] memory assetsStorage);\\n\\n    /// @notice Check if depositing an asset for given account is possible\\n    /// @dev Depositing an asset that has been already borrowed (and vice versa) is disallowed\\n    /// @param _asset asset we want to deposit\\n    /// @param _depositor depositor address\\n    /// @return true if asset can be deposited by depositor\\n    function depositPossible(address _asset, address _depositor) external view returns (bool);\\n\\n    /// @notice Check if borrowing an asset for given account is possible\\n    /// @dev Borrowing an asset that has been already deposited (and vice versa) is disallowed\\n    /// @param _asset asset we want to deposit\\n    /// @param _borrower borrower address\\n    /// @return true if asset can be borrowed by borrower\\n    function borrowPossible(address _asset, address _borrower) external view returns (bool);\\n\\n    /// @dev Amount of token that is available for borrowing\\n    /// @param _asset asset to get liquidity for\\n    /// @return Silo liquidity\\n    function liquidity(address _asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc8a26cc2e206cd62546338a876fd011e2fba9c9a727e7f7aa4c56aae81a1b765\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IFlashLiquidationReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\n/// @dev when performing Silo flash liquidation, FlashReceiver contract will receive all collaterals\\ninterface IFlashLiquidationReceiver {\\n    /// @dev this method is called when doing Silo flash liquidation\\n    ///         one can NOT assume, that if _seizedCollateral[i] != 0, then _shareAmountsToRepaid[i] must be 0\\n    ///         one should assume, that any combination of amounts is possible\\n    ///         on callback, one must call `Silo.repayFor` because at the end of transaction,\\n    ///         Silo will check if borrower is solvent.\\n    /// @param _user user address, that is liquidated\\n    /// @param _assets array of collateral assets received during user liquidation\\n    ///         this array contains all assets (collateral borrowed) without any order\\n    /// @param _receivedCollaterals array of collateral amounts received during user liquidation\\n    ///         indexes of amounts are related to `_assets`,\\n    /// @param _shareAmountsToRepaid array of amounts to repay for each asset\\n    ///         indexes of amounts are related to `_assets`,\\n    /// @param _flashReceiverData data that are passed from sender that executes liquidation\\n    function siloLiquidationCallback(\\n        address _user,\\n        address[] calldata _assets,\\n        uint256[] calldata _receivedCollaterals,\\n        uint256[] calldata _shareAmountsToRepaid,\\n        bytes memory _flashReceiverData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x4b1fc8600548526b354934fd8b7ba348f1608cc6c988a0d731ea2baa11e2c0a1\",\"license\":\"MIT\"},\"contracts/interfaces/IGuardedLaunch.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\ninterface IGuardedLaunch {\\n    /// @dev Stores info about maximum allowed liquidity in a Silo. This limit applies to deposit only.\\n    struct MaxLiquidityLimit {\\n        /// @dev flag to turn on/off all limits for all Silos\\n        bool globalLimit;\\n        /// @dev default value represents maximum allowed liquidity in Silo\\n        uint256 defaultMaxLiquidity;\\n        /// @notice siloMaxLiquidity maps silo => asset => maximum allowed deposit liquidity.\\n        /// @dev Deposit liquidity limit is denominated in quote token. For example, if set to 1e18, it means that any\\n        /// given Silo is allowed for deposits up to 1 quote token of value. Value is calculated using prices from the\\n        /// Oracle.\\n        mapping(address => mapping(address => uint256)) siloMaxLiquidity;\\n    }\\n\\n    /// @dev Stores info about paused Silos\\n    /// if `globalPause` == `true`, all Silo are paused\\n    /// if `globalPause` == `false` and `siloPause[silo][0x0]` == `true`, all assets in a `silo` are paused\\n    /// if `globalPause` == `false` and `siloPause[silo][asset]` == `true`, only `asset` in a `silo` is paused\\n    struct Paused {\\n        bool globalPause;\\n        /// @dev maps silo address to asset address to bool\\n        mapping(address => mapping(address => bool)) siloPause;\\n    }\\n\\n    /// @notice Emitted when all Silos are paused or unpaused\\n    /// @param globalPause current value of `globalPause`\\n    event GlobalPause(bool globalPause);\\n\\n    /// @notice Emitted when a single Silo or single asset in a Silo is paused or unpaused\\n    /// @param silo address of Silo which is paused\\n    /// @param asset address of an asset which is paused\\n    /// @param pauseValue true when paused, otherwise false\\n    event SiloPause(address silo, address asset, bool pauseValue);\\n\\n    /// @notice Emitted when max liquidity toggle is switched\\n    /// @param newLimitedMaxLiquidityState new value for max liquidity toggle\\n    event LimitedMaxLiquidityToggled(bool newLimitedMaxLiquidityState);\\n\\n    /// @notice Emitted when deposit liquidity limit is changed for Silo and asset\\n    /// @param silo Silo address for which to set limit\\n    /// @param asset Silo asset for which to set limit\\n    /// @param newMaxDeposits deposit limit amount in quote token\\n    event SiloMaxDepositsLimitsUpdate(address indexed silo, address indexed asset, uint256 newMaxDeposits);\\n\\n    /// @notice Emitted when default max liquidity limit is changed\\n    /// @param newMaxDeposits new deposit limit in quote token\\n    event DefaultSiloMaxDepositsLimitUpdate(uint256 newMaxDeposits);\\n\\n    /// @notice Sets limited liquidity to provided value\\n    function setLimitedMaxLiquidity(bool _globalLimit) external;\\n\\n    /// @notice Sets default deposit limit for all Silos\\n    /// @param _maxDeposits deposit limit amount in quote token\\n    function setDefaultSiloMaxDepositsLimit(uint256 _maxDeposits) external;\\n\\n    /// @notice Sets deposit limit for Silo\\n    /// @param _silo Silo address for which to set limit\\n    /// @param _asset Silo asset for which to set limit\\n    /// @param _maxDeposits deposit limit amount in quote token\\n    function setSiloMaxDepositsLimit(\\n        address _silo,\\n        address _asset,\\n        uint256 _maxDeposits\\n    ) external;\\n\\n    /// @notice Pause all Silos\\n    /// @dev Callable only by owner.\\n    /// @param _globalPause true to pause all Silos, otherwise false\\n    function setGlobalPause(bool _globalPause) external;\\n\\n    /// @notice Pause single asset in a single Silo\\n    /// @dev Callable only by owner.\\n    /// @param _silo address of Silo in which `_asset` is being paused\\n    /// @param _asset address of an asset that is being paused\\n    /// @param _pauseValue true to pause, false to unpause\\n    function setSiloPause(address _silo, address _asset, bool _pauseValue) external;\\n\\n    /// @notice Check given asset in a Silo is paused\\n    /// @param _silo address of Silo\\n    /// @param _asset address of an asset\\n    /// @return true if given asset in a Silo is paused, otherwise false\\n    function isSiloPaused(address _silo, address _asset) external view returns (bool);\\n\\n    /// @notice Gets deposit limit for Silo\\n    /// @param _silo Silo address for which to set limit\\n    /// @param _asset Silo asset for which to set limit\\n    /// @return deposit limit for Silo\\n    function getMaxSiloDepositsValue(address _silo, address _asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x030da9c7612345699c525468de110163b9b83f285ac02483c66319d19c0f638b\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IInterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\ninterface IInterestRateModel {\\n    /* solhint-disable */\\n    struct Config {\\n        // uopt \\u2208 (0, 1) \\u2013 optimal utilization;\\n        int256 uopt;\\n        // ucrit \\u2208 (uopt, 1) \\u2013 threshold of large utilization;\\n        int256 ucrit;\\n        // ulow \\u2208 (0, uopt) \\u2013 threshold of low utilization\\n        int256 ulow;\\n        // ki > 0 \\u2013 integrator gain\\n        int256 ki;\\n        // kcrit > 0 \\u2013 proportional gain for large utilization\\n        int256 kcrit;\\n        // klow \\u2265 0 \\u2013 proportional gain for low utilization\\n        int256 klow;\\n        // klin \\u2265 0 \\u2013 coefficient of the lower linear bound\\n        int256 klin;\\n        // beta \\u2265 0 - a scaling factor\\n        int256 beta;\\n        // ri \\u2265 0 \\u2013 initial value of the integrator\\n        int256 ri;\\n        // Tcrit \\u2265 0 - the time during which the utilization exceeds the critical value\\n        int256 Tcrit;\\n    }\\n    /* solhint-enable */\\n\\n    /// @dev Set dedicated config for given asset in a Silo. Config is per asset per Silo so different assets\\n    /// in different Silo can have different configs.\\n    /// It will try to call `_silo.accrueInterest(_asset)` before updating config, but it is not guaranteed,\\n    /// that this call will be successful, if it fail config will be set anyway.\\n    /// @param _silo Silo address for which config should be set\\n    /// @param _asset asset address for which config should be set\\n    function setConfig(address _silo, address _asset, Config calldata _config) external;\\n\\n    /// @dev get compound interest rate and update model storage\\n    /// @param _asset address of an asset in Silo for which interest rate should be calculated\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcomp compounded interest rate from last update until now (1e18 == 100%)\\n    function getCompoundInterestRateAndUpdate(\\n        address _asset,\\n        uint256 _blockTimestamp\\n    ) external returns (uint256 rcomp);\\n\\n    /// @dev Get config for given asset in a Silo. If dedicated config is not set, default one will be returned.\\n    /// @param _silo Silo address for which config should be set\\n    /// @param _asset asset address for which config should be set\\n    /// @return Config struct for asset in Silo\\n    function getConfig(address _silo, address _asset) external view returns (Config memory);\\n\\n    /// @dev get compound interest rate\\n    /// @param _silo address of Silo\\n    /// @param _asset address of an asset in Silo for which interest rate should be calculated\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcomp compounded interest rate from last update until now (1e18 == 100%)\\n    function getCompoundInterestRate(\\n        address _silo,\\n        address _asset,\\n        uint256 _blockTimestamp\\n    ) external view returns (uint256 rcomp);\\n\\n    /// @dev get current annual interest rate\\n    /// @param _silo address of Silo\\n    /// @param _asset address of an asset in Silo for which interest rate should be calculated\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcur current annual interest rate (1e18 == 100%)\\n    function getCurrentInterestRate(\\n        address _silo,\\n        address _asset,\\n        uint256 _blockTimestamp\\n    ) external view returns (uint256 rcur);\\n\\n    /// @notice get the flag to detect rcomp restriction (zero current interest) due to overflow\\n    /// overflow boolean flag to detect rcomp restriction\\n    function overflowDetected(\\n        address _silo,\\n        address _asset,\\n        uint256 _blockTimestamp\\n    ) external view returns (bool overflow);\\n\\n    /// @dev pure function that calculates current annual interest rate\\n    /// @param _c configuration object, InterestRateModel.Config\\n    /// @param _totalBorrowAmount current total borrows for asset\\n    /// @param _totalDeposits current total deposits for asset\\n    /// @param _interestRateTimestamp timestamp of last interest rate update\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcur current annual interest rate (1e18 == 100%)\\n    function calculateCurrentInterestRate(\\n        Config memory _c,\\n        uint256 _totalDeposits,\\n        uint256 _totalBorrowAmount,\\n        uint256 _interestRateTimestamp,\\n        uint256 _blockTimestamp\\n    ) external pure returns (uint256 rcur);\\n\\n    /// @dev pure function that calculates interest rate based on raw input data\\n    /// @param _c configuration object, InterestRateModel.Config\\n    /// @param _totalBorrowAmount current total borrows for asset\\n    /// @param _totalDeposits current total deposits for asset\\n    /// @param _interestRateTimestamp timestamp of last interest rate update\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcomp compounded interest rate from last update until now (1e18 == 100%)\\n    /// @return ri current integral part of the rate\\n    /// @return Tcrit time during which the utilization exceeds the critical value\\n    /// @return overflow boolean flag to detect rcomp restriction\\n    function calculateCompoundInterestRateWithOverflowDetection(\\n        Config memory _c,\\n        uint256 _totalDeposits,\\n        uint256 _totalBorrowAmount,\\n        uint256 _interestRateTimestamp,\\n        uint256 _blockTimestamp\\n    ) external pure returns (\\n        uint256 rcomp,\\n        int256 ri,\\n        int256 Tcrit, // solhint-disable-line var-name-mixedcase\\n        bool overflow\\n    );\\n\\n    /// @dev pure function that calculates interest rate based on raw input data\\n    /// @param _c configuration object, InterestRateModel.Config\\n    /// @param _totalBorrowAmount current total borrows for asset\\n    /// @param _totalDeposits current total deposits for asset\\n    /// @param _interestRateTimestamp timestamp of last interest rate update\\n    /// @param _blockTimestamp current block timestamp\\n    /// @return rcomp compounded interest rate from last update until now (1e18 == 100%)\\n    /// @return ri current integral part of the rate\\n    /// @return Tcrit time during which the utilization exceeds the critical value\\n    function calculateCompoundInterestRate(\\n        Config memory _c,\\n        uint256 _totalDeposits,\\n        uint256 _totalBorrowAmount,\\n        uint256 _interestRateTimestamp,\\n        uint256 _blockTimestamp\\n    ) external pure returns (\\n        uint256 rcomp,\\n        int256 ri,\\n        int256 Tcrit // solhint-disable-line var-name-mixedcase\\n    );\\n\\n    /// @dev returns decimal points used by model\\n    function DP() external pure returns (uint256); // solhint-disable-line func-name-mixedcase\\n\\n    /// @dev just a helper method to see if address is a InterestRateModel\\n    /// @return always true\\n    function interestRateModelPing() external pure returns (bytes4);\\n}\\n\",\"keccak256\":\"0x26b53c997adc8ced83dac833e5d642e1dc3aff6a3ed643da64718c30674ee8c8\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/INotificationReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\n/// @title Common interface for Silo Incentive Contract\\ninterface INotificationReceiver {\\n    /// @dev Informs the contract about token transfer\\n    /// @param _token address of the token that was transferred\\n    /// @param _from sender\\n    /// @param _to receiver\\n    /// @param _amount amount that was transferred\\n    function onAfterTransfer(address _token, address _from, address _to, uint256 _amount) external;\\n\\n    /// @dev Sanity check function\\n    /// @return always true\\n    function notificationReceiverPing() external pure returns (bytes4);\\n}\\n\",\"keccak256\":\"0xdbfa701819d923d592f42926dbce3bbc6d0e64875d56685bb145ea0e7b449230\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.7.6 <0.9.0;\\n\\n/// @title Common interface for Silo Price Providers\\ninterface IPriceProvider {\\n    /// @notice Returns \\\"Time-Weighted Average Price\\\" for an asset. Calculates TWAP price for quote/asset.\\n    /// It unifies all tokens decimal to 18, examples:\\n    /// - if asses == quote it returns 1e18\\n    /// - if asset is USDC and quote is ETH and ETH costs ~$3300 then it returns ~0.0003e18 WETH per 1 USDC\\n    /// @param _asset address of an asset for which to read price\\n    /// @return price of asses with 18 decimals, throws when pool is not ready yet to provide price\\n    function getPrice(address _asset) external view returns (uint256 price);\\n\\n    /// @dev Informs if PriceProvider is setup for asset. It does not means PriceProvider can provide price right away.\\n    /// Some providers implementations need time to \\\"build\\\" buffer for TWAP price,\\n    /// so price may not be available yet but this method will return true.\\n    /// @param _asset asset in question\\n    /// @return TRUE if asset has been setup, otherwise false\\n    function assetSupported(address _asset) external view returns (bool);\\n\\n    /// @notice Gets token address in which prices are quoted\\n    /// @return quoteToken address\\n    function quoteToken() external view returns (address);\\n\\n    /// @notice Helper method that allows easily detects, if contract is PriceProvider\\n    /// @dev this can save us from simple human errors, in case we use invalid address\\n    /// but this should NOT be treated as security check\\n    /// @return always true\\n    function priceProviderPing() external pure returns (bytes4);\\n}\\n\",\"keccak256\":\"0xe25259fe540647dd3945dbc8eff5f7ec789c6708b42e1d82c456d3e8c9082147\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPriceProvidersRepository.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.7.6 <0.9.0;\\n\\nimport \\\"./IPriceProvider.sol\\\";\\n\\ninterface IPriceProvidersRepository {\\n    /// @notice Emitted when price provider is added\\n    /// @param newPriceProvider new price provider address\\n    event NewPriceProvider(IPriceProvider indexed newPriceProvider);\\n\\n    /// @notice Emitted when price provider is removed\\n    /// @param priceProvider removed price provider address\\n    event PriceProviderRemoved(IPriceProvider indexed priceProvider);\\n\\n    /// @notice Emitted when asset is assigned to price provider\\n    /// @param asset assigned asset   address\\n    /// @param priceProvider price provider address\\n    event PriceProviderForAsset(address indexed asset, IPriceProvider indexed priceProvider);\\n\\n    /// @notice Register new price provider\\n    /// @param _priceProvider address of price provider\\n    function addPriceProvider(IPriceProvider _priceProvider) external;\\n\\n    /// @notice Unregister price provider\\n    /// @param _priceProvider address of price provider to be removed\\n    function removePriceProvider(IPriceProvider _priceProvider) external;\\n\\n    /// @notice Sets price provider for asset\\n    /// @dev Request for asset price is forwarded to the price provider assigned to that asset\\n    /// @param _asset address of an asset for which price provider will be used\\n    /// @param _priceProvider address of price provider\\n    function setPriceProviderForAsset(address _asset, IPriceProvider _priceProvider) external;\\n\\n    /// @notice Returns \\\"Time-Weighted Average Price\\\" for an asset\\n    /// @param _asset address of an asset for which to read price\\n    /// @return price TWAP price of a token with 18 decimals\\n    function getPrice(address _asset) external view returns (uint256 price);\\n\\n    /// @notice Gets price provider assigned to an asset\\n    /// @param _asset address of an asset for which to get price provider\\n    /// @return priceProvider address of price provider\\n    function priceProviders(address _asset) external view returns (IPriceProvider priceProvider);\\n\\n    /// @notice Gets token address in which prices are quoted\\n    /// @return quoteToken address\\n    function quoteToken() external view returns (address);\\n\\n    /// @notice Gets manager role address\\n    /// @return manager role address\\n    function manager() external view returns (address);\\n\\n    /// @notice Checks if providers are available for an asset\\n    /// @param _asset asset address to check\\n    /// @return returns TRUE if price feed is ready, otherwise false\\n    function providersReadyForAsset(address _asset) external view returns (bool);\\n\\n    /// @notice Returns true if address is a registered price provider\\n    /// @param _provider address of price provider to be removed\\n    /// @return true if address is a registered price provider, otherwise false\\n    function isPriceProvider(IPriceProvider _provider) external view returns (bool);\\n\\n    /// @notice Gets number of price providers registered\\n    /// @return number of price providers registered\\n    function providersCount() external view returns (uint256);\\n\\n    /// @notice Gets an array of price providers\\n    /// @return array of price providers\\n    function providerList() external view returns (address[] memory);\\n\\n    /// @notice Sanity check function\\n    /// @return returns always TRUE\\n    function priceProvidersRepositoryPing() external pure returns (bytes4);\\n}\\n\",\"keccak256\":\"0x715cb0aa617134d1f4ebe427adb5899455114260c3d853732a6302fb5b5d6e53\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IShareToken.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"./INotificationReceiver.sol\\\";\\n\\ninterface IShareToken is IERC20Metadata {\\n    /// @notice Emitted every time receiver is notified about token transfer\\n    /// @param notificationReceiver receiver address\\n    /// @param success false if TX reverted on `notificationReceiver` side, otherwise true\\n    event NotificationSent(\\n        INotificationReceiver indexed notificationReceiver,\\n        bool success\\n    );\\n\\n    /// @notice Mint method for Silo to create debt position\\n    /// @param _account wallet for which to mint token\\n    /// @param _amount amount of token to be minted\\n    function mint(address _account, uint256 _amount) external;\\n\\n    /// @notice Burn method for Silo to close debt position\\n    /// @param _account wallet for which to burn token\\n    /// @param _amount amount of token to be burned\\n    function burn(address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xb07e3d32d9be5266129c8f6e0f7db137f9d4632c2659fceaddc37ba65d5ce0c4\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISilo.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\nimport \\\"./IBaseSilo.sol\\\";\\n\\ninterface ISilo is IBaseSilo {\\n    /// @notice Deposit `_amount` of `_asset` tokens from `msg.sender` to the Silo\\n    /// @param _asset The address of the token to deposit\\n    /// @param _amount The amount of the token to deposit\\n    /// @param _collateralOnly True if depositing collateral only\\n    /// @return collateralAmount deposited amount\\n    /// @return collateralShare user collateral shares based on deposited amount\\n    function deposit(address _asset, uint256 _amount, bool _collateralOnly)\\n        external\\n        returns (uint256 collateralAmount, uint256 collateralShare);\\n\\n    /// @notice Router function to deposit `_amount` of `_asset` tokens to the Silo for the `_depositor`\\n    /// @param _asset The address of the token to deposit\\n    /// @param _depositor The address of the recipient of collateral tokens\\n    /// @param _amount The amount of the token to deposit\\n    /// @param _collateralOnly True if depositing collateral only\\n    /// @return collateralAmount deposited amount\\n    /// @return collateralShare `_depositor` collateral shares based on deposited amount\\n    function depositFor(address _asset, address _depositor, uint256 _amount, bool _collateralOnly)\\n        external\\n        returns (uint256 collateralAmount, uint256 collateralShare);\\n\\n    /// @notice Withdraw `_amount` of `_asset` tokens from the Silo to `msg.sender`\\n    /// @param _asset The address of the token to withdraw\\n    /// @param _amount The amount of the token to withdraw\\n    /// @param _collateralOnly True if withdrawing collateral only deposit\\n    /// @return withdrawnAmount withdrawn amount that was transferred to user\\n    /// @return withdrawnShare burned share based on `withdrawnAmount`\\n    function withdraw(address _asset, uint256 _amount, bool _collateralOnly)\\n        external\\n        returns (uint256 withdrawnAmount, uint256 withdrawnShare);\\n\\n    /// @notice Router function to withdraw `_amount` of `_asset` tokens from the Silo for the `_depositor`\\n    /// @param _asset The address of the token to withdraw\\n    /// @param _depositor The address that originally deposited the collateral tokens being withdrawn,\\n    /// it should be the one initiating the withdrawal through the router\\n    /// @param _receiver The address that will receive the withdrawn tokens\\n    /// @param _amount The amount of the token to withdraw\\n    /// @param _collateralOnly True if withdrawing collateral only deposit\\n    /// @return withdrawnAmount withdrawn amount that was transferred to `_receiver`\\n    /// @return withdrawnShare burned share based on `withdrawnAmount`\\n    function withdrawFor(\\n        address _asset,\\n        address _depositor,\\n        address _receiver,\\n        uint256 _amount,\\n        bool _collateralOnly\\n    ) external returns (uint256 withdrawnAmount, uint256 withdrawnShare);\\n\\n    /// @notice Borrow `_amount` of `_asset` tokens from the Silo to `msg.sender`\\n    /// @param _asset The address of the token to borrow\\n    /// @param _amount The amount of the token to borrow\\n    /// @return debtAmount borrowed amount\\n    /// @return debtShare user debt share based on borrowed amount\\n    function borrow(address _asset, uint256 _amount) external returns (uint256 debtAmount, uint256 debtShare);\\n\\n    /// @notice Router function to borrow `_amount` of `_asset` tokens from the Silo for the `_receiver`\\n    /// @param _asset The address of the token to borrow\\n    /// @param _borrower The address that will take the loan,\\n    /// it should be the one initiating the borrowing through the router\\n    /// @param _receiver The address of the asset receiver\\n    /// @param _amount The amount of the token to borrow\\n    /// @return debtAmount borrowed amount\\n    /// @return debtShare `_receiver` debt share based on borrowed amount\\n    function borrowFor(address _asset, address _borrower, address _receiver, uint256 _amount)\\n        external\\n        returns (uint256 debtAmount, uint256 debtShare);\\n\\n    /// @notice Repay `_amount` of `_asset` tokens from `msg.sender` to the Silo\\n    /// @param _asset The address of the token to repay\\n    /// @param _amount amount of asset to repay, includes interests\\n    /// @return repaidAmount amount repaid\\n    /// @return burnedShare burned debt share\\n    function repay(address _asset, uint256 _amount) external returns (uint256 repaidAmount, uint256 burnedShare);\\n\\n    /// @notice Allows to repay in behalf of borrower to execute liquidation\\n    /// @param _asset The address of the token to repay\\n    /// @param _borrower The address of the user to have debt tokens burned\\n    /// @param _amount amount of asset to repay, includes interests\\n    /// @return repaidAmount amount repaid\\n    /// @return burnedShare burned debt share\\n    function repayFor(address _asset, address _borrower, uint256 _amount)\\n        external\\n        returns (uint256 repaidAmount, uint256 burnedShare);\\n\\n    /// @dev harvest protocol fees from an array of assets\\n    /// @return harvestedAmounts amount harvested during tx execution for each of silo asset\\n    function harvestProtocolFees() external returns (uint256[] memory harvestedAmounts);\\n\\n    /// @notice Function to update interests for `_asset` token since the last saved state\\n    /// @param _asset The address of the token to be updated\\n    /// @return interest accrued interest\\n    function accrueInterest(address _asset) external returns (uint256 interest);\\n\\n    /// @notice this methods does not requires to have tokens in order to liquidate user\\n    /// @dev during liquidation process, msg.sender will be notified once all collateral will be send to him\\n    /// msg.sender needs to be `IFlashLiquidationReceiver`\\n    /// @param _users array of users to liquidate\\n    /// @param _flashReceiverData this data will be forward to msg.sender on notification\\n    /// @return assets array of all processed assets (collateral + debt, including removed)\\n    /// @return receivedCollaterals receivedCollaterals[userId][assetId] => amount\\n    /// amounts of collaterals send to `_flashReceiver`\\n    /// @return shareAmountsToRepaid shareAmountsToRepaid[userId][assetId] => amount\\n    /// required amounts of debt to be repaid\\n    function flashLiquidate(address[] memory _users, bytes memory _flashReceiverData)\\n        external\\n        returns (\\n            address[] memory assets,\\n            uint256[][] memory receivedCollaterals,\\n            uint256[][] memory shareAmountsToRepaid\\n        );\\n}\\n\",\"keccak256\":\"0xb1af67bfc5cfb83f15757017ecacafe8258dd0be2e14bc02e8af1aa9ba8955b5\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISiloFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\ninterface ISiloFactory {\\n    /// @notice Emitted when Silo is deployed\\n    /// @param silo address of deployed Silo\\n    /// @param asset address of asset for which Silo was deployed\\n    /// @param version version of silo implementation\\n    event NewSiloCreated(address indexed silo, address indexed asset, uint128 version);\\n\\n    /// @notice Must be called by repository on constructor\\n    /// @param _siloRepository the SiloRepository to set\\n    function initRepository(address _siloRepository) external;\\n\\n    /// @notice Deploys Silo\\n    /// @param _siloAsset unique asset for which Silo is deployed\\n    /// @param _version version of silo implementation\\n    /// @param _data (optional) data that may be needed during silo creation\\n    /// @return silo deployed Silo address\\n    function createSilo(address _siloAsset, uint128 _version, bytes memory _data) external returns (address silo);\\n\\n    /// @dev just a helper method to see if address is a factory\\n    function siloFactoryPing() external pure returns (bytes4);\\n}\\n\",\"keccak256\":\"0x5df65ec4644cc935f9e807e4c295b67a22d2768487878a8619a0273a488d4b98\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISiloFactoryV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\ninterface ISiloFactoryV2 {\\n    /// @notice Emitted when Silo is deployed\\n    /// @param silo address of deployed Silo\\n    /// @param asset address of asset for which Silo was deployed\\n    /// @param version version of silo implementation\\n    event NewSiloCreated(address indexed silo, address indexed asset, uint128 version);\\n\\n    /// @notice Deploys Silo\\n    /// @param _siloAsset unique asset for which Silo is deployed\\n    /// @param _version version of silo implementation\\n    /// @param _data (optional) data that may be needed during silo creation\\n    /// @return silo deployed Silo address\\n    function createSilo(address _siloAsset, uint128 _version, bytes memory _data) external returns (address silo);\\n\\n    /// @dev just a helper method to see if address is a factory\\n    function siloFactoryPing() external pure returns (bytes4);\\n}\\n\",\"keccak256\":\"0xe5ac7f310d6bb0347cd03d0cb7fec8a9adbba0d54ef1929dcb636741b34814a2\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISiloRepository.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\nimport \\\"./ISiloFactory.sol\\\";\\nimport \\\"./ITokensFactory.sol\\\";\\nimport \\\"./IPriceProvidersRepository.sol\\\";\\nimport \\\"./INotificationReceiver.sol\\\";\\nimport \\\"./IInterestRateModel.sol\\\";\\n\\ninterface ISiloRepository {\\n    /// @dev protocol fees in precision points (Solvency._PRECISION_DECIMALS), we do allow for fee == 0\\n    struct Fees {\\n        /// @dev One time protocol fee for opening a borrow position in precision points (Solvency._PRECISION_DECIMALS)\\n        uint64 entryFee;\\n        /// @dev Protocol revenue share in interest paid in precision points (Solvency._PRECISION_DECIMALS)\\n        uint64 protocolShareFee;\\n        /// @dev Protocol share in liquidation profit in precision points (Solvency._PRECISION_DECIMALS).\\n        /// It's calculated from total collateral amount to be transferred to liquidator.\\n        uint64 protocolLiquidationFee;\\n    }\\n\\n    struct SiloVersion {\\n        /// @dev Default version of Silo. If set to 0, it means it is not set. By default it is set to 1\\n        uint128 byDefault;\\n\\n        /// @dev Latest added version of Silo. If set to 0, it means it is not set. By default it is set to 1\\n        uint128 latest;\\n    }\\n\\n    /// @dev AssetConfig struct represents configurable parameters for each Silo\\n    struct AssetConfig {\\n        /// @dev Loan-to-Value ratio represents the maximum borrowing power of a specific collateral.\\n        ///      For example, if the collateral asset has an LTV of 75%, the user can borrow up to 0.75 worth\\n        ///      of quote token in the principal currency for every quote token worth of collateral.\\n        ///      value uses 18 decimals eg. 100% == 1e18\\n        ///      max valid value is 1e18 so it needs storage of 60 bits\\n        uint64 maxLoanToValue;\\n\\n        /// @dev Liquidation Threshold represents the threshold at which a borrow position will be considered\\n        ///      undercollateralized and subject to liquidation for each collateral. For example,\\n        ///      if a collateral has a liquidation threshold of 80%, it means that the loan will be\\n        ///      liquidated when the borrowAmount value is worth 80% of the collateral value.\\n        ///      value uses 18 decimals eg. 100% == 1e18\\n        uint64 liquidationThreshold;\\n\\n        /// @dev interest rate model address\\n        IInterestRateModel interestRateModel;\\n    }\\n\\n    event NewDefaultMaximumLTV(uint64 defaultMaximumLTV);\\n\\n    event NewDefaultLiquidationThreshold(uint64 defaultLiquidationThreshold);\\n\\n    /// @notice Emitted on new Silo creation\\n    /// @param silo deployed Silo address\\n    /// @param asset unique asset for deployed Silo\\n    /// @param siloVersion version of deployed Silo\\n    event NewSilo(address indexed silo, address indexed asset, uint128 siloVersion);\\n\\n    /// @notice Emitted when new Silo (or existing one) becomes a bridge pool (pool with only bridge tokens).\\n    /// @param pool address of the bridge pool, It can be zero address when bridge asset is removed and pool no longer\\n    /// is treated as bridge pool\\n    event BridgePool(address indexed pool);\\n\\n    /// @notice Emitted on new bridge asset\\n    /// @param newBridgeAsset address of added bridge asset\\n    event BridgeAssetAdded(address indexed newBridgeAsset);\\n\\n    /// @notice Emitted on removed bridge asset\\n    /// @param bridgeAssetRemoved address of removed bridge asset\\n    event BridgeAssetRemoved(address indexed bridgeAssetRemoved);\\n\\n    /// @notice Emitted when default interest rate model is changed\\n    /// @param newModel address of new interest rate model\\n    event InterestRateModel(IInterestRateModel indexed newModel);\\n\\n    /// @notice Emitted on price provider repository address update\\n    /// @param newProvider address of new oracle repository\\n    event PriceProvidersRepositoryUpdate(\\n        IPriceProvidersRepository indexed newProvider\\n    );\\n\\n    /// @notice Emitted on token factory address update\\n    /// @param newTokensFactory address of new token factory\\n    event TokensFactoryUpdate(address indexed newTokensFactory);\\n\\n    /// @notice Emitted on router address update\\n    /// @param newRouter address of new router\\n    event RouterUpdate(address indexed newRouter);\\n\\n    /// @notice Emitted on INotificationReceiver address update\\n    /// @param newIncentiveContract address of new INotificationReceiver\\n    event NotificationReceiverUpdate(INotificationReceiver indexed newIncentiveContract);\\n\\n    /// @notice Emitted when new Silo version is registered\\n    /// @param factory factory address that deploys registered Silo version\\n    /// @param siloLatestVersion Silo version of registered Silo\\n    /// @param siloDefaultVersion current default Silo version\\n    event RegisterSiloVersion(address indexed factory, uint128 siloLatestVersion, uint128 siloDefaultVersion);\\n\\n    /// @notice Emitted when Silo version is unregistered\\n    /// @param factory factory address that deploys unregistered Silo version\\n    /// @param siloVersion version that was unregistered\\n    event UnregisterSiloVersion(address indexed factory, uint128 siloVersion);\\n\\n    /// @notice Emitted when default Silo version is updated\\n    /// @param newDefaultVersion new default version\\n    event SiloDefaultVersion(uint128 newDefaultVersion);\\n\\n    /// @notice Emitted when default fee is updated\\n    /// @param newEntryFee new entry fee\\n    /// @param newProtocolShareFee new protocol share fee\\n    /// @param newProtocolLiquidationFee new protocol liquidation fee\\n    event FeeUpdate(\\n        uint64 newEntryFee,\\n        uint64 newProtocolShareFee,\\n        uint64 newProtocolLiquidationFee\\n    );\\n\\n    /// @notice Emitted when asset config is updated for a silo\\n    /// @param silo silo for which asset config is being set\\n    /// @param asset asset for which asset config is being set\\n    /// @param assetConfig new asset config\\n    event AssetConfigUpdate(address indexed silo, address indexed asset, AssetConfig assetConfig);\\n\\n    /// @notice Emitted when silo (silo factory) version is set for asset\\n    /// @param asset asset for which asset config is being set\\n    /// @param version Silo version\\n    event VersionForAsset(address indexed asset, uint128 version);\\n\\n    /// @param _siloAsset silo asset\\n    /// @return version of Silo that is assigned for provided asset, if not assigned it returns zero (default)\\n    function getVersionForAsset(address _siloAsset) external returns (uint128);\\n\\n    /// @notice setter for `getVersionForAsset` mapping\\n    /// @param _siloAsset silo asset\\n    /// @param _version version of Silo that will be assigned for `_siloAsset`, zero (default) is acceptable\\n    function setVersionForAsset(address _siloAsset, uint128 _version) external;\\n\\n    /// @notice use this method only when off-chain verification is OFF\\n    /// @dev Silo does NOT support rebase and deflationary tokens\\n    /// @param _siloAsset silo asset\\n    /// @param _siloData (optional) data that may be needed during silo creation\\n    /// @return createdSilo address of created silo\\n    function newSilo(address _siloAsset, bytes memory _siloData) external returns (address createdSilo);\\n\\n    /// @notice use this method to deploy new version of Silo for an asset that already has Silo deployed.\\n    /// Only owner (DAO) can replace.\\n    /// @dev Silo does NOT support rebase and deflationary tokens\\n    /// @param _siloAsset silo asset\\n    /// @param _siloVersion version of silo implementation. Use 0 for default version which is fine\\n    /// for 99% of cases.\\n    /// @param _siloData (optional) data that may be needed during silo creation\\n    /// @return createdSilo address of created silo\\n    function replaceSilo(\\n        address _siloAsset,\\n        uint128 _siloVersion,\\n        bytes memory _siloData\\n    ) external returns (address createdSilo);\\n\\n    /// @notice Set factory contract for debt and collateral tokens for each Silo asset\\n    /// @dev Callable only by owner\\n    /// @param _tokensFactory address of TokensFactory contract that deploys debt and collateral tokens\\n    function setTokensFactory(address _tokensFactory) external;\\n\\n    /// @notice Set default fees\\n    /// @dev Callable only by owner\\n    /// @param _fees:\\n    /// - _entryFee one time protocol fee for opening a borrow position in precision points\\n    /// (Solvency._PRECISION_DECIMALS)\\n    /// - _protocolShareFee protocol revenue share in interest paid in precision points\\n    /// (Solvency._PRECISION_DECIMALS)\\n    /// - _protocolLiquidationFee protocol share in liquidation profit in precision points\\n    /// (Solvency._PRECISION_DECIMALS). It's calculated from total collateral amount to be transferred\\n    /// to liquidator.\\n    function setFees(Fees calldata _fees) external;\\n\\n    /// @notice Set configuration for given asset in given Silo\\n    /// @dev Callable only by owner\\n    /// @param _silo Silo address for which config applies\\n    /// @param _asset asset address for which config applies\\n    /// @param _assetConfig:\\n    ///    - _maxLoanToValue maximum Loan-to-Value, for details see `Repository.AssetConfig.maxLoanToValue`\\n    ///    - _liquidationThreshold liquidation threshold, for details see `Repository.AssetConfig.maxLoanToValue`\\n    ///    - _interestRateModel interest rate model address, for details see `Repository.AssetConfig.interestRateModel`\\n    function setAssetConfig(\\n        address _silo,\\n        address _asset,\\n        AssetConfig calldata _assetConfig\\n    ) external;\\n\\n    /// @notice Set default interest rate model\\n    /// @dev Callable only by owner\\n    /// @param _defaultInterestRateModel default interest rate model\\n    function setDefaultInterestRateModel(IInterestRateModel _defaultInterestRateModel) external;\\n\\n    /// @notice Set default maximum LTV\\n    /// @dev Callable only by owner\\n    /// @param _defaultMaxLTV default maximum LTV in precision points (Solvency._PRECISION_DECIMALS)\\n    function setDefaultMaximumLTV(uint64 _defaultMaxLTV) external;\\n\\n    /// @notice Set default liquidation threshold\\n    /// @dev Callable only by owner\\n    /// @param _defaultLiquidationThreshold default liquidation threshold in precision points\\n    /// (Solvency._PRECISION_DECIMALS)\\n    function setDefaultLiquidationThreshold(uint64 _defaultLiquidationThreshold) external;\\n\\n    /// @notice Set price provider repository\\n    /// @dev Callable only by owner\\n    /// @param _repository price provider repository address\\n    function setPriceProvidersRepository(IPriceProvidersRepository _repository) external;\\n\\n    /// @notice Set router contract\\n    /// @dev Callable only by owner\\n    /// @param _router router address\\n    function setRouter(address _router) external;\\n\\n    /// @notice Set NotificationReceiver contract\\n    /// @dev Callable only by owner\\n    /// @param _silo silo address for which to set `_notificationReceiver`\\n    /// @param _notificationReceiver NotificationReceiver address\\n    function setNotificationReceiver(address _silo, INotificationReceiver _notificationReceiver) external;\\n\\n    /// @notice Adds new bridge asset\\n    /// @dev New bridge asset must be unique. Duplicates in bridge assets are not allowed. It's possible to add\\n    /// bridge asset that has been removed in the past. Note that all Silos must be synced manually. Callable\\n    /// only by owner.\\n    /// @param _newBridgeAsset bridge asset address\\n    function addBridgeAsset(address _newBridgeAsset) external;\\n\\n    /// @notice Removes bridge asset\\n    /// @dev Note that all Silos must be synced manually. Callable only by owner.\\n    /// @param _bridgeAssetToRemove bridge asset address to be removed\\n    function removeBridgeAsset(address _bridgeAssetToRemove) external;\\n\\n    /// @notice Registers new Silo version\\n    /// @dev User can choose which Silo version he wants to deploy. It's possible to have multiple versions of Silo.\\n    /// Callable only by owner.\\n    /// @param _factory factory contract that deploys new version of Silo\\n    /// @param _isDefault true if this version should be used as default\\n    function registerSiloVersion(ISiloFactory _factory, bool _isDefault) external;\\n\\n    /// @notice Unregisters Silo version\\n    /// @dev Callable only by owner.\\n    /// @param _siloVersion Silo version to be unregistered\\n    function unregisterSiloVersion(uint128 _siloVersion) external;\\n\\n    /// @notice Sets default Silo version\\n    /// @dev Callable only by owner.\\n    /// @param _defaultVersion Silo version to be set as default\\n    function setDefaultSiloVersion(uint128 _defaultVersion) external;\\n\\n    /// @notice Check if contract address is a Silo deployment\\n    /// @param _silo address of expected Silo\\n    /// @return true if address is Silo deployment, otherwise false\\n    function isSilo(address _silo) external view returns (bool);\\n\\n    /// @notice Get Silo address of asset\\n    /// @param _asset address of asset\\n    /// @return address of corresponding Silo deployment\\n    function getSilo(address _asset) external view returns (address);\\n\\n    /// @notice Get Silo Factory for given version\\n    /// @param _siloVersion version of Silo implementation\\n    /// @return ISiloFactory contract that deploys Silos of given version\\n    function siloFactory(uint256 _siloVersion) external view returns (ISiloFactory);\\n\\n    /// @notice Get debt and collateral Token Factory\\n    /// @return ITokensFactory contract that deploys debt and collateral tokens\\n    function tokensFactory() external view returns (ITokensFactory);\\n\\n    /// @notice Get Router contract\\n    /// @return address of router contract\\n    function router() external view returns (address);\\n\\n    /// @notice Get current bridge assets\\n    /// @dev Keep in mind that not all Silos may be synced with current bridge assets so it's possible that some\\n    /// assets in that list are not part of given Silo.\\n    /// @return address array of bridge assets\\n    function getBridgeAssets() external view returns (address[] memory);\\n\\n    /// @notice Get removed bridge assets\\n    /// @dev Keep in mind that not all Silos may be synced with bridge assets so it's possible that some\\n    /// assets in that list are still part of given Silo.\\n    /// @return address array of bridge assets\\n    function getRemovedBridgeAssets() external view returns (address[] memory);\\n\\n    /// @notice Get maximum LTV for asset in given Silo\\n    /// @dev If dedicated config is not set, method returns default config\\n    /// @param _silo address of Silo\\n    /// @param _asset address of an asset\\n    /// @return maximum LTV in precision points (Solvency._PRECISION_DECIMALS)\\n    function getMaximumLTV(address _silo, address _asset) external view returns (uint256);\\n\\n    /// @notice Get Interest Rate Model address for asset in given Silo\\n    /// @dev If dedicated config is not set, method returns default config\\n    /// @param _silo address of Silo\\n    /// @param _asset address of an asset\\n    /// @return address of interest rate model\\n    function getInterestRateModel(address _silo, address _asset) external view returns (IInterestRateModel);\\n\\n    /// @notice Get liquidation threshold for asset in given Silo\\n    /// @dev If dedicated config is not set, method returns default config\\n    /// @param _silo address of Silo\\n    /// @param _asset address of an asset\\n    /// @return liquidation threshold in precision points (Solvency._PRECISION_DECIMALS)\\n    function getLiquidationThreshold(address _silo, address _asset) external view returns (uint256);\\n\\n    /// @notice Get incentive contract address. Incentive contracts are responsible for distributing rewards\\n    /// to debt and/or collateral token holders of given Silo\\n    /// @param _silo address of Silo\\n    /// @return incentive contract address\\n    function getNotificationReceiver(address _silo) external view returns (INotificationReceiver);\\n\\n    /// @notice Get owner role address of Repository\\n    /// @return owner role address\\n    function owner() external view returns (address);\\n\\n    /// @notice get PriceProvidersRepository contract that manages price providers implementations\\n    /// @return IPriceProvidersRepository address\\n    function priceProvidersRepository() external view returns (IPriceProvidersRepository);\\n\\n    /// @dev Get protocol fee for opening a borrow position\\n    /// @return fee in precision points (Solvency._PRECISION_DECIMALS == 100%)\\n    function entryFee() external view returns (uint256);\\n\\n    /// @dev Get protocol share fee\\n    /// @return protocol share fee in precision points (Solvency._PRECISION_DECIMALS == 100%)\\n    function protocolShareFee() external view returns (uint256);\\n\\n    /// @dev Get protocol liquidation fee\\n    /// @return protocol liquidation fee in precision points (Solvency._PRECISION_DECIMALS == 100%)\\n    function protocolLiquidationFee() external view returns (uint256);\\n\\n    /// @dev Checks all conditions for new silo creation and throws when not possible to create\\n    /// @param _asset address of asset for which you want to create silo\\n    /// @param _assetIsABridge bool TRUE when `_asset` is bridge asset, FALSE when it is not\\n    function ensureCanCreateSiloFor(address _asset, bool _assetIsABridge) external view;\\n\\n    function siloRepositoryPing() external pure returns (bytes4);\\n}\\n\",\"keccak256\":\"0x3ab90e88cad4aac25c6f44b1071bc31ef7e7c0594a9b916e74d1f1ba26d63e38\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ITokensFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\nimport \\\"./IShareToken.sol\\\";\\n\\ninterface ITokensFactory {\\n    /// @notice Emitted when collateral token is deployed\\n    /// @param token address of deployed collateral token\\n    event NewShareCollateralTokenCreated(address indexed token);\\n\\n    /// @notice Emitted when collateral token is deployed\\n    /// @param token address of deployed debt token\\n    event NewShareDebtTokenCreated(address indexed token);\\n\\n    ///@notice Must be called by repository on constructor\\n    /// @param _siloRepository the SiloRepository to set\\n    function initRepository(address _siloRepository) external;\\n\\n    /// @notice Deploys collateral token\\n    /// @param _name name of the token\\n    /// @param _symbol symbol of the token\\n    /// @param _asset underlying asset for which token is deployed\\n    /// @return address of deployed collateral share token\\n    function createShareCollateralToken(\\n        string memory _name,\\n        string memory _symbol,\\n        address _asset\\n    ) external returns (IShareToken);\\n\\n    /// @notice Deploys debt token\\n    /// @param _name name of the token\\n    /// @param _symbol symbol of the token\\n    /// @param _asset underlying asset for which token is deployed\\n    /// @return address of deployed debt share token\\n    function createShareDebtToken(\\n        string memory _name,\\n        string memory _symbol,\\n        address _asset\\n    )\\n        external\\n        returns (IShareToken);\\n\\n    /// @dev just a helper method to see if address is a factory\\n    /// @return always true\\n    function tokensFactoryPing() external pure returns (bytes4);\\n}\\n\",\"keccak256\":\"0xcbfc948e23f6fe7b0bf32a70f4cdcd9b438c5234a0b388134f3e6caeb4da4f05\",\"license\":\"BUSL-1.1\"},\"contracts/lib/EasyMathV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\n/// @dev EasyMathV2 is optimised version of EasyMath, many places was `unchecked` for lower gas cost.\\n/// There is also fixed version of `calculateUtilization()` method.\\nlibrary EasyMathV2 {\\n    error ZeroAssets();\\n    error ZeroShares();\\n\\n    function toShare(uint256 amount, uint256 totalAmount, uint256 totalShares)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        if (totalShares == 0 || totalAmount == 0) {\\n            return amount;\\n        }\\n\\n        result = amount * totalShares;\\n        // totalAmount is never 0 based on above check, so we can uncheck\\n        unchecked { result /= totalAmount; }\\n\\n        // Prevent rounding error\\n        if (result == 0 && amount != 0) {\\n            revert ZeroShares();\\n        }\\n    }\\n\\n    function toShareRoundUp(uint256 amount, uint256 totalAmount, uint256 totalShares)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        if (totalShares == 0 || totalAmount == 0) {\\n            return amount;\\n        }\\n\\n        uint256 numerator = amount * totalShares;\\n        // totalAmount is not 0, so it is safe to uncheck\\n        unchecked { result = numerator / totalAmount; }\\n        \\n        // Round up\\n        if (numerator % totalAmount != 0) {\\n            unchecked { result += 1; }\\n        }\\n    }\\n\\n    function toAmount(uint256 share, uint256 totalAmount, uint256 totalShares)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        if (totalShares == 0 || totalAmount == 0) {\\n            return 0;\\n        }\\n\\n        result = share * totalAmount;\\n        // totalShares are not 0, so we can uncheck\\n        unchecked { result /= totalShares; }\\n\\n        // Prevent rounding error\\n        if (result == 0 && share != 0) {\\n            revert ZeroAssets();\\n        }\\n    }\\n\\n    function toAmountRoundUp(uint256 share, uint256 totalAmount, uint256 totalShares)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        if (totalShares == 0 || totalAmount == 0) {\\n            return 0;\\n        }\\n\\n        uint256 numerator = share * totalAmount;\\n        // totalShares are not 0, based on above check, so we can uncheck\\n        unchecked { result = numerator / totalShares; }\\n        \\n        // Round up\\n        if (numerator % totalShares != 0) {\\n            unchecked { result += 1; }\\n        }\\n    }\\n\\n    function toValue(uint256 _assetAmount, uint256 _assetPrice, uint256 _assetDecimals)\\n        internal\\n        pure\\n        returns (uint256 value)\\n    {\\n        value = _assetAmount * _assetPrice;\\n        // power of 10 can not be 0, so we can uncheck\\n        unchecked { value /= 10 ** _assetDecimals; }\\n    }\\n\\n    function sum(uint256[] memory _numbers) internal pure returns (uint256 s) {\\n        for(uint256 i; i < _numbers.length;) {\\n            s += _numbers[i];\\n            unchecked { i++; }\\n        }\\n    }\\n\\n    /// @notice Calculates fraction between borrowed and deposited amount of tokens denominated in percentage\\n    /// @dev It assumes `_dp` = 100%.\\n    /// @param _dp decimal points used by model\\n    /// @param _totalDeposits current total deposits for assets\\n    /// @param _totalBorrowAmount current total borrows for assets\\n    /// @return utilization value, capped to 100%\\n    /// Limiting utilisation ratio by 100% max will allows us to perform better interest rate computations\\n    /// and should not affect any other part of protocol.\\n    function calculateUtilization(uint256 _dp, uint256 _totalDeposits, uint256 _totalBorrowAmount)\\n        internal\\n        pure\\n        returns (uint256 utilization)\\n    {\\n        if (_totalDeposits == 0 || _totalBorrowAmount == 0) return 0;\\n\\n        utilization = _totalBorrowAmount * _dp;\\n        // _totalDeposits is not 0 based on above check, so it is safe to uncheck this division\\n        unchecked { utilization /= _totalDeposits; }\\n\\n        // cap at 100%\\n        if (utilization > _dp) utilization = _dp;\\n    }\\n}\\n\",\"keccak256\":\"0x51430b737402fe68265c3b070a07e002f5d222d9e1c6e7253aec46e5f3d09f2c\",\"license\":\"BUSL-1.1\"},\"contracts/lib/Ping.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.7.6 <0.9.0;\\n\\n\\nlibrary Ping {\\n    function pong(function() external pure returns(bytes4) pingFunction) internal pure returns (bool) {\\n        return pingFunction.address != address(0) && pingFunction.selector == pingFunction();\\n    }\\n}\\n\",\"keccak256\":\"0xc99622dfb46693aeb8a332ee0e124f54e12d5ed5e6b8f70a0c0e3678df35c8b1\",\"license\":\"BUSL-1.1\"},\"contracts/lib/SolvencyV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport \\\"../interfaces/IPriceProvidersRepository.sol\\\";\\nimport \\\"../interfaces/ISilo.sol\\\";\\nimport \\\"../interfaces/IInterestRateModel.sol\\\";\\nimport \\\"../interfaces/ISiloRepository.sol\\\";\\nimport \\\"./EasyMathV2.sol\\\";\\n\\nlibrary SolvencyV2 {\\n    using EasyMathV2 for uint256;\\n\\n    /// @notice\\n    /// MaximumLTV - Maximum Loan-to-Value ratio represents the maximum borrowing power of all user's collateral\\n    /// positions in a Silo\\n    /// LiquidationThreshold - Liquidation Threshold represents the threshold at which all user's borrow positions\\n    /// in a Silo will be considered under collateralized and subject to liquidation\\n    enum TypeofLTV { MaximumLTV, LiquidationThreshold }\\n\\n    error DifferentArrayLength();\\n    error UnsupportedLTVType();\\n\\n    struct SolvencyParams {\\n        /// @param siloRepository SiloRepository address\\n        ISiloRepository siloRepository;\\n        /// @param silo Silo address\\n        ISilo silo;\\n        /// @param assets array with assets\\n        address[] assets;\\n        /// @param assetStates array of states for each asset, where index match the `assets` index\\n        ISilo.AssetStorage[] assetStates;\\n        /// @param user wallet address for which to read debt\\n        address user;\\n    }\\n\\n    /// @dev is value that used for integer calculations and decimal points for utilization ratios, LTV, protocol fees\\n    uint256 internal constant _PRECISION_DECIMALS = 1e18;\\n    uint256 internal constant _INFINITY = type(uint256).max;\\n\\n    /// @notice Returns current user LTV and second LTV chosen in params\\n    /// @dev This function is optimized for protocol use. In some cases there is no need to keep the calculation\\n    /// going and predefined results can be returned.\\n    /// @param _params `SolvencyV2.SolvencyParams` struct with needed params for calculation\\n    /// @param _secondLtvType type of LTV to be returned as second value\\n    /// @return currentUserLTV Loan-to-Value ratio represents current user's proportion of debt to collateral\\n    /// @return secondLTV second type of LTV which depends on _secondLtvType, zero is returned if the value of the loan\\n    /// or the collateral are zero\\n    function calculateLTVs(SolvencyParams memory _params, TypeofLTV _secondLtvType)\\n        internal\\n        view\\n        returns (uint256 currentUserLTV, uint256 secondLTV)\\n    {\\n        uint256[] memory totalBorrowAmounts = getBorrowAmounts(_params);\\n\\n        // this return avoids eg. additional checks on withdraw, when user did not borrow any asset\\n        if (EasyMathV2.sum(totalBorrowAmounts) == 0) return (0, 0);\\n\\n        IPriceProvidersRepository priceProvidersRepository = _params.siloRepository.priceProvidersRepository();\\n\\n        uint256[] memory borrowValues = convertAmountsToValues(\\n            priceProvidersRepository,\\n            _params.assets,\\n            totalBorrowAmounts\\n        );\\n\\n        // value of user's total debt\\n        uint256 borrowTotalValue = EasyMathV2.sum(borrowValues);\\n\\n        if (borrowTotalValue == 0) return (0, 0);\\n\\n        uint256[] memory collateralValues = getUserCollateralValues(priceProvidersRepository, _params);\\n\\n        // value of user's collateral\\n        uint256 collateralTotalValue = EasyMathV2.sum(collateralValues);\\n\\n        if (collateralTotalValue == 0) return (_INFINITY, 0);\\n\\n        // value of theoretical debt user can have depending on TypeofLTV\\n        uint256 borrowAvailableTotalValue = _getTotalAvailableToBorrowValue(\\n            _params.siloRepository,\\n            address(_params.silo),\\n            _params.assets,\\n            _secondLtvType,\\n            collateralValues\\n        );\\n\\n        currentUserLTV = borrowTotalValue * _PRECISION_DECIMALS / collateralTotalValue;\\n\\n        // one of SolvencyV2.TypeofLTV\\n        secondLTV = borrowAvailableTotalValue * _PRECISION_DECIMALS / collateralTotalValue;\\n    }\\n\\n    /// @notice Calculates chosen LTV limit\\n    /// @dev This function should be used by external actors like SiloLens and UI/subgraph. `calculateLTVs` is\\n    /// optimized for protocol use and may not return second LVT calculation when they are not needed.\\n    /// @param _params `SolvencyV2.SolvencyParams` struct with needed params for calculation\\n    /// @param _ltvType acceptable values are only TypeofLTV.MaximumLTV or TypeofLTV.LiquidationThreshold\\n    /// @return limit theoretical LTV limit of `_ltvType`\\n    function calculateLTVLimit(SolvencyParams memory _params, TypeofLTV _ltvType)\\n        internal\\n        view\\n        returns (uint256 limit)\\n    {\\n        IPriceProvidersRepository priceProvidersRepository = _params.siloRepository.priceProvidersRepository();\\n\\n        uint256[] memory collateralValues = getUserCollateralValues(priceProvidersRepository, _params);\\n\\n        // value of user's collateral\\n        uint256 collateralTotalValue = EasyMathV2.sum(collateralValues);\\n\\n        if (collateralTotalValue == 0) return 0;\\n\\n        // value of theoretical debt user can have depending on TypeofLTV\\n        uint256 borrowAvailableTotalValue = _getTotalAvailableToBorrowValue(\\n            _params.siloRepository,\\n            address(_params.silo),\\n            _params.assets,\\n            _ltvType,\\n            collateralValues\\n        );\\n\\n        limit = borrowAvailableTotalValue * _PRECISION_DECIMALS / collateralTotalValue;\\n    }\\n\\n    /// @notice Returns worth (in quote token) of each collateral deposit of a user\\n    /// @param _priceProvidersRepository address of IPriceProvidersRepository where prices are read\\n    /// @param _params `SolvencyV2.SolvencyParams` struct with needed params for calculation\\n    /// @return collateralValues worth of each collateral deposit of a user as an array\\n    function getUserCollateralValues(IPriceProvidersRepository _priceProvidersRepository, SolvencyParams memory _params)\\n        internal\\n        view\\n        returns(uint256[] memory collateralValues)\\n    {\\n        uint256[] memory collateralAmounts = getCollateralAmounts(_params);\\n        collateralValues = convertAmountsToValues(_priceProvidersRepository, _params.assets, collateralAmounts);\\n    }\\n\\n    /// @notice Convert assets amounts to values in quote token (amount * price)\\n    /// @param _priceProviderRepo address of IPriceProvidersRepository where prices are read\\n    /// @param _assets array with assets for which prices are read\\n    /// @param _amounts array of amounts\\n    /// @return values array of values for corresponding assets\\n    function convertAmountsToValues(\\n        IPriceProvidersRepository _priceProviderRepo,\\n        address[] memory _assets,\\n        uint256[] memory _amounts\\n    ) internal view returns (uint256[] memory values) {\\n        if (_assets.length != _amounts.length) revert DifferentArrayLength();\\n\\n        values = new uint256[](_assets.length);\\n\\n        for (uint256 i = 0; i < _assets.length; i++) {\\n            if (_amounts[i] == 0) continue;\\n\\n            uint256 assetPrice = _priceProviderRepo.getPrice(_assets[i]);\\n            uint8 assetDecimals = ERC20(_assets[i]).decimals();\\n\\n            values[i] = _amounts[i].toValue(assetPrice, assetDecimals);\\n        }\\n    }\\n\\n    /// @notice Get amount of collateral for each asset\\n    /// @param _params `SolvencyV2.SolvencyParams` struct with needed params for calculation\\n    /// @return collateralAmounts array of amounts for each token in Silo. May contain zero values if user\\n    /// did not deposit given collateral token.\\n    function getCollateralAmounts(SolvencyParams memory _params)\\n        internal\\n        view\\n        returns (uint256[] memory collateralAmounts)\\n    {\\n        if (_params.assets.length != _params.assetStates.length) {\\n            revert DifferentArrayLength();\\n        }\\n\\n        collateralAmounts = new uint256[](_params.assets.length);\\n\\n        for (uint256 i = 0; i < _params.assets.length; i++) {\\n            uint256 userCollateralTokenBalance = _params.assetStates[i].collateralToken.balanceOf(_params.user);\\n            uint256 userCollateralOnlyTokenBalance = _params.assetStates[i].collateralOnlyToken.balanceOf(_params.user);\\n\\n            if (userCollateralTokenBalance + userCollateralOnlyTokenBalance == 0) continue;\\n\\n            uint256 rcomp = getRcomp(_params.silo, _params.siloRepository, _params.assets[i], block.timestamp);\\n\\n            collateralAmounts[i] = getUserCollateralAmount(\\n                _params.assetStates[i],\\n                userCollateralTokenBalance,\\n                userCollateralOnlyTokenBalance,\\n                rcomp,\\n                _params.siloRepository\\n            );\\n        }\\n    }\\n\\n    /// @notice Get amount of debt for each asset\\n    /// @param _params `SolvencyV2.SolvencyParams` struct with needed params for calculation\\n    /// @return totalBorrowAmounts array of amounts for each token in Silo. May contain zero values if user\\n    /// did not borrow given token.\\n    function getBorrowAmounts(SolvencyParams memory _params)\\n        internal\\n        view\\n        returns (uint256[] memory totalBorrowAmounts)\\n    {\\n        if (_params.assets.length != _params.assetStates.length) {\\n            revert DifferentArrayLength();\\n        }\\n\\n        totalBorrowAmounts = new uint256[](_params.assets.length);\\n\\n        for (uint256 i = 0; i < _params.assets.length; i++) {\\n            uint256 rcomp = getRcomp(_params.silo, _params.siloRepository, _params.assets[i], block.timestamp);\\n            totalBorrowAmounts[i] = getUserBorrowAmount(_params.assetStates[i], _params.user, rcomp);\\n        }\\n    }\\n\\n    /// @notice Get amount of deposited token, including collateralOnly deposits\\n    /// @param _assetStates state of deposited asset in Silo\\n    /// @param _userCollateralTokenBalance balance of user's share collateral token\\n    /// @param _userCollateralOnlyTokenBalance balance of user's share collateralOnly token\\n    /// @param _rcomp compounded interest rate to account for during calculations, could be 0\\n    /// @param _siloRepository SiloRepository address\\n    /// @return amount of underlying token deposited, including collateralOnly deposit\\n    function getUserCollateralAmount(\\n        ISilo.AssetStorage memory _assetStates,\\n        uint256 _userCollateralTokenBalance,\\n        uint256 _userCollateralOnlyTokenBalance,\\n        uint256 _rcomp,\\n        ISiloRepository _siloRepository\\n    ) internal view returns (uint256) {\\n        uint256 assetAmount = _userCollateralTokenBalance == 0 ? 0 : _userCollateralTokenBalance.toAmount(\\n            totalDepositsWithInterest(\\n                _assetStates.totalDeposits,\\n                _assetStates.totalBorrowAmount,\\n                _siloRepository.protocolShareFee(),\\n                _rcomp\\n            ),\\n            _assetStates.collateralToken.totalSupply()\\n        );\\n\\n        uint256 assetCollateralOnlyAmount = _userCollateralOnlyTokenBalance == 0\\n            ? 0\\n            : _userCollateralOnlyTokenBalance.toAmount(\\n                _assetStates.collateralOnlyDeposits,\\n                _assetStates.collateralOnlyToken.totalSupply()\\n            );\\n\\n        return assetAmount + assetCollateralOnlyAmount;\\n    }\\n\\n    /// @notice Get amount of borrowed token\\n    /// @param _assetStates state of borrowed asset in Silo\\n    /// @param _user user wallet address for which to read debt\\n    /// @param _rcomp compounded interest rate to account for during calculations, could be 0\\n    /// @return amount of borrowed token\\n    function getUserBorrowAmount(ISilo.AssetStorage memory _assetStates, address _user, uint256 _rcomp)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 balance = _assetStates.debtToken.balanceOf(_user);\\n        if (balance == 0) return 0;\\n\\n        uint256 totalBorrowAmountCached = totalBorrowAmountWithInterest(_assetStates.totalBorrowAmount, _rcomp);\\n        return balance.toAmountRoundUp(totalBorrowAmountCached, _assetStates.debtToken.totalSupply());\\n    }\\n\\n    /// @notice Get compounded interest rate from the model\\n    /// @param _silo Silo address\\n    /// @param _siloRepository SiloRepository address\\n    /// @param _asset address of asset for which to read interest rate\\n    /// @param _timestamp used to determine amount of time from last rate update\\n    /// @return rcomp compounded interest rate for an asset\\n    function getRcomp(ISilo _silo, ISiloRepository _siloRepository, address _asset, uint256 _timestamp)\\n        internal\\n        view\\n        returns (uint256 rcomp)\\n    {\\n        IInterestRateModel model = _siloRepository.getInterestRateModel(address(_silo), _asset);\\n        rcomp = model.getCompoundInterestRate(address(_silo), _asset, _timestamp);\\n    }\\n\\n    /// @notice Returns total deposits with interest dynamically calculated with the provided rComp\\n    /// @param _assetTotalDeposits total deposits for asset\\n    /// @param _assetTotalBorrows total borrows for asset\\n    /// @param _protocolShareFee `siloRepository.protocolShareFee()`\\n    /// @param _rcomp compounded interest rate\\n    /// @return _totalDepositsWithInterests total deposits amount with interest\\n    function totalDepositsWithInterest(\\n        uint256 _assetTotalDeposits,\\n        uint256 _assetTotalBorrows,\\n        uint256 _protocolShareFee,\\n        uint256 _rcomp\\n    )\\n        internal\\n        pure\\n        returns (uint256 _totalDepositsWithInterests)\\n    {\\n        uint256 depositorsShare = _PRECISION_DECIMALS - _protocolShareFee;\\n\\n        return _assetTotalDeposits + _assetTotalBorrows * _rcomp / _PRECISION_DECIMALS * depositorsShare /\\n            _PRECISION_DECIMALS;\\n    }\\n\\n    /// @notice Returns total borrow amount with interest dynamically calculated with the provided rComp\\n    /// @param _totalBorrowAmount total borrow amount\\n    /// @param _rcomp compounded interest rate\\n    /// @return totalBorrowAmountWithInterests total borrow amount with interest\\n    function totalBorrowAmountWithInterest(uint256 _totalBorrowAmount, uint256 _rcomp)\\n        internal\\n        pure\\n        returns (uint256 totalBorrowAmountWithInterests)\\n    {\\n        totalBorrowAmountWithInterests = _totalBorrowAmount + _totalBorrowAmount * _rcomp / _PRECISION_DECIMALS;\\n    }\\n\\n    /// @notice Calculates protocol liquidation fee and new protocol total fees collected\\n    /// @param _protocolEarnedFees amount of total collected fees so far\\n    /// @param _amount amount on which we will apply fee\\n    /// @param _liquidationFee liquidation fee in SolvencyV2._PRECISION_DECIMALS\\n    /// @return liquidationFeeAmount calculated interest\\n    /// @return newProtocolEarnedFees the new total amount of protocol fees\\n    function calculateLiquidationFee(uint256 _protocolEarnedFees, uint256 _amount, uint256 _liquidationFee)\\n        internal\\n        pure\\n        returns (uint256 liquidationFeeAmount, uint256 newProtocolEarnedFees)\\n    {\\n        unchecked {\\n            // If we overflow on multiplication it should not revert tx, we will get lower fees\\n            liquidationFeeAmount = _amount * _liquidationFee / SolvencyV2._PRECISION_DECIMALS;\\n\\n            if (_protocolEarnedFees > type(uint256).max - liquidationFeeAmount) {\\n                newProtocolEarnedFees = type(uint256).max;\\n                liquidationFeeAmount = type(uint256).max - _protocolEarnedFees;\\n            } else {\\n                newProtocolEarnedFees = _protocolEarnedFees + liquidationFeeAmount;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates theoretical value (in quote token) that user could borrow based given collateral value\\n    /// @param _siloRepository SiloRepository address\\n    /// @param _silo Silo address\\n    /// @param _asset address of collateral token\\n    /// @param _type type of LTV limit to use for calculations\\n    /// @param _collateralValue value of collateral deposit (in quote token)\\n    /// @return availableToBorrow value (in quote token) that user can borrow against collateral value\\n    function _getAvailableToBorrowValue(\\n        ISiloRepository _siloRepository,\\n        address _silo,\\n        address _asset,\\n        TypeofLTV _type,\\n        uint256 _collateralValue\\n    ) private view returns (uint256 availableToBorrow) {\\n        uint256 assetLTV;\\n\\n        if (_type == TypeofLTV.MaximumLTV) {\\n            assetLTV = _siloRepository.getMaximumLTV(_silo, _asset);\\n        } else if (_type == TypeofLTV.LiquidationThreshold) {\\n            assetLTV = _siloRepository.getLiquidationThreshold(_silo, _asset);\\n        } else {\\n            revert UnsupportedLTVType();\\n        }\\n\\n        // value that can be borrowed against the deposit\\n        // ie. for assetLTV = 50%, 1 ETH * 50% = 0.5 ETH of available to borrow\\n        availableToBorrow = _collateralValue * assetLTV / _PRECISION_DECIMALS;\\n    }\\n\\n    /// @notice Calculates theoretical value (in quote token) that user can borrow based on deposited collateral\\n    /// @param _siloRepository SiloRepository address\\n    /// @param _silo Silo address\\n    /// @param _assets array with assets\\n    /// @param _ltvType type of LTV limit to use for calculations\\n    /// acceptable values are only TypeofLTV.MaximumLTV or TypeofLTV.LiquidationThreshold\\n    /// @param _collateralValues value (worth in quote token) of each deposit made by user\\n    /// @return totalAvailableToBorrowValue value (in quote token) that user can borrow against collaterals\\n    function _getTotalAvailableToBorrowValue(\\n        ISiloRepository _siloRepository,\\n        address _silo,\\n        address[] memory _assets,\\n        TypeofLTV _ltvType,\\n        uint256[] memory _collateralValues\\n    ) private view returns (uint256 totalAvailableToBorrowValue) {\\n        if (_assets.length != _collateralValues.length) revert DifferentArrayLength();\\n\\n        for (uint256 i = 0; i < _assets.length; i++) {\\n            totalAvailableToBorrowValue += _getAvailableToBorrowValue(\\n                _siloRepository,\\n                _silo,\\n                _assets[i],\\n                _ltvType,\\n                _collateralValues[i]\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x76eed9f6aca029e43d3b8c803df892935ff020d16abb0750d59a33c6a33e0563\",\"license\":\"BUSL-1.1\"},\"contracts/lib/TokenHelper.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n\\nlibrary TokenHelper {\\n    uint256 private constant _BYTES32_SIZE = 32;\\n\\n    error TokenIsNotAContract();\\n\\n    function assertAndGetDecimals(address _token) internal view returns (uint256) {\\n        (bool hasMetadata, bytes memory data) = _tokenMetadataCall(_token, abi.encodeCall(IERC20Metadata.decimals,()));\\n\\n        // decimals() is optional in the ERC20 standard, so if metadata is not accessible\\n        // we assume there are no decimals and use 0.\\n        if (!hasMetadata) {\\n            return 0;\\n        }\\n\\n        return abi.decode(data, (uint8));\\n    }\\n\\n    /// @dev Returns the symbol for the provided ERC20 token.\\n    /// An empty string is returned if the call to the token didn't succeed.\\n    /// @param _token address of the token to get the symbol for\\n    /// @return assetSymbol the token symbol\\n    function symbol(address _token) internal view returns (string memory assetSymbol) {\\n        (bool hasMetadata, bytes memory data) = _tokenMetadataCall(_token, abi.encodeCall(IERC20Metadata.symbol,()));\\n\\n        if (!hasMetadata || data.length == 0) {\\n            return \\\"?\\\";\\n        } else if (data.length == _BYTES32_SIZE) {\\n            return string(removeZeros(data));\\n        } else {\\n            return abi.decode(data, (string));\\n        }\\n    }\\n\\n    /// @dev Removes bytes with value equal to 0 from the provided byte array.\\n    /// @param _data byte array from which to remove zeroes\\n    /// @return result byte array with zeroes removed \\n    function removeZeros(bytes memory _data) internal pure returns (bytes memory result) {\\n        uint256 n = _data.length;\\n\\n        unchecked {\\n            for (uint256 i; i < n; i++) {\\n                if (_data[i] == 0) continue;\\n\\n                result = abi.encodePacked(result, _data[i]);\\n            }\\n        }\\n    }\\n\\n    /// @dev Performs a staticcall to the token to get its metadata (symbol, decimals, name)\\n    function _tokenMetadataCall(address _token, bytes memory _data) private view returns(bool, bytes memory) {\\n        // We need to do this before the call, otherwise the call will succeed even for EOAs\\n        if (!Address.isContract(_token)) revert TokenIsNotAContract();\\n\\n        (bool success, bytes memory result) = _token.staticcall(_data);\\n\\n        // If the call reverted we assume the token doesn't follow the metadata extension\\n        if (!success) {\\n            return (false, \\\"\\\");\\n        }\\n\\n        return (true, result);\\n    }\\n}\\n\",\"keccak256\":\"0x7e65c9647420e686cc897b3426cd94840cd42b25cc0a647e4bcdf45897fe6743\",\"license\":\"BUSL-1.1\"},\"contracts/siloFactories/SiloCollateralOnlyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\nimport \\\"../SiloCollateralOnly.sol\\\";\\nimport \\\"./SiloFactoryV2.sol\\\";\\n\\n/// @title SiloCollateralOnlyFactory\\n/// @notice Silo Factory has one job, deploy Silo implementation\\n/// @dev Silo Factory is registered within SiloRepository contract and it's given a version. Each version\\n/// is different Silo Factory that deploys different Silo implementation. Many Factory contracts can be\\n/// registered with the Repository contract.\\n/// @custom:security-contact security@silo.finance\\ncontract SiloCollateralOnlyFactory is SiloFactoryV2 {\\n    /// @param _repository A silo repository address\\n    constructor(address _repository) SiloFactoryV2(_repository) {\\n        // initial setup is done in SiloFactoryV2, nothing to do here\\n    }\\n\\n    /// @inheritdoc ISiloFactoryV2\\n    function createSilo(\\n        address _siloAsset,\\n        uint128 _version,\\n        bytes memory\\n    )\\n        external\\n        virtual\\n        override\\n        returns (address silo)\\n    {\\n        // Only allow silo repository\\n        if (msg.sender != siloRepository) revert OnlyRepository();\\n\\n        silo = address(new SiloCollateralOnly(ISiloRepository(msg.sender), _siloAsset, _version));\\n        emit NewSiloCreated(silo, _siloAsset, _version);\\n    }\\n}\\n\",\"keccak256\":\"0x7bd9c45a4da738573ccbdff519b9765436bf097ede207cf44965580487c3a204\",\"license\":\"BUSL-1.1\"},\"contracts/siloFactories/SiloFactoryV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\nimport \\\"../lib/Ping.sol\\\";\\nimport \\\"../SiloV2.sol\\\";\\nimport \\\"../interfaces/ISiloFactoryV2.sol\\\";\\nimport \\\"../interfaces/ISiloRepository.sol\\\";\\n\\n/// @title SiloFactory\\n/// @notice Silo Factory has one job, deploy Silo implementation\\n/// @dev Silo Factory is registered within SiloRepository contract and it's given a version. Each version\\n/// is different Silo Factory that deploys different Silo implementation. Many Factory contracts can be\\n/// registered with the Repository contract.\\n/// @custom:security-contact security@silo.finance\\nabstract contract SiloFactoryV2 is ISiloFactoryV2 {\\n    address public siloRepository;\\n\\n    /// @dev Write info to the log about the Silo Repository initialization\\n    event InitSiloRepository();\\n\\n    /// @dev Revert on a silo creation if a msg.sender is not a silo repository\\n    error OnlyRepository();\\n    /// @dev Revert on a false sanity check with `Ping` library\\n    error InvalidSiloRepository();\\n\\n    /// @param _repository A silo repository address\\n    constructor(address _repository) {\\n        if (!Ping.pong(ISiloRepository(_repository).siloRepositoryPing)) {\\n            revert InvalidSiloRepository();\\n        }\\n\\n        siloRepository = _repository;\\n\\n        emit InitSiloRepository();\\n    }\\n\\n    /// @inheritdoc ISiloFactoryV2\\n    function createSilo(\\n        address _siloAsset,\\n        uint128 _version,\\n        bytes memory\\n    )\\n        external\\n        virtual\\n        override\\n        returns (address silo)\\n    {\\n        // Only allow silo repository\\n        if (msg.sender != siloRepository) revert OnlyRepository();\\n\\n        silo = address(new SiloV2(ISiloRepository(msg.sender), _siloAsset, _version));\\n        emit NewSiloCreated(silo, _siloAsset, _version);\\n    }\\n\\n    function siloFactoryPing() external pure virtual override returns (bytes4) {\\n        return this.siloFactoryPing.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x60907999c72f4fb91124af12c717a58687de8fbbbf79bc2cef514ed9f79c152d\",\"license\":\"BUSL-1.1\"},\"contracts/utils/LiquidationReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.13;\\n\\n/// @dev This is cloned solution of @openzeppelin/contracts/security/ReentrancyGuard.sol\\nabstract contract LiquidationReentrancyGuard {\\n    error LiquidationReentrancyCall();\\n\\n    uint256 private constant _LIQUIDATION_NOT_ENTERED = 1;\\n    uint256 private constant _LIQUIDATION_ENTERED = 2;\\n\\n    uint256 private _liquidationStatus;\\n\\n    modifier liquidationNonReentrant() {\\n        if (_liquidationStatus == _LIQUIDATION_ENTERED) {\\n            revert LiquidationReentrancyCall();\\n        }\\n\\n        _liquidationStatus = _LIQUIDATION_ENTERED;\\n\\n        _;\\n\\n        _liquidationStatus = _LIQUIDATION_NOT_ENTERED;\\n    }\\n\\n    constructor() {\\n        _liquidationStatus = _LIQUIDATION_NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x476239f2ec536f87cb4f783e02307172662fee5ad7b6d66ce6194e3fb2a51b7f\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161615938038061615983398101604081905261002f9161013c565b80610051816001600160a01b031663e99ed41d6100b660201b6101731760201c565b61006d576040516295241d60e21b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b0383161781556040517f62b7374e631dbf873146b0bd9f3390235a4a47128c3336ec4344c32bc28fe2929190a1505061018f565b60006001600160a01b03831615801590610135575082826040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101209190610165565b60e083901b6001600160e01b03199081169116145b9392505050565b60006020828403121561014e57600080fd5b81516001600160a01b038116811461013557600080fd5b60006020828403121561017757600080fd5b81516001600160e01b03198116811461013557600080fd5b615fbb8061019e6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063573bbca5146100465780635a0c4de414610076578063bde127181461008b575b600080fd5b61005961005436600461021d565b61009e565b6040516001600160a01b0390911681526020015b60405180910390f35b604051631683137960e21b815260200161006d565b600054610059906001600160a01b031681565b600080546001600160a01b031633146100ca576040516397691a2f60e01b815260040160405180910390fd5b3384846040516100d9906101f9565b6001600160a01b0393841681529290911660208301526001600160801b03166040820152606001604051809103906000f08015801561011c573d6000803e3d6000fd5b506040516001600160801b03851681529091506001600160a01b0380861691908316907f3d603ed158e689891fb302f8dcdd070ca09f651c8b61183dda2db71384cca1579060200160405180910390a39392505050565b60006001600160a01b038316158015906101f2575082826040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101dd919061030b565b60e083901b6001600160e01b03199081169116145b9392505050565b615c50806200033683390190565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561023257600080fd5b83356001600160a01b038116811461024957600080fd5b925060208401356001600160801b038116811461026557600080fd5b9150604084013567ffffffffffffffff8082111561028257600080fd5b818601915086601f83011261029657600080fd5b8135818111156102a8576102a8610207565b604051601f8201601f19908116603f011681019083821181831017156102d0576102d0610207565b816040528281528960208487010111156102e957600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b60006020828403121561031d57600080fd5b81516001600160e01b0319811681146101f257600080fdfe6101006040523480156200001257600080fd5b5060405162005c5038038062005c50833981016040819052620000359162000303565b8282828282826001600081905550600180819055506200006e836001600160a01b031663e99ed41d6200011260201b6200138d1760201c565b6200008c57604051639f45596360e01b815260040160405180910390fd5b806001600160801b0316600003620000b757604051634eb171af60e01b815260040160405180910390fd5b6000620000cf836200019e60201b620014131760201c565b6001600160801b03831660c0526001600160a01b03808616608052841660a0529050620000fe81600a62000475565b60e052506200051998505050505050505050565b60006001600160a01b0383161580159062000195575082826040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200015a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000180919062000483565b60e083901b6001600160e01b03199081169116145b90505b92915050565b6040805160048152602481019091526020810180516001600160e01b0390811663313ce56760e01b1790915260009182918291620001e0918691906200021516565b9150915081620001f4575060009392505050565b808060200190518101906200020a9190620004b6565b60ff16949350505050565b600060606200022f84620002e460201b620014801760201c565b6200024d576040516373d39f9d60e01b815260040160405180910390fd5b600080856001600160a01b0316856040516200026a9190620004db565b600060405180830381855afa9150503d8060008114620002a7576040519150601f19603f3d011682016040523d82523d6000602084013e620002ac565b606091505b509150915081620002d557600060405180602001604052806000815250935093505050620002dd565b600193509150505b9250929050565b3b151590565b6001600160a01b03811681146200030057600080fd5b50565b6000806000606084860312156200031957600080fd5b83516200032681620002ea565b60208501519093506200033981620002ea565b60408501519092506001600160801b03811681146200035757600080fd5b809150509250925092565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115620003b95781600019048211156200039d576200039d62000362565b80851615620003ab57918102915b93841c93908002906200037d565b509250929050565b600082620003d25750600162000198565b81620003e15750600062000198565b8160018114620003fa5760028114620004055762000425565b600191505062000198565b60ff84111562000419576200041962000362565b50506001821b62000198565b5060208310610133831016604e8410600b84101617156200044a575081810a62000198565b62000456838362000378565b80600019048211156200046d576200046d62000362565b029392505050565b6000620001958383620003c1565b6000602082840312156200049657600080fd5b81516001600160e01b031981168114620004af57600080fd5b9392505050565b600060208284031215620004c957600080fd5b815160ff81168114620004af57600080fd5b6000825160005b81811015620004fe5760208186018101518583015201620004e2565b818111156200050e576000828501525b509190910192915050565b60805160a05160c05160e051615651620005ff6000396000505060006104080152600081816101f901528181610653015281816106d601528181610b7201528181610eb101528181610eff01528181611021015281816113160152818161267d015281816126bb015261419a015260008181610304015281816104a2015281816105e401528181610ac001528181610df601528181610f6c01528181611b3a01528181611c1301528181611e5c015281816120f80152818161227c015281816125f3015281816126e501528181613123015281816131d301526132d301526156516000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c8063a388991b116100de578063ead5d35911610097578063f87c3aa811610071578063f87c3aa814610392578063fb255703146103d0578063fbf178db146103f0578063ffa1ad741461040357600080fd5b8063ead5d35914610359578063f364181c1461036c578063f3d470c21461037f57600080fd5b8063a388991b146102d1578063a6e08aa1146102d9578063b8c876b1146102ec578063bde12718146102ff578063bf27304114610326578063dbc5b4811461034657600080fd5b806364654cf51161013057806364654cf51461024657806367e4ac2c1461025c5780639198e5151461027157806393a94ca314610292578063976ce495146102b4578063a1dfa423146102c757600080fd5b8063151541f01461017857806322867d781461019657806338b51ce1146101be5780633edd1128146101e15780634521c019146101f45780634b8a352914610233575b600080fd5b61018061044b565b60405161018d9190614925565b60405180910390f35b6101a96101a4366004614950565b61057e565b6040805192835260208301919091520161018d565b6101d16101cc36600461497c565b610599565b604051901515815260200161018d565b6101a96101ef3660046149a7565b61064c565b61021b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161018d565b6101a9610241366004614950565b6106c9565b61024e610710565b60405161018d929190614a69565b610264610890565b60405161018d9190614aca565b61028461027f36600461497c565b6108f2565b60405190815260200161018d565b6102a56102a0366004614bc3565b610903565b60405161018d93929190614d00565b6101a96102c2366004614d39565b610a37565b6102cf610a53565b005b6102cf610a92565b6101d16102e7366004614d7a565b610c2a565b6102846102fa36600461497c565b610cf5565b61021b7f000000000000000000000000000000000000000000000000000000000000000081565b61033961033436600461497c565b610d80565b60405161018d9190614db3565b6101a9610354366004614dc1565b610df1565b6101a96103673660046149a7565b610ef8565b6101a961037a366004614e12565b610f67565b6101d161038d366004614d7a565b611099565b6103a56103a036600461497c565b6111df565b604080518251815260208084015190820152918101516001600160401b03169082015260600161018d565b6103e36103de36600461497c565b61125f565b60405161018d9190614e90565b6101a96103fe366004614ee9565b61130f565b61042a7f000000000000000000000000000000000000000000000000000000000000000081565b6040516fffffffffffffffffffffffffffffffff909116815260200161018d565b60606000610457610890565b905080516001600160401b0381111561047257610472614add565b60405190808252806020026020018201604052801561049b578160200160208202803683370190505b50915060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105229190614f3c565b905060005b82518110156105785761055383828151811061054557610545614f59565b602002602001015183611486565b84828151811061056557610565614f59565b6020908102919091010152600101610527565b50505090565b60008061058d8433338661152d565b915091505b9250929050565b60006001600160a01b0382166105c257604051630b328ad960e31b815260040160405180910390fd5b6000806105cd610710565b915091506000806106406040518060a001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001306001600160a01b03168152602001868152602001858152602001886001600160a01b031681525060016116f9565b10159695505050505050565b60008084837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316148015610690575080155b156106ae576040516305bef55f60e01b815260040160405180910390fd5b6106bb8733338989611868565b935093505050935093915050565b6000806001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169085160361070457600080fd5b61058d84333386611da2565b606080600280548060200260200160405190810160405280929190818152602001828054801561076957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161074b575b5050505050915081516001600160401b0381111561078957610789614add565b6040519080825280602002602001820160405280156107c257816020015b6107af614899565b8152602001906001900390816107a75790505b50905060005b825181101561088b57600360008483815181106107e7576107e7614f59565b6020908102919091018101516001600160a01b039081168352828201939093526040918201600020825160c0810184528154851681526001820154851692810192909252600281015490931691810191909152600382015460608201526004820154608082015260059091015460a0820152825183908390811061086d5761086d614f59565b6020026020010181905250808061088390614f85565b9150506107c8565b509091565b606060028054806020026020016040519081016040528092919081815260200182805480156108e857602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116108ca575b5050505050905090565b60006108fd826120d0565b92915050565b6060806060610910610890565b8551909350806001600160401b0381111561092d5761092d614add565b60405190808252806020026020018201604052801561096057816020015b606081526020019060019003908161094b5790505b509250806001600160401b0381111561097b5761097b614add565b6040519080825280602002602001820160405280156109ae57816020015b60608152602001906001900390816109995790505b50915060005b81811015610a2e576109e1858883815181106109d2576109d2614f59565b602002602001015133896123b1565b8583815181106109f3576109f3614f59565b60200260200101858481518110610a0c57610a0c614f59565b6020026020010182905282905250508080610a2690614f85565b9150506109b4565b50509250925092565b600080610a468585338661152d565b915091505b935093915050565b600260005403610a7e5760405162461bcd60e51b8152600401610a7590614f9e565b60405180910390fd5b6002600055610a8b6125ef565b6001600055565b600260005403610ab45760405162461bcd60e51b8152600401610a7590614f9e565b600260008190555060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663296041ea6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610b1c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b449190810190614fd5565b905060005b8151811015610c19576000828281518110610b6657610b66614f59565b602002602001015190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614610c06576001600160a01b0381166000818152600460205260408082206002908101805460ff60401b19166802000000000000000017905590519092917f51efec4e8c6ee88d51e1ec000985e267b4296e493de77b4aa7a38315981390bf91a35b5080610c1181614f85565b915050610b49565b50610c226125ef565b506001600055565b6001600160a01b038281166000908152600360205260408082206002015490516370a0823160e01b81528484166004820152919216906370a0823190602401602060405180830381865afa158015610c86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610caa9190615063565b158015610cee575060016001600160a01b0384166000908152600460205260409020600290810154600160401b900460ff1690811115610cec57610cec614e7a565b145b9392505050565b6001600160a01b03811660008181526003602052604080822060049081015491516370a0823160e01b81523091810191909152919290916370a0823190602401602060405180830381865afa158015610d52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d769190615063565b6108fd919061507c565b610d88614899565b506001600160a01b03908116600090815260036020818152604092839020835160c081018552815486168152600182015486169281019290925260028101549094169281019290925282015460608201526004820154608082015260059091015460a082015290565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f887ea406040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e769190614f3c565b6001600160a01b0316336001600160a01b031614610ea757604051639e41bdd760e01b815260040160405180910390fd5b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811690871603610edf57600080fd5b610eeb86868686611da2565b9150915094509492505050565b60008084837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316148015610f3c575080155b15610f5a576040516305bef55f60e01b815260040160405180910390fd5b6106bb8733338989612839565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f887ea406040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fec9190614f3c565b6001600160a01b0316336001600160a01b03161461101d57604051639e41bdd760e01b815260040160405180910390fd5b86837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614801561105e575080155b1561107c576040516305bef55f60e01b815260040160405180910390fd5b6110898989898989612839565b9350935050509550959350505050565b6001600160a01b03828116600090815260036020526040808220805491516370a0823160e01b81528585166004820152929390929116906370a0823190602401602060405180830381865afa1580156110f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111a9190615063565b158015611194575060018101546040516370a0823160e01b81526001600160a01b038581166004830152909116906370a0823190602401602060405180830381865afa15801561116e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111929190615063565b155b80156111d7575060016001600160a01b0385166000908152600460205260409020600290810154600160401b900460ff16908111156111d5576111d5614e7a565b145b949350505050565b61120c6040518060600160405280600081526020016000815260200160006001600160401b031681525090565b506001600160a01b03166000818152600360208181526040808420815160608101835293810154845260050154838301529383526004905290829020600201546001600160401b03169181019190915290565b6112876040805160808101825260008082526020820181905291810182905290606082015290565b6001600160a01b0382166000908152600460209081526040918290208251608081018452815481526001820154928101929092526002808201546001600160401b03811694840194909452919290916060840191600160401b900460ff16908111156112f5576112f5614e7a565b600281111561130657611306614e7a565b90525092915050565b60008085837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316148015611353575080155b15611371576040516305bef55f60e01b815260040160405180910390fd5b61137e8833898989611868565b93509350505094509492505050565b60006001600160a01b03831615801590610cee575082826040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f79190615093565b60e083901b6001600160e01b0319908116911614905092915050565b6040805160048152602481019091526020810180516001600160e01b031663313ce56760e01b1790526000908190819061144e908590612997565b9150915081611461575060009392505050565b8080602001905181019061147591906150bd565b60ff16949350505050565b3b151590565b60006002600054036114aa5760405162461bcd60e51b8152600401610a7590614f9e565b600260009081556001600160a01b0384168152600460205260409020805460018201546114d7919061507c565b915060006114e485610cf5565b9050808311156114f2578092505b8260000361150557600092505050611522565b81548301825561151f6001600160a01b0386168585612a49565b50505b600160005592915050565b60008085816001600160a01b0382166000908152600460205260409020600290810154600160401b900460ff169081111561156a5761156a614e7a565b03611588576040516367fa94e760e01b815260040160405180910390fd5b6002600054036115aa5760405162461bcd60e51b8152600401610a7590614f9e565b60026000556115b8876120d0565b506001600160a01b03871660009081526003602052604090206115dc818887612aac565b909450925060008390036116035760405163faf4da9160e01b815260040160405180910390fd5b866001600160a01b0316886001600160a01b03167f05f2eeda0e08e4b437f487c8d7d29b14537d15e3488170dc3de5dbdf8dac46848660405161164891815260200190565b60405180910390a36116656001600160a01b038916873087612be6565b83816005016000828254611679919061507c565b90915550506002810154604051632770a7eb60e21b81526001600160a01b0389811660048301526024820186905290911690639dc29fac90604401600060405180830381600087803b1580156116ce57600080fd5b505af11580156116e2573d6000803e3d6000fd5b505050505060016000819055505094509492505050565b600080600061170785612c24565b905061171281612d40565b600003611726576000809250925050610592565b600085600001516001600160a01b0316635ddf2be36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561176a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178e9190614f3c565b905060006117a182886040015185612d7c565b905060006117ae82612d40565b9050806000036117c8576000809550955050505050610592565b60006117d4848a612f97565b905060006117e182612d40565b9050806000036117ff57600019600097509750505050505050610592565b600061181a8b600001518c602001518d604001518d87612fb5565b90508161182f670de0b6b3a7640000866150e0565b6118399190615115565b98508161184e670de0b6b3a7640000836150e0565b6118589190615115565b9750505050505050509250929050565b60008060026000540361188d5760405162461bcd60e51b8152600401610a7590614f9e565b60026000558661189c816120d0565b506118a78887610c2a565b6118c45760405163206e46bd60e21b815260040160405180910390fd5b6001600160a01b038816600090815260036020526040812086945090856118ef5781600301546118f5565b81600401545b90508515611a0557611982818360010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611956573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197a9190615063565b89919061304c565b935061198e8782615129565b60048381019190915560018301546040516340c10f1960e01b81526001600160a01b038b811693820193909352602481018790529116906340c10f1990604401600060405180830381600087803b1580156119e857600080fd5b505af11580156119fc573d6000803e3d6000fd5b50505050611ad5565b611a5e818360000160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611956573d6000803e3d6000fd5b9350611a6a8782615129565b600383015581546040516340c10f1960e01b81526001600160a01b038a8116600483015260248201879052909116906340c10f1990604401600060405180830381600087803b158015611abc57600080fd5b505af1158015611ad0573d6000803e3d6000fd5b505050505b611aea6001600160a01b038b168a308a612be6565b6040805188815287151560208201526001600160a01b03808b1692908d16917fdd160bb401ec5b5e5ca443d41e8e7182f3fe72d70a04b9c0ba844483d212bcb5910160405180910390a3505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635ddf2be36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bba9190614f3c565b6001600160a01b0383166000908152600360208190526040822060048101549181015493945092611beb9190615129565b604051630968252160e11b81523060048201526001600160a01b0386811660248301529192507f0000000000000000000000000000000000000000000000000000000000000000909116906312d04a4290604401602060405180830381865afa158015611c5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c809190615063565b846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611cbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce291906150bd565b611ced90600a615225565b6040516341976e0960e01b81526001600160a01b0387811660048301528491908716906341976e0990602401602060405180830381865afa158015611d36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5a9190615063565b611d6491906150e0565b611d6e9190615115565b1115611d8d5760405163221e43cf60e11b815260040160405180910390fd5b50506001600055509197909650945050505050565b600080600260005403611dc75760405162461bcd60e51b8152600401610a7590614f9e565b6002600055611dd5866120d0565b50611de08686611099565b611dfd576040516301c08c7960e11b815260040160405180910390fd5b82611e0787610cf5565b1015611e2657604051634323a55560e01b815260040160405180910390fd5b600060036000886001600160a01b03166001600160a01b03168152602001908152602001600020905060008160050154905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663072ea61c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611eb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611edc9190615063565b905060008115611f0857670de0b6b3a7640000611ef983896150e0565b611f039190615115565b611f0b565b60005b9050611f9b838560020160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f8a9190615063565b611f94848b615129565b91906130ae565b879650945080611fab8785615129565b611fb59190615129565b60058501556001600160a01b038a1660009081526004602052604081206001018054839290611fe5908490615129565b909155505060028401546040516340c10f1960e01b81526001600160a01b038b8116600483015260248201889052909116906340c10f1990604401600060405180830381600087803b15801561203a57600080fd5b505af115801561204e573d6000803e3d6000fd5b50505050886001600160a01b03168a6001600160a01b03167f312a5e5e1079f5dda4e95dbbd0b908b291fd5b992ef22073643ab691572c5b528960405161209791815260200190565b60405180910390a36120b36001600160a01b038b168989612a49565b6120bc89613101565b505060016000555091969095509350505050565b6040516344cf3e9360e01b81523060048201526001600160a01b0382811660248301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906344cf3e9390604401602060405180830381865afa158015612141573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121659190615234565b15612183576040516313d0ff5960e31b815260040160405180910390fd5b6001600160a01b0382166000908152600360209081526040808320600490925282206002810154919290916001600160401b0316908190036121e65750600201805467ffffffffffffffff1916426001600160401b031617905550600092915050565b4281036121f857506000949350505050565b6000612203866131ab565b60405162f704bf60e21b81526001600160a01b03888116600483015242602483015291909116906303dc12fc906044016020604051808303816000875af1158015612252573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122769190615063565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166325ed3d446040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122fc9190615063565b600586015460018601549192509060008080670de0b6b3a764000061232188876150e0565b61232b9190615115565b9a50670de0b6b3a7640000868c02049150818401925083831015612353576000199250831991505b50808a036123618b86615129565b60058b015560038a0154612376908290615129565b60039a909a01999099555060018701555050506002909201805467ffffffffffffffff1916426001600160401b031617905550919392505050565b6060806002600154036123d757604051634fe29f1760e01b815260040160405180910390fd5b60026001556123e585610599565b1561243b57600086516001600160401b0381111561240557612405614add565b60405190808252806020026020018201604052801561242e578160200160208202803683370190505b5092508291506125e09050565b612446868686613240565b60405163e7b43da560e01b815291935091506001600160a01b0385169063e7b43da59061247f9088908a90879087908a906004016152a9565b600060405180830381600087803b15801561249957600080fd5b505af11580156124ad573d6000803e3d6000fd5b5050505060005b86518110156125b9578281815181106124cf576124cf614f59565b6020026020010151600014158061250057508181815181106124f3576124f3614f59565b6020026020010151600014155b156125a757856001600160a01b031687828151811061252157612521614f59565b60200260200101516001600160a01b03167ff3fa0eaee8f258c23b013654df25d1527f98a5c7ccd5e951dd77caca400ef97284848151811061256557612565614f59565b602002602001015186858151811061257f5761257f614f59565b602002602001015160405161259e929190918252602082015260400190565b60405180910390a35b806125b181614f85565b9150506124b4565b506125c385610599565b6125e05760405163e081c8f360e01b815260040160405180910390fd5b60018055909590945092505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cc1fdf166040518163ffffffff1660e01b8152600401602060405180830381865afa15801561264f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126739190614f3c565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600090815260036020526040902054919250166126e1576126e1817f00000000000000000000000000000000000000000000000000000000000000006000613498565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ee306a346040518163ffffffff1660e01b8152600401600060405180830381865afa158015612741573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127699190810190614fd5565b905060005b815181101561283457600082828151811061278b5761278b614f59565b6020908102919091018101516001600160a01b0380821660009081526003909352604090922054909250166127cb576127c684826001613498565b612821565b6001600160a01b038116600081815260046020526040808220600201805460ff60401b1916600160401b17905551600192917f51efec4e8c6ee88d51e1ec000985e267b4296e493de77b4aa7a38315981390bf91a35b508061282c81614f85565b91505061276e565b505050565b60008060026000540361285e5760405162461bcd60e51b8152600401610a7590614f9e565b6002600090815587906001600160a01b0382166000908152600460205260409020600290810154600160401b900460ff169081111561289f5761289f614e7a565b036128bd576040516367fa94e760e01b815260040160405180910390fd5b6128c6886120d0565b506128d688868989886000613701565b909350915060008390036128fd5760405163faf4da9160e01b815260040160405180910390fd5b61290687610599565b6129235760405163e081c8f360e01b815260040160405180910390fd5b856001600160a01b0316876001600160a01b0316896001600160a01b03167f3b5f15635b488fe265654176726b3222080f3d6500a562f4664233b3ea2f0283868860405161297d9291909182521515602082015260400190565b60405180910390a450600160005590969095509350505050565b60006060833b6129ba576040516373d39f9d60e01b815260040160405180910390fd5b600080856001600160a01b0316856040516129d59190615307565b600060405180830381855afa9150503d8060008114612a10576040519150601f19603f3d011682016040523d82523d6000602084013e612a15565b606091505b509150915081612a3c57600060405180602001604052806000815250935093505050610592565b6001969095509350505050565b6040516001600160a01b03831660248201526044810182905261283490849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261399e565b60028301546040516370a0823160e01b81526001600160a01b03848116600483015260009283928392909116906370a0823190602401602060405180830381865afa158015612aff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b239190615063565b905060008660020160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ba09190615063565b60058801549091506000612bb5848385613a70565b9050808710612bc957809550839450612bda565b869550612bd786838561304c565b94505b50505050935093915050565b6040516001600160a01b0380851660248301528316604482015260648101829052612c1e9085906323b872dd60e01b90608401612a75565b50505050565b606081606001515182604001515114612c505760405163dba17af560e01b815260040160405180910390fd5b8160400151516001600160401b03811115612c6d57612c6d614add565b604051908082528060200260200182016040528015612c96578160200160208202803683370190505b50905060005b826040015151811015612d3a576000612cdc8460200151856000015186604001518581518110612cce57612cce614f59565b602002602001015142613ab4565b9050612d0a84606001518381518110612cf757612cf7614f59565b6020026020010151856080015183613bb2565b838381518110612d1c57612d1c614f59565b60209081029190910101525080612d3281614f85565b915050612c9c565b50919050565b6000805b8251811015612d3a57828181518110612d5f57612d5f614f59565b602002602001015182612d729190615129565b9150600101612d44565b60608151835114612da05760405163dba17af560e01b815260040160405180910390fd5b82516001600160401b03811115612db957612db9614add565b604051908082528060200260200182016040528015612de2578160200160208202803683370190505b50905060005b8351811015612f8f57828181518110612e0357612e03614f59565b602002602001015160000315612f7d576000856001600160a01b03166341976e09868481518110612e3657612e36614f59565b60200260200101516040518263ffffffff1660e01b8152600401612e6991906001600160a01b0391909116815260200190565b602060405180830381865afa158015612e86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eaa9190615063565b90506000858381518110612ec057612ec0614f59565b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612f05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f2991906150bd565b9050612f5c828260ff16878681518110612f4557612f45614f59565b6020026020010151613cbe9092919063ffffffff16565b848481518110612f6e57612f6e614f59565b60200260200101818152505050505b80612f8781614f85565b915050612de8565b509392505050565b60606000612fa483613ce7565b90506111d784846040015183612d7c565b60008151845114612fd95760405163dba17af560e01b815260040160405180910390fd5b60005b8451811015613042576130248787878481518110612ffc57612ffc614f59565b60200260200101518787868151811061301757613017614f59565b6020026020010151613f39565b61302e9083615129565b91508061303a81614f85565b915050612fdc565b5095945050505050565b6000811580613059575082155b15613065575082610cee565b61306f82856150e0565b9050828181613080576130806150ff565b0490508015801561309057508315155b15610cee57604051639811e0c760e01b815260040160405180910390fd5b60008115806130bb575082155b156130c7575082610cee565b60006130d383866150e0565b90508381816130e4576130e46150ff565b0491506130f18482615323565b15612f8f57506001019392505050565b60008061310c610710565b9150915060008061317f6040518060a001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001306001600160a01b03168152602001868152602001858152602001876001600160a01b031681525060006116f9565b91509150808211156131a457604051630655b2eb60e31b815260040160405180910390fd5b5050505050565b60405163122cfaaf60e21b81523060048201526001600160a01b0382811660248301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906348b3eabc90604401602060405180830381865afa15801561321c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fd9190614f3c565b82516060908190806001600160401b0381111561325f5761325f614add565b604051908082528060200260200182016040528015613288578160200160208202803683370190505b509250806001600160401b038111156132a3576132a3614add565b6040519080825280602002602001820160405280156132cc578160200160208202803683370190505b50915060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663eafecffa6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561332f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133539190615063565b905060005b8281101561348d5761338288828151811061337557613375614f59565b60200260200101516120d0565b506000600360008a848151811061339b5761339b614f59565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002090506133d28189600019612aac565b508583815181106133e5576133e5614f59565b602002602001018181525050600061341d8a848151811061340857613408614f59565b60200260200101516000198b8b600189613701565b509050600061344c8b858151811061343757613437614f59565b60200260200101516000198c8c60008a613701565b5090506134598183615129565b88858151811061346b5761346b614f59565b602002602001018181525050505050808061348590614f85565b915050613358565b505050935093915050565b60006134a4838361405e565b6001600160a01b03808516600090815260036020908152604091829020845191850151925163f8f38d1b60e01b8152949550939288169263f8f38d1b926134f092918990600401615337565b6020604051808303816000875af115801561350f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135339190614f3c565b81546001600160a01b0319166001600160a01b039182161782556040838101516060850151915163f8f38d1b60e01b81529288169263f8f38d1b9261357d92918990600401615337565b6020604051808303816000875af115801561359c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135c09190614f3c565b6001820180546001600160a01b0319166001600160a01b03928316179055608083015160a0840151604051633b0eb45d60e21b81529288169263ec3ad1749261360f9290918990600401615337565b6020604051808303816000875af115801561362e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136529190614f3c565b600282810180546001600160a01b039384166001600160a01b0319918216179091558154600181810184557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace9091018054948916949092168417909155600083815260046020526040808220909301805460ff60401b1916600160401b17905591519092917f51efec4e8c6ee88d51e1ec000985e267b4296e493de77b4aa7a38315981390bf91a35050505050565b60008060008060006137138b886142d2565b9250925092506000198a03613803576040516370a0823160e01b81526001600160a01b038a811660048301528316906370a0823190602401602060405180830381865afa158015613768573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061378c9190615063565b93506137fc83836001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156137d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137f49190615063565b86919061433d565b9450613877565b61387183836001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613845573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138699190615063565b8c91906130ae565b93508994505b8460000361388e5760008094509450505050613993565b848310156138af57604051631648a98f60e31b815260040160405180910390fd5b848303925060006138c18c87896143a0565b9050808210156138e457604051634323a55560e01b815260040160405180910390fd5b6001600160a01b038c166000908152600360205260409020881561390e5760048101859055613916565b600381018590555b604051632770a7eb60e21b81526001600160a01b038c8116600483015260248201889052851690639dc29fac90604401600060405180830381600087803b15801561396057600080fd5b505af1158015613974573d6000803e3d6000fd5b5061398d925050506001600160a01b038e168b84612a49565b50505050505b965096945050505050565b60006139f3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166144009092919063ffffffff16565b8051909150156128345780806020019051810190613a119190615234565b6128345760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610a75565b6000811580613a7d575082155b15613a8a57506000610cee565b6000613a9684866150e0565b9050828181613aa757613aa76150ff565b0491506130f18382615323565b60405163122cfaaf60e21b81526001600160a01b038581166004830152838116602483015260009182918616906348b3eabc90604401602060405180830381865afa158015613b07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b2b9190614f3c565b60405163b1e0176560e01b81526001600160a01b0388811660048301528681166024830152604482018690529192509082169063b1e0176590606401602060405180830381865afa158015613b84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ba89190615063565b9695505050505050565b60408084015190516370a0823160e01b81526001600160a01b03848116600483015260009283929116906370a0823190602401602060405180830381865afa158015613c02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c269190615063565b905080600003613c3a576000915050610cee565b6000613c4a8660a001518561440f565b9050613ba88187604001516001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613c92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cb69190615063565b849190613a70565b6000613cca83856150e0565b905081600a0a8181613cde57613cde6150ff565b04949350505050565b606081606001515182604001515114613d135760405163dba17af560e01b815260040160405180910390fd5b8160400151516001600160401b03811115613d3057613d30614add565b604051908082528060200260200182016040528015613d59578160200160208202803683370190505b50905060005b826040015151811015612d3a57600083606001518281518110613d8457613d84614f59565b60209081029190910101515160808501516040516370a0823160e01b81526001600160a01b0391821660048201529116906370a0823190602401602060405180830381865afa158015613ddb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613dff9190615063565b9050600084606001518381518110613e1957613e19614f59565b602090810291909101810151015160808601516040516370a0823160e01b81526001600160a01b0391821660048201529116906370a0823190602401602060405180830381865afa158015613e72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e969190615063565b9050613ea28183615129565b600003613eb0575050613f27565b6000613ed58660200151876000015188604001518781518110612cce57612cce614f59565b9050613f0586606001518581518110613ef057613ef0614f59565b60200260200101518484848a60000151614438565b858581518110613f1757613f17614f59565b6020026020010181815250505050505b80613f3181614f85565b915050613d5f565b60008080846001811115613f4f57613f4f614e7a565b03613fce576040516330be9d2560e21b81526001600160a01b038781166004830152868116602483015288169063c2fa7494906044015b602060405180830381865afa158015613fa3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fc79190615063565b9050614036565b6001846001811115613fe257613fe2614e7a565b0361401d57604051630ca4db1160e21b81526001600160a01b03878116600483015286811660248301528816906332936c4490604401613f86565b6040516353c3731560e01b815260040160405180910390fd5b670de0b6b3a764000061404982856150e0565b6140539190615115565b979650505050505050565b6140976040518060c001604052806060815260200160608152602001606081526020016060815260200160608152602001606081525090565b60006140a2846145a3565b90506040518060c00160405280826040516020016140c09190615375565b6040516020818303038152906040528152602001826040516020016140e591906153cc565b60405160208183030381529060405281526020018260405160200161410a91906153f5565b60405160208183030381529060405281526020018260405160200161412f919061544c565b6040516020818303038152906040528152602001826040516020016141549190615476565b60405160208183030381529060405281526020018260405160200161417991906154ba565b604051602081830303815290604052815250915082156142cb5760006141be7f00000000000000000000000000000000000000000000000000000000000000006145a3565b83516040519192506141d49183906020016154d6565b60408051601f1981840301815291815290845260208481015191516141fc9291849101615527565b604051602081830303815290604052836020018190525082604001518160405160200161422a9291906154d6565b6040516020818303038152906040528360400181905250826060015181604051602001614258929190615527565b60405160208183030381529060405283606001819052508260800151816040516020016142869291906154d6565b60405160208183030381529060405283608001819052508260a00151816040516020016142b4929190615527565b60408051601f1981840301815291905260a0840152505b5092915050565b6001600160a01b038216600090815260036020526040812081908190841561431457600481015460018201549094506001600160a01b03169250839150614335565b600381015481549094506001600160a01b0316925061433286610cf5565b91505b509250925092565b600081158061434a575082155b1561435757506000610cee565b61436183856150e0565b9050818181614372576143726150ff565b0490508015801561438257508315155b15610cee57604051630cb65c7760e21b815260040160405180910390fd5b6000816000036143b1575081610cee565b6001600160a01b0384166000908152600460205260408120600101546143d8908585614641565b6001600160a01b03871660009081526004602052604090206001015584039150509392505050565b60606111d78484600085614670565b6000670de0b6b3a764000061442483856150e0565b61442e9190615115565b610cee9084615129565b600080851561452c576145276144b988606001518960a00151866001600160a01b03166325ed3d446040518163ffffffff1660e01b8152600401602060405180830381865afa15801561448f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144b39190615063565b8861478d565b88600001516001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156144fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061451f9190615063565b88919061433d565b61452f565b60005b90506000851561458857614583886080015189602001516001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156144fb573d6000803e3d6000fd5b61458b565b60005b90506145978183615129565b98975050505050505050565b6040805160048152602481019091526020810180516001600160e01b03166395d89b4160e01b17905260609060009081906145df908590612997565b915091508115806145ef57508051155b156146145750506040805180820190915260018152603f60f81b602082015292915050565b6020815103614626576111d7816147e1565b808060200190518101906111d79190615563565b5050919050565b670de0b6b3a764000081830204600081198511156146655750508219600019610a4b565b509392840192915050565b6060824710156146d15760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610a75565b843b61471f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a75565b600080866001600160a01b0316858760405161473b9190615307565b60006040518083038185875af1925050503d8060008114614778576040519150601f19603f3d011682016040523d82523d6000602084013e61477d565b606091505b5091509150614053828286614860565b6000806147a284670de0b6b3a764000061507c565b9050670de0b6b3a764000081816147b986896150e0565b6147c39190615115565b6147cd91906150e0565b6147d79190615115565b613ba89087615129565b805160609060005b8181101561463a5783818151811061480357614803614f59565b01602001516001600160f81b03191615614858578284828151811061482a5761482a614f59565b602001015160f81c60f81b6040516020016148469291906155d9565b60405160208183030381529060405292505b6001016147e9565b6060831561486f575081610cee565b82511561487f5782518084602001fd5b8160405162461bcd60e51b8152600401610a759190615608565b6040518060c0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600081525090565b600081518084526020808501945080840160005b8381101561491a578151875295820195908201906001016148fe565b509495945050505050565b602081526000610cee60208301846148ea565b6001600160a01b038116811461494d57600080fd5b50565b6000806040838503121561496357600080fd5b823561496e81614938565b946020939093013593505050565b60006020828403121561498e57600080fd5b8135610cee81614938565b801515811461494d57600080fd5b6000806000606084860312156149bc57600080fd5b83356149c781614938565b92506020840135915060408401356149de81614999565b809150509250925092565b600081518084526020808501945080840160005b8381101561491a5781516001600160a01b0316875295820195908201906001016149fd565b80516001600160a01b03908116835260208083015182169084015260408083015190911690830152606080820151908301526080808201519083015260a090810151910152565b604081526000614a7c60408301856149e9565b82810360208481019190915284518083528582019282019060005b81811015614abd57614aaa838651614a22565b9383019360c09290920191600101614a97565b5090979650505050505050565b602081526000610cee60208301846149e9565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715614b1b57614b1b614add565b604052919050565b60006001600160401b03821115614b3c57614b3c614add565b5060051b60200190565b60006001600160401b03821115614b5f57614b5f614add565b50601f01601f191660200190565b600082601f830112614b7e57600080fd5b8135614b91614b8c82614b46565b614af3565b818152846020838601011115614ba657600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215614bd657600080fd5b82356001600160401b0380821115614bed57600080fd5b818501915085601f830112614c0157600080fd5b81356020614c11614b8c83614b23565b82815260059290921b84018101918181019089841115614c3057600080fd5b948201945b83861015614c57578535614c4881614938565b82529482019490820190614c35565b96505086013592505080821115614c6d57600080fd5b50614c7a85828601614b6d565b9150509250929050565b600081518084526020808501808196508360051b810191508286016000805b86811015614cf2578385038a52825180518087529087019087870190845b81811015614cdd57835183529289019291890191600101614cc1565b50509a87019a95505091850191600101614ca3565b509298975050505050505050565b606081526000614d1360608301866149e9565b8281036020840152614d258186614c84565b90508281036040840152613ba88185614c84565b600080600060608486031215614d4e57600080fd5b8335614d5981614938565b92506020840135614d6981614938565b929592945050506040919091013590565b60008060408385031215614d8d57600080fd5b8235614d9881614938565b91506020830135614da881614938565b809150509250929050565b60c081016108fd8284614a22565b60008060008060808587031215614dd757600080fd5b8435614de281614938565b93506020850135614df281614938565b92506040850135614e0281614938565b9396929550929360600135925050565b600080600080600060a08688031215614e2a57600080fd5b8535614e3581614938565b94506020860135614e4581614938565b93506040860135614e5581614938565b9250606086013591506080860135614e6c81614999565b809150509295509295909350565b634e487b7160e01b600052602160045260246000fd5b600060808201905082518252602083015160208301526001600160401b036040840151166040830152606083015160038110614edc57634e487b7160e01b600052602160045260246000fd5b8060608401525092915050565b60008060008060808587031215614eff57600080fd5b8435614f0a81614938565b93506020850135614f1a81614938565b9250604085013591506060850135614f3181614999565b939692955090935050565b600060208284031215614f4e57600080fd5b8151610cee81614938565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201614f9757614f97614f6f565b5060010190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60006020808385031215614fe857600080fd5b82516001600160401b03811115614ffe57600080fd5b8301601f8101851361500f57600080fd5b805161501d614b8c82614b23565b81815260059190911b8201830190838101908783111561503c57600080fd5b928401925b8284101561405357835161505481614938565b82529284019290840190615041565b60006020828403121561507557600080fd5b5051919050565b60008282101561508e5761508e614f6f565b500390565b6000602082840312156150a557600080fd5b81516001600160e01b031981168114610cee57600080fd5b6000602082840312156150cf57600080fd5b815160ff81168114610cee57600080fd5b60008160001904831182151516156150fa576150fa614f6f565b500290565b634e487b7160e01b600052601260045260246000fd5b600082615124576151246150ff565b500490565b6000821982111561513c5761513c614f6f565b500190565b600181815b8085111561517c57816000190482111561516257615162614f6f565b8085161561516f57918102915b93841c9390800290615146565b509250929050565b600082615193575060016108fd565b816151a0575060006108fd565b81600181146151b657600281146151c0576151dc565b60019150506108fd565b60ff8411156151d1576151d1614f6f565b50506001821b6108fd565b5060208310610133831016604e8410600b84101617156151ff575081810a6108fd565b6152098383615141565b806000190482111561521d5761521d614f6f565b029392505050565b6000610cee60ff841683615184565b60006020828403121561524657600080fd5b8151610cee81614999565b60005b8381101561526c578181015183820152602001615254565b83811115612c1e5750506000910152565b60008151808452615295816020860160208601615251565b601f01601f19169290920160200192915050565b6001600160a01b038616815260a0602082018190526000906152cd908301876149e9565b82810360408401526152df81876148ea565b905082810360608401526152f381866148ea565b90508281036080840152614597818561527d565b60008251615319818460208701615251565b9190910192915050565b600082615332576153326150ff565b500690565b60608152600061534a606083018661527d565b828103602084015261535c818661527d565b91505060018060a01b0383166040830152949350505050565b7f53696c6f2046696e616e636520426f72726f7761626c652000000000000000008152600082516153ad816018850160208701615251565b670811195c1bdcda5d60c21b6018939091019283015250602001919050565b607360f81b8152600082516153e8816001850160208701615251565b9190910160010192915050565b7f53696c6f2046696e616e63652050726f7465637465642000000000000000000081526000825161542d816017850160208701615251565b670811195c1bdcda5d60c21b6017939091019283015250601f01919050565b61073760f41b815260008251615469816002850160208701615251565b9190910160020192915050565b6c029b4b637902334b730b731b29609d1b81526000825161549e81600d850160208701615251565b64081119589d60da1b600d939091019283015250601201919050565b601960fa1b8152600082516153e8816001850160208701615251565b600083516154e8818460208801615251565b6301034b7160e51b9083019081528351615509816004840160208801615251565b642053696c6f60d81b60049290910191820152600901949350505050565b60008351615539818460208801615251565b602d60f81b9083019081528351615557816001840160208801615251565b01600101949350505050565b60006020828403121561557557600080fd5b81516001600160401b0381111561558b57600080fd5b8201601f8101841361559c57600080fd5b80516155aa614b8c82614b46565b8181528560208385010111156155bf57600080fd5b6155d0826020830160208601615251565b95945050505050565b600083516155eb818460208801615251565b6001600160f81b0319939093169190920190815260010192915050565b602081526000610cee602083018461527d56fea264697066735822122061bd19026e284adbc381760d400b9edc1db4c521734bef7ec53fbd73c43af99764736f6c634300080d0033a2646970667358221220c8968bcb5881584d98c2fb2182d2a5a931ea8ffcda71e63ca3ac550fe693e61b64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063573bbca5146100465780635a0c4de414610076578063bde127181461008b575b600080fd5b61005961005436600461021d565b61009e565b6040516001600160a01b0390911681526020015b60405180910390f35b604051631683137960e21b815260200161006d565b600054610059906001600160a01b031681565b600080546001600160a01b031633146100ca576040516397691a2f60e01b815260040160405180910390fd5b3384846040516100d9906101f9565b6001600160a01b0393841681529290911660208301526001600160801b03166040820152606001604051809103906000f08015801561011c573d6000803e3d6000fd5b506040516001600160801b03851681529091506001600160a01b0380861691908316907f3d603ed158e689891fb302f8dcdd070ca09f651c8b61183dda2db71384cca1579060200160405180910390a39392505050565b60006001600160a01b038316158015906101f2575082826040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101dd919061030b565b60e083901b6001600160e01b03199081169116145b9392505050565b615c50806200033683390190565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561023257600080fd5b83356001600160a01b038116811461024957600080fd5b925060208401356001600160801b038116811461026557600080fd5b9150604084013567ffffffffffffffff8082111561028257600080fd5b818601915086601f83011261029657600080fd5b8135818111156102a8576102a8610207565b604051601f8201601f19908116603f011681019083821181831017156102d0576102d0610207565b816040528281528960208487010111156102e957600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b60006020828403121561031d57600080fd5b81516001600160e01b0319811681146101f257600080fdfe6101006040523480156200001257600080fd5b5060405162005c5038038062005c50833981016040819052620000359162000303565b8282828282826001600081905550600180819055506200006e836001600160a01b031663e99ed41d6200011260201b6200138d1760201c565b6200008c57604051639f45596360e01b815260040160405180910390fd5b806001600160801b0316600003620000b757604051634eb171af60e01b815260040160405180910390fd5b6000620000cf836200019e60201b620014131760201c565b6001600160801b03831660c0526001600160a01b03808616608052841660a0529050620000fe81600a62000475565b60e052506200051998505050505050505050565b60006001600160a01b0383161580159062000195575082826040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200015a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000180919062000483565b60e083901b6001600160e01b03199081169116145b90505b92915050565b6040805160048152602481019091526020810180516001600160e01b0390811663313ce56760e01b1790915260009182918291620001e0918691906200021516565b9150915081620001f4575060009392505050565b808060200190518101906200020a9190620004b6565b60ff16949350505050565b600060606200022f84620002e460201b620014801760201c565b6200024d576040516373d39f9d60e01b815260040160405180910390fd5b600080856001600160a01b0316856040516200026a9190620004db565b600060405180830381855afa9150503d8060008114620002a7576040519150601f19603f3d011682016040523d82523d6000602084013e620002ac565b606091505b509150915081620002d557600060405180602001604052806000815250935093505050620002dd565b600193509150505b9250929050565b3b151590565b6001600160a01b03811681146200030057600080fd5b50565b6000806000606084860312156200031957600080fd5b83516200032681620002ea565b60208501519093506200033981620002ea565b60408501519092506001600160801b03811681146200035757600080fd5b809150509250925092565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115620003b95781600019048211156200039d576200039d62000362565b80851615620003ab57918102915b93841c93908002906200037d565b509250929050565b600082620003d25750600162000198565b81620003e15750600062000198565b8160018114620003fa5760028114620004055762000425565b600191505062000198565b60ff84111562000419576200041962000362565b50506001821b62000198565b5060208310610133831016604e8410600b84101617156200044a575081810a62000198565b62000456838362000378565b80600019048211156200046d576200046d62000362565b029392505050565b6000620001958383620003c1565b6000602082840312156200049657600080fd5b81516001600160e01b031981168114620004af57600080fd5b9392505050565b600060208284031215620004c957600080fd5b815160ff81168114620004af57600080fd5b6000825160005b81811015620004fe5760208186018101518583015201620004e2565b818111156200050e576000828501525b509190910192915050565b60805160a05160c05160e051615651620005ff6000396000505060006104080152600081816101f901528181610653015281816106d601528181610b7201528181610eb101528181610eff01528181611021015281816113160152818161267d015281816126bb015261419a015260008181610304015281816104a2015281816105e401528181610ac001528181610df601528181610f6c01528181611b3a01528181611c1301528181611e5c015281816120f80152818161227c015281816125f3015281816126e501528181613123015281816131d301526132d301526156516000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c8063a388991b116100de578063ead5d35911610097578063f87c3aa811610071578063f87c3aa814610392578063fb255703146103d0578063fbf178db146103f0578063ffa1ad741461040357600080fd5b8063ead5d35914610359578063f364181c1461036c578063f3d470c21461037f57600080fd5b8063a388991b146102d1578063a6e08aa1146102d9578063b8c876b1146102ec578063bde12718146102ff578063bf27304114610326578063dbc5b4811461034657600080fd5b806364654cf51161013057806364654cf51461024657806367e4ac2c1461025c5780639198e5151461027157806393a94ca314610292578063976ce495146102b4578063a1dfa423146102c757600080fd5b8063151541f01461017857806322867d781461019657806338b51ce1146101be5780633edd1128146101e15780634521c019146101f45780634b8a352914610233575b600080fd5b61018061044b565b60405161018d9190614925565b60405180910390f35b6101a96101a4366004614950565b61057e565b6040805192835260208301919091520161018d565b6101d16101cc36600461497c565b610599565b604051901515815260200161018d565b6101a96101ef3660046149a7565b61064c565b61021b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161018d565b6101a9610241366004614950565b6106c9565b61024e610710565b60405161018d929190614a69565b610264610890565b60405161018d9190614aca565b61028461027f36600461497c565b6108f2565b60405190815260200161018d565b6102a56102a0366004614bc3565b610903565b60405161018d93929190614d00565b6101a96102c2366004614d39565b610a37565b6102cf610a53565b005b6102cf610a92565b6101d16102e7366004614d7a565b610c2a565b6102846102fa36600461497c565b610cf5565b61021b7f000000000000000000000000000000000000000000000000000000000000000081565b61033961033436600461497c565b610d80565b60405161018d9190614db3565b6101a9610354366004614dc1565b610df1565b6101a96103673660046149a7565b610ef8565b6101a961037a366004614e12565b610f67565b6101d161038d366004614d7a565b611099565b6103a56103a036600461497c565b6111df565b604080518251815260208084015190820152918101516001600160401b03169082015260600161018d565b6103e36103de36600461497c565b61125f565b60405161018d9190614e90565b6101a96103fe366004614ee9565b61130f565b61042a7f000000000000000000000000000000000000000000000000000000000000000081565b6040516fffffffffffffffffffffffffffffffff909116815260200161018d565b60606000610457610890565b905080516001600160401b0381111561047257610472614add565b60405190808252806020026020018201604052801561049b578160200160208202803683370190505b50915060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105229190614f3c565b905060005b82518110156105785761055383828151811061054557610545614f59565b602002602001015183611486565b84828151811061056557610565614f59565b6020908102919091010152600101610527565b50505090565b60008061058d8433338661152d565b915091505b9250929050565b60006001600160a01b0382166105c257604051630b328ad960e31b815260040160405180910390fd5b6000806105cd610710565b915091506000806106406040518060a001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001306001600160a01b03168152602001868152602001858152602001886001600160a01b031681525060016116f9565b10159695505050505050565b60008084837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316148015610690575080155b156106ae576040516305bef55f60e01b815260040160405180910390fd5b6106bb8733338989611868565b935093505050935093915050565b6000806001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169085160361070457600080fd5b61058d84333386611da2565b606080600280548060200260200160405190810160405280929190818152602001828054801561076957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161074b575b5050505050915081516001600160401b0381111561078957610789614add565b6040519080825280602002602001820160405280156107c257816020015b6107af614899565b8152602001906001900390816107a75790505b50905060005b825181101561088b57600360008483815181106107e7576107e7614f59565b6020908102919091018101516001600160a01b039081168352828201939093526040918201600020825160c0810184528154851681526001820154851692810192909252600281015490931691810191909152600382015460608201526004820154608082015260059091015460a0820152825183908390811061086d5761086d614f59565b6020026020010181905250808061088390614f85565b9150506107c8565b509091565b606060028054806020026020016040519081016040528092919081815260200182805480156108e857602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116108ca575b5050505050905090565b60006108fd826120d0565b92915050565b6060806060610910610890565b8551909350806001600160401b0381111561092d5761092d614add565b60405190808252806020026020018201604052801561096057816020015b606081526020019060019003908161094b5790505b509250806001600160401b0381111561097b5761097b614add565b6040519080825280602002602001820160405280156109ae57816020015b60608152602001906001900390816109995790505b50915060005b81811015610a2e576109e1858883815181106109d2576109d2614f59565b602002602001015133896123b1565b8583815181106109f3576109f3614f59565b60200260200101858481518110610a0c57610a0c614f59565b6020026020010182905282905250508080610a2690614f85565b9150506109b4565b50509250925092565b600080610a468585338661152d565b915091505b935093915050565b600260005403610a7e5760405162461bcd60e51b8152600401610a7590614f9e565b60405180910390fd5b6002600055610a8b6125ef565b6001600055565b600260005403610ab45760405162461bcd60e51b8152600401610a7590614f9e565b600260008190555060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663296041ea6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610b1c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b449190810190614fd5565b905060005b8151811015610c19576000828281518110610b6657610b66614f59565b602002602001015190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614610c06576001600160a01b0381166000818152600460205260408082206002908101805460ff60401b19166802000000000000000017905590519092917f51efec4e8c6ee88d51e1ec000985e267b4296e493de77b4aa7a38315981390bf91a35b5080610c1181614f85565b915050610b49565b50610c226125ef565b506001600055565b6001600160a01b038281166000908152600360205260408082206002015490516370a0823160e01b81528484166004820152919216906370a0823190602401602060405180830381865afa158015610c86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610caa9190615063565b158015610cee575060016001600160a01b0384166000908152600460205260409020600290810154600160401b900460ff1690811115610cec57610cec614e7a565b145b9392505050565b6001600160a01b03811660008181526003602052604080822060049081015491516370a0823160e01b81523091810191909152919290916370a0823190602401602060405180830381865afa158015610d52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d769190615063565b6108fd919061507c565b610d88614899565b506001600160a01b03908116600090815260036020818152604092839020835160c081018552815486168152600182015486169281019290925260028101549094169281019290925282015460608201526004820154608082015260059091015460a082015290565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f887ea406040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e769190614f3c565b6001600160a01b0316336001600160a01b031614610ea757604051639e41bdd760e01b815260040160405180910390fd5b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811690871603610edf57600080fd5b610eeb86868686611da2565b9150915094509492505050565b60008084837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316148015610f3c575080155b15610f5a576040516305bef55f60e01b815260040160405180910390fd5b6106bb8733338989612839565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f887ea406040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fec9190614f3c565b6001600160a01b0316336001600160a01b03161461101d57604051639e41bdd760e01b815260040160405180910390fd5b86837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614801561105e575080155b1561107c576040516305bef55f60e01b815260040160405180910390fd5b6110898989898989612839565b9350935050509550959350505050565b6001600160a01b03828116600090815260036020526040808220805491516370a0823160e01b81528585166004820152929390929116906370a0823190602401602060405180830381865afa1580156110f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111a9190615063565b158015611194575060018101546040516370a0823160e01b81526001600160a01b038581166004830152909116906370a0823190602401602060405180830381865afa15801561116e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111929190615063565b155b80156111d7575060016001600160a01b0385166000908152600460205260409020600290810154600160401b900460ff16908111156111d5576111d5614e7a565b145b949350505050565b61120c6040518060600160405280600081526020016000815260200160006001600160401b031681525090565b506001600160a01b03166000818152600360208181526040808420815160608101835293810154845260050154838301529383526004905290829020600201546001600160401b03169181019190915290565b6112876040805160808101825260008082526020820181905291810182905290606082015290565b6001600160a01b0382166000908152600460209081526040918290208251608081018452815481526001820154928101929092526002808201546001600160401b03811694840194909452919290916060840191600160401b900460ff16908111156112f5576112f5614e7a565b600281111561130657611306614e7a565b90525092915050565b60008085837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316148015611353575080155b15611371576040516305bef55f60e01b815260040160405180910390fd5b61137e8833898989611868565b93509350505094509492505050565b60006001600160a01b03831615801590610cee575082826040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f79190615093565b60e083901b6001600160e01b0319908116911614905092915050565b6040805160048152602481019091526020810180516001600160e01b031663313ce56760e01b1790526000908190819061144e908590612997565b9150915081611461575060009392505050565b8080602001905181019061147591906150bd565b60ff16949350505050565b3b151590565b60006002600054036114aa5760405162461bcd60e51b8152600401610a7590614f9e565b600260009081556001600160a01b0384168152600460205260409020805460018201546114d7919061507c565b915060006114e485610cf5565b9050808311156114f2578092505b8260000361150557600092505050611522565b81548301825561151f6001600160a01b0386168585612a49565b50505b600160005592915050565b60008085816001600160a01b0382166000908152600460205260409020600290810154600160401b900460ff169081111561156a5761156a614e7a565b03611588576040516367fa94e760e01b815260040160405180910390fd5b6002600054036115aa5760405162461bcd60e51b8152600401610a7590614f9e565b60026000556115b8876120d0565b506001600160a01b03871660009081526003602052604090206115dc818887612aac565b909450925060008390036116035760405163faf4da9160e01b815260040160405180910390fd5b866001600160a01b0316886001600160a01b03167f05f2eeda0e08e4b437f487c8d7d29b14537d15e3488170dc3de5dbdf8dac46848660405161164891815260200190565b60405180910390a36116656001600160a01b038916873087612be6565b83816005016000828254611679919061507c565b90915550506002810154604051632770a7eb60e21b81526001600160a01b0389811660048301526024820186905290911690639dc29fac90604401600060405180830381600087803b1580156116ce57600080fd5b505af11580156116e2573d6000803e3d6000fd5b505050505060016000819055505094509492505050565b600080600061170785612c24565b905061171281612d40565b600003611726576000809250925050610592565b600085600001516001600160a01b0316635ddf2be36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561176a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178e9190614f3c565b905060006117a182886040015185612d7c565b905060006117ae82612d40565b9050806000036117c8576000809550955050505050610592565b60006117d4848a612f97565b905060006117e182612d40565b9050806000036117ff57600019600097509750505050505050610592565b600061181a8b600001518c602001518d604001518d87612fb5565b90508161182f670de0b6b3a7640000866150e0565b6118399190615115565b98508161184e670de0b6b3a7640000836150e0565b6118589190615115565b9750505050505050509250929050565b60008060026000540361188d5760405162461bcd60e51b8152600401610a7590614f9e565b60026000558661189c816120d0565b506118a78887610c2a565b6118c45760405163206e46bd60e21b815260040160405180910390fd5b6001600160a01b038816600090815260036020526040812086945090856118ef5781600301546118f5565b81600401545b90508515611a0557611982818360010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611956573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197a9190615063565b89919061304c565b935061198e8782615129565b60048381019190915560018301546040516340c10f1960e01b81526001600160a01b038b811693820193909352602481018790529116906340c10f1990604401600060405180830381600087803b1580156119e857600080fd5b505af11580156119fc573d6000803e3d6000fd5b50505050611ad5565b611a5e818360000160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611956573d6000803e3d6000fd5b9350611a6a8782615129565b600383015581546040516340c10f1960e01b81526001600160a01b038a8116600483015260248201879052909116906340c10f1990604401600060405180830381600087803b158015611abc57600080fd5b505af1158015611ad0573d6000803e3d6000fd5b505050505b611aea6001600160a01b038b168a308a612be6565b6040805188815287151560208201526001600160a01b03808b1692908d16917fdd160bb401ec5b5e5ca443d41e8e7182f3fe72d70a04b9c0ba844483d212bcb5910160405180910390a3505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635ddf2be36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bba9190614f3c565b6001600160a01b0383166000908152600360208190526040822060048101549181015493945092611beb9190615129565b604051630968252160e11b81523060048201526001600160a01b0386811660248301529192507f0000000000000000000000000000000000000000000000000000000000000000909116906312d04a4290604401602060405180830381865afa158015611c5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c809190615063565b846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611cbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce291906150bd565b611ced90600a615225565b6040516341976e0960e01b81526001600160a01b0387811660048301528491908716906341976e0990602401602060405180830381865afa158015611d36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5a9190615063565b611d6491906150e0565b611d6e9190615115565b1115611d8d5760405163221e43cf60e11b815260040160405180910390fd5b50506001600055509197909650945050505050565b600080600260005403611dc75760405162461bcd60e51b8152600401610a7590614f9e565b6002600055611dd5866120d0565b50611de08686611099565b611dfd576040516301c08c7960e11b815260040160405180910390fd5b82611e0787610cf5565b1015611e2657604051634323a55560e01b815260040160405180910390fd5b600060036000886001600160a01b03166001600160a01b03168152602001908152602001600020905060008160050154905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663072ea61c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611eb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611edc9190615063565b905060008115611f0857670de0b6b3a7640000611ef983896150e0565b611f039190615115565b611f0b565b60005b9050611f9b838560020160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f8a9190615063565b611f94848b615129565b91906130ae565b879650945080611fab8785615129565b611fb59190615129565b60058501556001600160a01b038a1660009081526004602052604081206001018054839290611fe5908490615129565b909155505060028401546040516340c10f1960e01b81526001600160a01b038b8116600483015260248201889052909116906340c10f1990604401600060405180830381600087803b15801561203a57600080fd5b505af115801561204e573d6000803e3d6000fd5b50505050886001600160a01b03168a6001600160a01b03167f312a5e5e1079f5dda4e95dbbd0b908b291fd5b992ef22073643ab691572c5b528960405161209791815260200190565b60405180910390a36120b36001600160a01b038b168989612a49565b6120bc89613101565b505060016000555091969095509350505050565b6040516344cf3e9360e01b81523060048201526001600160a01b0382811660248301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906344cf3e9390604401602060405180830381865afa158015612141573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121659190615234565b15612183576040516313d0ff5960e31b815260040160405180910390fd5b6001600160a01b0382166000908152600360209081526040808320600490925282206002810154919290916001600160401b0316908190036121e65750600201805467ffffffffffffffff1916426001600160401b031617905550600092915050565b4281036121f857506000949350505050565b6000612203866131ab565b60405162f704bf60e21b81526001600160a01b03888116600483015242602483015291909116906303dc12fc906044016020604051808303816000875af1158015612252573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122769190615063565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166325ed3d446040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122fc9190615063565b600586015460018601549192509060008080670de0b6b3a764000061232188876150e0565b61232b9190615115565b9a50670de0b6b3a7640000868c02049150818401925083831015612353576000199250831991505b50808a036123618b86615129565b60058b015560038a0154612376908290615129565b60039a909a01999099555060018701555050506002909201805467ffffffffffffffff1916426001600160401b031617905550919392505050565b6060806002600154036123d757604051634fe29f1760e01b815260040160405180910390fd5b60026001556123e585610599565b1561243b57600086516001600160401b0381111561240557612405614add565b60405190808252806020026020018201604052801561242e578160200160208202803683370190505b5092508291506125e09050565b612446868686613240565b60405163e7b43da560e01b815291935091506001600160a01b0385169063e7b43da59061247f9088908a90879087908a906004016152a9565b600060405180830381600087803b15801561249957600080fd5b505af11580156124ad573d6000803e3d6000fd5b5050505060005b86518110156125b9578281815181106124cf576124cf614f59565b6020026020010151600014158061250057508181815181106124f3576124f3614f59565b6020026020010151600014155b156125a757856001600160a01b031687828151811061252157612521614f59565b60200260200101516001600160a01b03167ff3fa0eaee8f258c23b013654df25d1527f98a5c7ccd5e951dd77caca400ef97284848151811061256557612565614f59565b602002602001015186858151811061257f5761257f614f59565b602002602001015160405161259e929190918252602082015260400190565b60405180910390a35b806125b181614f85565b9150506124b4565b506125c385610599565b6125e05760405163e081c8f360e01b815260040160405180910390fd5b60018055909590945092505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cc1fdf166040518163ffffffff1660e01b8152600401602060405180830381865afa15801561264f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126739190614f3c565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600090815260036020526040902054919250166126e1576126e1817f00000000000000000000000000000000000000000000000000000000000000006000613498565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ee306a346040518163ffffffff1660e01b8152600401600060405180830381865afa158015612741573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127699190810190614fd5565b905060005b815181101561283457600082828151811061278b5761278b614f59565b6020908102919091018101516001600160a01b0380821660009081526003909352604090922054909250166127cb576127c684826001613498565b612821565b6001600160a01b038116600081815260046020526040808220600201805460ff60401b1916600160401b17905551600192917f51efec4e8c6ee88d51e1ec000985e267b4296e493de77b4aa7a38315981390bf91a35b508061282c81614f85565b91505061276e565b505050565b60008060026000540361285e5760405162461bcd60e51b8152600401610a7590614f9e565b6002600090815587906001600160a01b0382166000908152600460205260409020600290810154600160401b900460ff169081111561289f5761289f614e7a565b036128bd576040516367fa94e760e01b815260040160405180910390fd5b6128c6886120d0565b506128d688868989886000613701565b909350915060008390036128fd5760405163faf4da9160e01b815260040160405180910390fd5b61290687610599565b6129235760405163e081c8f360e01b815260040160405180910390fd5b856001600160a01b0316876001600160a01b0316896001600160a01b03167f3b5f15635b488fe265654176726b3222080f3d6500a562f4664233b3ea2f0283868860405161297d9291909182521515602082015260400190565b60405180910390a450600160005590969095509350505050565b60006060833b6129ba576040516373d39f9d60e01b815260040160405180910390fd5b600080856001600160a01b0316856040516129d59190615307565b600060405180830381855afa9150503d8060008114612a10576040519150601f19603f3d011682016040523d82523d6000602084013e612a15565b606091505b509150915081612a3c57600060405180602001604052806000815250935093505050610592565b6001969095509350505050565b6040516001600160a01b03831660248201526044810182905261283490849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261399e565b60028301546040516370a0823160e01b81526001600160a01b03848116600483015260009283928392909116906370a0823190602401602060405180830381865afa158015612aff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b239190615063565b905060008660020160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ba09190615063565b60058801549091506000612bb5848385613a70565b9050808710612bc957809550839450612bda565b869550612bd786838561304c565b94505b50505050935093915050565b6040516001600160a01b0380851660248301528316604482015260648101829052612c1e9085906323b872dd60e01b90608401612a75565b50505050565b606081606001515182604001515114612c505760405163dba17af560e01b815260040160405180910390fd5b8160400151516001600160401b03811115612c6d57612c6d614add565b604051908082528060200260200182016040528015612c96578160200160208202803683370190505b50905060005b826040015151811015612d3a576000612cdc8460200151856000015186604001518581518110612cce57612cce614f59565b602002602001015142613ab4565b9050612d0a84606001518381518110612cf757612cf7614f59565b6020026020010151856080015183613bb2565b838381518110612d1c57612d1c614f59565b60209081029190910101525080612d3281614f85565b915050612c9c565b50919050565b6000805b8251811015612d3a57828181518110612d5f57612d5f614f59565b602002602001015182612d729190615129565b9150600101612d44565b60608151835114612da05760405163dba17af560e01b815260040160405180910390fd5b82516001600160401b03811115612db957612db9614add565b604051908082528060200260200182016040528015612de2578160200160208202803683370190505b50905060005b8351811015612f8f57828181518110612e0357612e03614f59565b602002602001015160000315612f7d576000856001600160a01b03166341976e09868481518110612e3657612e36614f59565b60200260200101516040518263ffffffff1660e01b8152600401612e6991906001600160a01b0391909116815260200190565b602060405180830381865afa158015612e86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eaa9190615063565b90506000858381518110612ec057612ec0614f59565b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612f05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f2991906150bd565b9050612f5c828260ff16878681518110612f4557612f45614f59565b6020026020010151613cbe9092919063ffffffff16565b848481518110612f6e57612f6e614f59565b60200260200101818152505050505b80612f8781614f85565b915050612de8565b509392505050565b60606000612fa483613ce7565b90506111d784846040015183612d7c565b60008151845114612fd95760405163dba17af560e01b815260040160405180910390fd5b60005b8451811015613042576130248787878481518110612ffc57612ffc614f59565b60200260200101518787868151811061301757613017614f59565b6020026020010151613f39565b61302e9083615129565b91508061303a81614f85565b915050612fdc565b5095945050505050565b6000811580613059575082155b15613065575082610cee565b61306f82856150e0565b9050828181613080576130806150ff565b0490508015801561309057508315155b15610cee57604051639811e0c760e01b815260040160405180910390fd5b60008115806130bb575082155b156130c7575082610cee565b60006130d383866150e0565b90508381816130e4576130e46150ff565b0491506130f18482615323565b15612f8f57506001019392505050565b60008061310c610710565b9150915060008061317f6040518060a001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001306001600160a01b03168152602001868152602001858152602001876001600160a01b031681525060006116f9565b91509150808211156131a457604051630655b2eb60e31b815260040160405180910390fd5b5050505050565b60405163122cfaaf60e21b81523060048201526001600160a01b0382811660248301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906348b3eabc90604401602060405180830381865afa15801561321c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fd9190614f3c565b82516060908190806001600160401b0381111561325f5761325f614add565b604051908082528060200260200182016040528015613288578160200160208202803683370190505b509250806001600160401b038111156132a3576132a3614add565b6040519080825280602002602001820160405280156132cc578160200160208202803683370190505b50915060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663eafecffa6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561332f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133539190615063565b905060005b8281101561348d5761338288828151811061337557613375614f59565b60200260200101516120d0565b506000600360008a848151811061339b5761339b614f59565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002090506133d28189600019612aac565b508583815181106133e5576133e5614f59565b602002602001018181525050600061341d8a848151811061340857613408614f59565b60200260200101516000198b8b600189613701565b509050600061344c8b858151811061343757613437614f59565b60200260200101516000198c8c60008a613701565b5090506134598183615129565b88858151811061346b5761346b614f59565b602002602001018181525050505050808061348590614f85565b915050613358565b505050935093915050565b60006134a4838361405e565b6001600160a01b03808516600090815260036020908152604091829020845191850151925163f8f38d1b60e01b8152949550939288169263f8f38d1b926134f092918990600401615337565b6020604051808303816000875af115801561350f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135339190614f3c565b81546001600160a01b0319166001600160a01b039182161782556040838101516060850151915163f8f38d1b60e01b81529288169263f8f38d1b9261357d92918990600401615337565b6020604051808303816000875af115801561359c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135c09190614f3c565b6001820180546001600160a01b0319166001600160a01b03928316179055608083015160a0840151604051633b0eb45d60e21b81529288169263ec3ad1749261360f9290918990600401615337565b6020604051808303816000875af115801561362e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136529190614f3c565b600282810180546001600160a01b039384166001600160a01b0319918216179091558154600181810184557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace9091018054948916949092168417909155600083815260046020526040808220909301805460ff60401b1916600160401b17905591519092917f51efec4e8c6ee88d51e1ec000985e267b4296e493de77b4aa7a38315981390bf91a35050505050565b60008060008060006137138b886142d2565b9250925092506000198a03613803576040516370a0823160e01b81526001600160a01b038a811660048301528316906370a0823190602401602060405180830381865afa158015613768573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061378c9190615063565b93506137fc83836001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156137d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137f49190615063565b86919061433d565b9450613877565b61387183836001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613845573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138699190615063565b8c91906130ae565b93508994505b8460000361388e5760008094509450505050613993565b848310156138af57604051631648a98f60e31b815260040160405180910390fd5b848303925060006138c18c87896143a0565b9050808210156138e457604051634323a55560e01b815260040160405180910390fd5b6001600160a01b038c166000908152600360205260409020881561390e5760048101859055613916565b600381018590555b604051632770a7eb60e21b81526001600160a01b038c8116600483015260248201889052851690639dc29fac90604401600060405180830381600087803b15801561396057600080fd5b505af1158015613974573d6000803e3d6000fd5b5061398d925050506001600160a01b038e168b84612a49565b50505050505b965096945050505050565b60006139f3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166144009092919063ffffffff16565b8051909150156128345780806020019051810190613a119190615234565b6128345760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610a75565b6000811580613a7d575082155b15613a8a57506000610cee565b6000613a9684866150e0565b9050828181613aa757613aa76150ff565b0491506130f18382615323565b60405163122cfaaf60e21b81526001600160a01b038581166004830152838116602483015260009182918616906348b3eabc90604401602060405180830381865afa158015613b07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b2b9190614f3c565b60405163b1e0176560e01b81526001600160a01b0388811660048301528681166024830152604482018690529192509082169063b1e0176590606401602060405180830381865afa158015613b84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ba89190615063565b9695505050505050565b60408084015190516370a0823160e01b81526001600160a01b03848116600483015260009283929116906370a0823190602401602060405180830381865afa158015613c02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c269190615063565b905080600003613c3a576000915050610cee565b6000613c4a8660a001518561440f565b9050613ba88187604001516001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613c92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cb69190615063565b849190613a70565b6000613cca83856150e0565b905081600a0a8181613cde57613cde6150ff565b04949350505050565b606081606001515182604001515114613d135760405163dba17af560e01b815260040160405180910390fd5b8160400151516001600160401b03811115613d3057613d30614add565b604051908082528060200260200182016040528015613d59578160200160208202803683370190505b50905060005b826040015151811015612d3a57600083606001518281518110613d8457613d84614f59565b60209081029190910101515160808501516040516370a0823160e01b81526001600160a01b0391821660048201529116906370a0823190602401602060405180830381865afa158015613ddb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613dff9190615063565b9050600084606001518381518110613e1957613e19614f59565b602090810291909101810151015160808601516040516370a0823160e01b81526001600160a01b0391821660048201529116906370a0823190602401602060405180830381865afa158015613e72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e969190615063565b9050613ea28183615129565b600003613eb0575050613f27565b6000613ed58660200151876000015188604001518781518110612cce57612cce614f59565b9050613f0586606001518581518110613ef057613ef0614f59565b60200260200101518484848a60000151614438565b858581518110613f1757613f17614f59565b6020026020010181815250505050505b80613f3181614f85565b915050613d5f565b60008080846001811115613f4f57613f4f614e7a565b03613fce576040516330be9d2560e21b81526001600160a01b038781166004830152868116602483015288169063c2fa7494906044015b602060405180830381865afa158015613fa3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fc79190615063565b9050614036565b6001846001811115613fe257613fe2614e7a565b0361401d57604051630ca4db1160e21b81526001600160a01b03878116600483015286811660248301528816906332936c4490604401613f86565b6040516353c3731560e01b815260040160405180910390fd5b670de0b6b3a764000061404982856150e0565b6140539190615115565b979650505050505050565b6140976040518060c001604052806060815260200160608152602001606081526020016060815260200160608152602001606081525090565b60006140a2846145a3565b90506040518060c00160405280826040516020016140c09190615375565b6040516020818303038152906040528152602001826040516020016140e591906153cc565b60405160208183030381529060405281526020018260405160200161410a91906153f5565b60405160208183030381529060405281526020018260405160200161412f919061544c565b6040516020818303038152906040528152602001826040516020016141549190615476565b60405160208183030381529060405281526020018260405160200161417991906154ba565b604051602081830303815290604052815250915082156142cb5760006141be7f00000000000000000000000000000000000000000000000000000000000000006145a3565b83516040519192506141d49183906020016154d6565b60408051601f1981840301815291815290845260208481015191516141fc9291849101615527565b604051602081830303815290604052836020018190525082604001518160405160200161422a9291906154d6565b6040516020818303038152906040528360400181905250826060015181604051602001614258929190615527565b60405160208183030381529060405283606001819052508260800151816040516020016142869291906154d6565b60405160208183030381529060405283608001819052508260a00151816040516020016142b4929190615527565b60408051601f1981840301815291905260a0840152505b5092915050565b6001600160a01b038216600090815260036020526040812081908190841561431457600481015460018201549094506001600160a01b03169250839150614335565b600381015481549094506001600160a01b0316925061433286610cf5565b91505b509250925092565b600081158061434a575082155b1561435757506000610cee565b61436183856150e0565b9050818181614372576143726150ff565b0490508015801561438257508315155b15610cee57604051630cb65c7760e21b815260040160405180910390fd5b6000816000036143b1575081610cee565b6001600160a01b0384166000908152600460205260408120600101546143d8908585614641565b6001600160a01b03871660009081526004602052604090206001015584039150509392505050565b60606111d78484600085614670565b6000670de0b6b3a764000061442483856150e0565b61442e9190615115565b610cee9084615129565b600080851561452c576145276144b988606001518960a00151866001600160a01b03166325ed3d446040518163ffffffff1660e01b8152600401602060405180830381865afa15801561448f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144b39190615063565b8861478d565b88600001516001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156144fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061451f9190615063565b88919061433d565b61452f565b60005b90506000851561458857614583886080015189602001516001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156144fb573d6000803e3d6000fd5b61458b565b60005b90506145978183615129565b98975050505050505050565b6040805160048152602481019091526020810180516001600160e01b03166395d89b4160e01b17905260609060009081906145df908590612997565b915091508115806145ef57508051155b156146145750506040805180820190915260018152603f60f81b602082015292915050565b6020815103614626576111d7816147e1565b808060200190518101906111d79190615563565b5050919050565b670de0b6b3a764000081830204600081198511156146655750508219600019610a4b565b509392840192915050565b6060824710156146d15760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610a75565b843b61471f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a75565b600080866001600160a01b0316858760405161473b9190615307565b60006040518083038185875af1925050503d8060008114614778576040519150601f19603f3d011682016040523d82523d6000602084013e61477d565b606091505b5091509150614053828286614860565b6000806147a284670de0b6b3a764000061507c565b9050670de0b6b3a764000081816147b986896150e0565b6147c39190615115565b6147cd91906150e0565b6147d79190615115565b613ba89087615129565b805160609060005b8181101561463a5783818151811061480357614803614f59565b01602001516001600160f81b03191615614858578284828151811061482a5761482a614f59565b602001015160f81c60f81b6040516020016148469291906155d9565b60405160208183030381529060405292505b6001016147e9565b6060831561486f575081610cee565b82511561487f5782518084602001fd5b8160405162461bcd60e51b8152600401610a759190615608565b6040518060c0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600081525090565b600081518084526020808501945080840160005b8381101561491a578151875295820195908201906001016148fe565b509495945050505050565b602081526000610cee60208301846148ea565b6001600160a01b038116811461494d57600080fd5b50565b6000806040838503121561496357600080fd5b823561496e81614938565b946020939093013593505050565b60006020828403121561498e57600080fd5b8135610cee81614938565b801515811461494d57600080fd5b6000806000606084860312156149bc57600080fd5b83356149c781614938565b92506020840135915060408401356149de81614999565b809150509250925092565b600081518084526020808501945080840160005b8381101561491a5781516001600160a01b0316875295820195908201906001016149fd565b80516001600160a01b03908116835260208083015182169084015260408083015190911690830152606080820151908301526080808201519083015260a090810151910152565b604081526000614a7c60408301856149e9565b82810360208481019190915284518083528582019282019060005b81811015614abd57614aaa838651614a22565b9383019360c09290920191600101614a97565b5090979650505050505050565b602081526000610cee60208301846149e9565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715614b1b57614b1b614add565b604052919050565b60006001600160401b03821115614b3c57614b3c614add565b5060051b60200190565b60006001600160401b03821115614b5f57614b5f614add565b50601f01601f191660200190565b600082601f830112614b7e57600080fd5b8135614b91614b8c82614b46565b614af3565b818152846020838601011115614ba657600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215614bd657600080fd5b82356001600160401b0380821115614bed57600080fd5b818501915085601f830112614c0157600080fd5b81356020614c11614b8c83614b23565b82815260059290921b84018101918181019089841115614c3057600080fd5b948201945b83861015614c57578535614c4881614938565b82529482019490820190614c35565b96505086013592505080821115614c6d57600080fd5b50614c7a85828601614b6d565b9150509250929050565b600081518084526020808501808196508360051b810191508286016000805b86811015614cf2578385038a52825180518087529087019087870190845b81811015614cdd57835183529289019291890191600101614cc1565b50509a87019a95505091850191600101614ca3565b509298975050505050505050565b606081526000614d1360608301866149e9565b8281036020840152614d258186614c84565b90508281036040840152613ba88185614c84565b600080600060608486031215614d4e57600080fd5b8335614d5981614938565b92506020840135614d6981614938565b929592945050506040919091013590565b60008060408385031215614d8d57600080fd5b8235614d9881614938565b91506020830135614da881614938565b809150509250929050565b60c081016108fd8284614a22565b60008060008060808587031215614dd757600080fd5b8435614de281614938565b93506020850135614df281614938565b92506040850135614e0281614938565b9396929550929360600135925050565b600080600080600060a08688031215614e2a57600080fd5b8535614e3581614938565b94506020860135614e4581614938565b93506040860135614e5581614938565b9250606086013591506080860135614e6c81614999565b809150509295509295909350565b634e487b7160e01b600052602160045260246000fd5b600060808201905082518252602083015160208301526001600160401b036040840151166040830152606083015160038110614edc57634e487b7160e01b600052602160045260246000fd5b8060608401525092915050565b60008060008060808587031215614eff57600080fd5b8435614f0a81614938565b93506020850135614f1a81614938565b9250604085013591506060850135614f3181614999565b939692955090935050565b600060208284031215614f4e57600080fd5b8151610cee81614938565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201614f9757614f97614f6f565b5060010190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60006020808385031215614fe857600080fd5b82516001600160401b03811115614ffe57600080fd5b8301601f8101851361500f57600080fd5b805161501d614b8c82614b23565b81815260059190911b8201830190838101908783111561503c57600080fd5b928401925b8284101561405357835161505481614938565b82529284019290840190615041565b60006020828403121561507557600080fd5b5051919050565b60008282101561508e5761508e614f6f565b500390565b6000602082840312156150a557600080fd5b81516001600160e01b031981168114610cee57600080fd5b6000602082840312156150cf57600080fd5b815160ff81168114610cee57600080fd5b60008160001904831182151516156150fa576150fa614f6f565b500290565b634e487b7160e01b600052601260045260246000fd5b600082615124576151246150ff565b500490565b6000821982111561513c5761513c614f6f565b500190565b600181815b8085111561517c57816000190482111561516257615162614f6f565b8085161561516f57918102915b93841c9390800290615146565b509250929050565b600082615193575060016108fd565b816151a0575060006108fd565b81600181146151b657600281146151c0576151dc565b60019150506108fd565b60ff8411156151d1576151d1614f6f565b50506001821b6108fd565b5060208310610133831016604e8410600b84101617156151ff575081810a6108fd565b6152098383615141565b806000190482111561521d5761521d614f6f565b029392505050565b6000610cee60ff841683615184565b60006020828403121561524657600080fd5b8151610cee81614999565b60005b8381101561526c578181015183820152602001615254565b83811115612c1e5750506000910152565b60008151808452615295816020860160208601615251565b601f01601f19169290920160200192915050565b6001600160a01b038616815260a0602082018190526000906152cd908301876149e9565b82810360408401526152df81876148ea565b905082810360608401526152f381866148ea565b90508281036080840152614597818561527d565b60008251615319818460208701615251565b9190910192915050565b600082615332576153326150ff565b500690565b60608152600061534a606083018661527d565b828103602084015261535c818661527d565b91505060018060a01b0383166040830152949350505050565b7f53696c6f2046696e616e636520426f72726f7761626c652000000000000000008152600082516153ad816018850160208701615251565b670811195c1bdcda5d60c21b6018939091019283015250602001919050565b607360f81b8152600082516153e8816001850160208701615251565b9190910160010192915050565b7f53696c6f2046696e616e63652050726f7465637465642000000000000000000081526000825161542d816017850160208701615251565b670811195c1bdcda5d60c21b6017939091019283015250601f01919050565b61073760f41b815260008251615469816002850160208701615251565b9190910160020192915050565b6c029b4b637902334b730b731b29609d1b81526000825161549e81600d850160208701615251565b64081119589d60da1b600d939091019283015250601201919050565b601960fa1b8152600082516153e8816001850160208701615251565b600083516154e8818460208801615251565b6301034b7160e51b9083019081528351615509816004840160208801615251565b642053696c6f60d81b60049290910191820152600901949350505050565b60008351615539818460208801615251565b602d60f81b9083019081528351615557816001840160208801615251565b01600101949350505050565b60006020828403121561557557600080fd5b81516001600160401b0381111561558b57600080fd5b8201601f8101841361559c57600080fd5b80516155aa614b8c82614b46565b8181528560208385010111156155bf57600080fd5b6155d0826020830160208601615251565b95945050505050565b600083516155eb818460208801615251565b6001600160f81b0319939093169190920190815260010192915050565b602081526000610cee602083018461527d56fea264697066735822122061bd19026e284adbc381760d400b9edc1db4c521734bef7ec53fbd73c43af99764736f6c634300080d0033a2646970667358221220c8968bcb5881584d98c2fb2182d2a5a931ea8ffcda71e63ca3ac550fe693e61b64736f6c634300080d0033",
  "devdoc": {
    "custom:security-contact": "security@silo.finance",
    "details": "Silo Factory is registered within SiloRepository contract and it's given a version. Each version is different Silo Factory that deploys different Silo implementation. Many Factory contracts can be registered with the Repository contract.",
    "errors": {
      "InvalidSiloRepository()": [
        {
          "details": "Revert on a false sanity check with `Ping` library"
        }
      ],
      "OnlyRepository()": [
        {
          "details": "Revert on a silo creation if a msg.sender is not a silo repository"
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_repository": "A silo repository address"
        }
      },
      "createSilo(address,uint128,bytes)": {
        "params": {
          "_data": "(optional) data that may be needed during silo creation",
          "_siloAsset": "unique asset for which Silo is deployed",
          "_version": "version of silo implementation"
        },
        "returns": {
          "silo": "deployed Silo address"
        }
      },
      "siloFactoryPing()": {
        "details": "just a helper method to see if address is a factory"
      }
    },
    "title": "SiloCollateralOnlyFactory",
    "version": 1
  },
  "userdoc": {
    "events": {
      "NewSiloCreated(address,address,uint128)": {
        "notice": "Emitted when Silo is deployed"
      }
    },
    "kind": "user",
    "methods": {
      "createSilo(address,uint128,bytes)": {
        "notice": "Deploys Silo"
      }
    },
    "notice": "Silo Factory has one job, deploy Silo implementation",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 36622,
        "contract": "contracts/siloFactories/SiloCollateralOnlyFactory.sol:SiloCollateralOnlyFactory",
        "label": "siloRepository",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}