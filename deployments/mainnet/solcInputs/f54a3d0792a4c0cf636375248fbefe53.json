{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= type(int128).min && value <= type(int128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= type(int64).min && value <= type(int64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= type(int32).min && value <= type(int32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= type(int16).min && value <= type(int16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= type(int8).min && value <= type(int8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title The interface for the Uniswap V3 Factory\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\ninterface IUniswapV3Factory {\n    /// @notice Emitted when the owner of the factory is changed\n    /// @param oldOwner The owner before the owner was changed\n    /// @param newOwner The owner after the owner was changed\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\n\n    /// @notice Emitted when a pool is created\n    /// @param token0 The first token of the pool by address sort order\n    /// @param token1 The second token of the pool by address sort order\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\n    /// @param pool The address of the created pool\n    event PoolCreated(\n        address indexed token0,\n        address indexed token1,\n        uint24 indexed fee,\n        int24 tickSpacing,\n        address pool\n    );\n\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\n    /// @param fee The enabled fee, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\n\n    /// @notice Returns the current owner of the factory\n    /// @dev Can be changed by the current owner via setOwner\n    /// @return The address of the factory owner\n    function owner() external view returns (address);\n\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n    /// @return The tick spacing\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\n\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n    /// @param tokenA The contract address of either token0 or token1\n    /// @param tokenB The contract address of the other token\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @return pool The pool address\n    function getPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external view returns (address pool);\n\n    /// @notice Creates a pool for the given two tokens and fee\n    /// @param tokenA One of the two tokens in the desired pool\n    /// @param tokenB The other of the two tokens in the desired pool\n    /// @param fee The desired fee for the pool\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\n    /// are invalid.\n    /// @return pool The address of the newly created pool\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external returns (address pool);\n\n    /// @notice Updates the owner of the factory\n    /// @dev Must be called by the current owner\n    /// @param _owner The new owner of the factory\n    function setOwner(address _owner) external;\n\n    /// @notice Enables a fee amount with the given tickSpacing\n    /// @dev Fee amounts may never be removed once enabled\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport './pool/IUniswapV3PoolImmutables.sol';\nimport './pool/IUniswapV3PoolState.sol';\nimport './pool/IUniswapV3PoolDerivedState.sol';\nimport './pool/IUniswapV3PoolActions.sol';\nimport './pool/IUniswapV3PoolOwnerActions.sol';\nimport './pool/IUniswapV3PoolEvents.sol';\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n    IUniswapV3PoolImmutables,\n    IUniswapV3PoolState,\n    IUniswapV3PoolDerivedState,\n    IUniswapV3PoolActions,\n    IUniswapV3PoolOwnerActions,\n    IUniswapV3PoolEvents\n{\n\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IUniswapV3PoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (\n            int56 tickCumulativeInside,\n            uint160 secondsPerLiquidityInsideX128,\n            uint32 secondsInside\n        );\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld,\n        uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\n    /// @param sender The address that collects the protocol fees\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface IUniswapV3PoolOwnerActions {\n    /// @notice Set the denominator of the protocol's % share of the fees\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\n\n    /// @notice Collect the protocol fee accrued to the pool\n    /// @param recipient The address to which collected protocol fees should be sent\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n    /// @return amount0 The protocol fee collected in token0\n    /// @return amount1 The protocol fee collected in token1\n    function collectProtocol(\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.0;\n\n/// @title Optimized overflow and underflow safe math operations\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\nlibrary LowGasSafeMath {\n    /// @notice Returns x + y, reverts if sum overflows uint256\n    /// @param x The augend\n    /// @param y The addend\n    /// @return z The sum of x and y\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) >= x);\n    }\n\n    /// @notice Returns x - y, reverts if underflows\n    /// @param x The minuend\n    /// @param y The subtrahend\n    /// @return z The difference of x and y\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x);\n    }\n\n    /// @notice Returns x * y, reverts if overflows\n    /// @param x The multiplicand\n    /// @param y The multiplier\n    /// @return z The product of x and y\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(x == 0 || (z = x * y) / x == y);\n    }\n\n    /// @notice Returns x + y, reverts if overflows or underflows\n    /// @param x The augend\n    /// @param y The addend\n    /// @return z The sum of x and y\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\n        require((z = x + y) >= x == (y >= 0));\n    }\n\n    /// @notice Returns x - y, reverts if overflows or underflows\n    /// @param x The minuend\n    /// @param y The subtrahend\n    /// @return z The difference of x and y\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\n        require((z = x - y) <= x == (y >= 0));\n    }\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter is IUniswapV3SwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"
    },
    "contracts/BaseSilo.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport \"./utils/LiquidationReentrancyGuard.sol\";\n\nimport \"./interfaces/IBaseSilo.sol\";\nimport \"./interfaces/IGuardedLaunch.sol\";\nimport \"./interfaces/ISiloRepository.sol\";\nimport \"./interfaces/IPriceProvidersRepository.sol\";\nimport \"./interfaces/IInterestRateModel.sol\";\nimport \"./interfaces/IShareToken.sol\";\n\nimport \"./lib/Ping.sol\";\nimport \"./lib/EasyMathV2.sol\";\nimport \"./lib/TokenHelper.sol\";\nimport \"./lib/SolvencyV2.sol\";\n\n/// @title BaseSilo\n/// @dev Base contract for Silo core logic.\n/// @custom:security-contact security@silo.finance\nabstract contract BaseSilo is IBaseSilo, ReentrancyGuard, LiquidationReentrancyGuard {\n    using SafeERC20 for ERC20;\n    using EasyMathV2 for uint256;\n\n    ISiloRepository immutable public override siloRepository;\n\n    // asset address for which Silo was created\n    address public immutable siloAsset;\n\n    /// @dev version of silo\n    /// @notice It tells us which `SiloRepository.siloFactory(version)` created this Silo\n    uint128 public immutable VERSION; // solhint-disable-line var-name-mixedcase\n\n    // solhint-disable-next-line var-name-mixedcase\n    uint256 private immutable _ASSET_DECIMAL_POINTS;\n\n    /// @dev stores all *synced* assets (bridge assets + removed bridge assets + siloAsset)\n    address[] private _allSiloAssets;\n\n    /// @dev asset => AssetStorage\n    mapping(address => AssetStorage) private _assetStorage;\n\n    /// @dev asset => AssetInterestData\n    mapping(address => AssetInterestData) private _interestData;\n\n    error AssetDoesNotExist();\n    error BorrowNotPossible();\n    error DepositNotPossible();\n    error DepositsExceedLimit();\n    error InvalidRepository();\n    error InvalidSiloVersion();\n    error MaximumLTVReached();\n    error NotEnoughLiquidity();\n    error NotEnoughDeposits();\n    error NotSolvent();\n    error OnlyRouter();\n    error Paused();\n    error UnexpectedEmptyReturn();\n    error UserIsZero();\n\n    modifier onlyExistingAsset(address _asset) {\n        if (_interestData[_asset].status == AssetStatus.Undefined) {\n            revert AssetDoesNotExist();\n        }\n\n        _;\n    }\n\n    modifier onlyRouter() {\n        if (msg.sender != siloRepository.router()) revert OnlyRouter();\n\n        _;\n    }\n\n    modifier validateMaxDepositsAfter(address _asset) {\n        _;\n\n        IPriceProvidersRepository priceProviderRepo = siloRepository.priceProvidersRepository();\n\n        AssetStorage storage _assetState = _assetStorage[_asset];\n        uint256 allDeposits = _assetState.totalDeposits + _assetState.collateralOnlyDeposits;\n\n        if (\n            priceProviderRepo.getPrice(_asset) * allDeposits / (10 ** IERC20Metadata(_asset).decimals()) >\n            IGuardedLaunch(address(siloRepository)).getMaxSiloDepositsValue(address(this), _asset)\n        ) {\n            revert DepositsExceedLimit();\n        }\n    }\n\n    constructor (ISiloRepository _repository, address _siloAsset, uint128 _version) {\n        if (!Ping.pong(_repository.siloRepositoryPing)) revert InvalidRepository();\n        if (_version == 0) revert InvalidSiloVersion();\n\n        uint256 decimals = TokenHelper.assertAndGetDecimals(_siloAsset);\n\n        VERSION = _version;\n        siloRepository = _repository;\n        siloAsset = _siloAsset;\n        _ASSET_DECIMAL_POINTS = 10**decimals;\n    }\n\n    /// @dev this is exposed only for test purposes, but it is safe to leave it like that\n    function initAssetsTokens() external nonReentrant {\n        _initAssetsTokens();\n    }\n\n    /// @inheritdoc IBaseSilo\n    function syncBridgeAssets() external override nonReentrant {\n        // sync removed assets\n        address[] memory removedBridgeAssets = siloRepository.getRemovedBridgeAssets();\n\n        for (uint256 i = 0; i < removedBridgeAssets.length; i++) {\n            // If removed bridge asset is the silo asset for this silo, do not remove it\n            address removedBridgeAsset = removedBridgeAssets[i];\n            if (removedBridgeAsset != siloAsset) {\n                _interestData[removedBridgeAsset].status = AssetStatus.Removed;\n                emit AssetStatusUpdate(removedBridgeAsset, AssetStatus.Removed);\n            }\n        }\n\n        // must be called at the end, because we overriding `_assetStorage[removedBridgeAssets[i]].removed`\n        _initAssetsTokens();\n    }\n\n    /// @inheritdoc IBaseSilo\n    function assetStorage(address _asset) external view override returns (AssetStorage memory) {\n        return _assetStorage[_asset];\n    }\n\n    /// @inheritdoc IBaseSilo\n    function interestData(address _asset) external view override returns (AssetInterestData memory) {\n        return _interestData[_asset];\n    }\n\n    /// @inheritdoc IBaseSilo\n    function utilizationData(address _asset) external view override returns (UtilizationData memory data) {\n        AssetStorage storage _assetState = _assetStorage[_asset];\n\n        return UtilizationData(\n            _assetState.totalDeposits,\n            _assetState.totalBorrowAmount,\n            _interestData[_asset].interestRateTimestamp\n        );\n    }\n\n    /// @inheritdoc IBaseSilo\n    function getAssets() public view override returns (address[] memory assets) {\n        return _allSiloAssets;\n    }\n\n    /// @inheritdoc IBaseSilo\n    function getAssetsWithState() public view override returns (\n        address[] memory assets,\n        AssetStorage[] memory assetsStorage\n    ) {\n        assets = _allSiloAssets;\n        assetsStorage = new AssetStorage[](assets.length);\n\n        for (uint256 i = 0; i < assets.length; i++) {\n            assetsStorage[i] = _assetStorage[assets[i]];\n        }\n    }\n\n    /// @inheritdoc IBaseSilo\n    function isSolvent(address _user) public view override returns (bool) {\n        if (_user == address(0)) revert UserIsZero();\n\n        (address[] memory assets, AssetStorage[] memory assetsStates) = getAssetsWithState();\n\n        (uint256 userLTV, uint256 liquidationThreshold) = SolvencyV2.calculateLTVs(\n            SolvencyV2.SolvencyParams(\n                siloRepository,\n                ISilo(address(this)),\n                assets,\n                assetsStates,\n                _user\n            ),\n            SolvencyV2.TypeofLTV.LiquidationThreshold\n        );\n\n        return userLTV <= liquidationThreshold;\n    }\n\n    /// @inheritdoc IBaseSilo\n    function depositPossible(address _asset, address _depositor) public view override returns (bool) {\n        return _assetStorage[_asset].debtToken.balanceOf(_depositor) == 0\n            && _interestData[_asset].status == AssetStatus.Active;\n    }\n\n    /// @inheritdoc IBaseSilo\n    function borrowPossible(address _asset, address _borrower) public view override returns (bool) {\n        AssetStorage storage _assetState = _assetStorage[_asset];\n\n        return _assetState.collateralToken.balanceOf(_borrower) == 0\n            && _assetState.collateralOnlyToken.balanceOf(_borrower) == 0\n            && _interestData[_asset].status == AssetStatus.Active;\n    }\n\n    /// @inheritdoc IBaseSilo\n    function liquidity(address _asset) public view returns (uint256) {\n        return ERC20(_asset).balanceOf(address(this)) - _assetStorage[_asset].collateralOnlyDeposits;\n    }\n\n    /// @dev Initiate asset by deploying accounting EC20 tokens for collateral and debt\n    /// @param _tokensFactory factory contract that deploys collateral and debt tokens\n    /// @param _asset which asset to initialize\n    /// @param _isBridgeAsset true if initialized asset is a bridge asset\n    function _initAsset(ITokensFactory _tokensFactory, address _asset, bool _isBridgeAsset) internal {\n        AssetSharesMetadata memory metadata = _generateSharesNames(_asset, _isBridgeAsset);\n\n        AssetStorage storage _assetState = _assetStorage[_asset];\n\n        _assetState.collateralToken = _tokensFactory.createShareCollateralToken(\n            metadata.collateralName, metadata.collateralSymbol, _asset\n        );\n\n        _assetState.collateralOnlyToken = _tokensFactory.createShareCollateralToken(\n            metadata.protectedName, metadata.protectedSymbol, _asset\n        );\n\n        _assetState.debtToken = _tokensFactory.createShareDebtToken(\n            metadata.debtName, metadata.debtSymbol, _asset\n        );\n\n        // keep synced asset in storage array\n        _allSiloAssets.push(_asset);\n        _interestData[_asset].status = AssetStatus.Active;\n        emit AssetStatusUpdate(_asset, AssetStatus.Active);\n    }\n\n    /// @dev Initializes all assets (bridge assets + unique asset) for Silo but only if asset has not been\n    /// initialized already. It's safe to call it multiple times. It's safe for anyone to call it at any time.\n    function _initAssetsTokens() internal {\n        ITokensFactory tokensFactory = siloRepository.tokensFactory();\n\n        // init silo asset if needed\n        if (address(_assetStorage[siloAsset].collateralToken) == address(0)) {\n            _initAsset(tokensFactory, siloAsset, false);\n        }\n\n        // sync active assets\n        address[] memory bridgeAssets = siloRepository.getBridgeAssets();\n\n        for (uint256 i = 0; i < bridgeAssets.length; i++) {\n            address bridgeAsset = bridgeAssets[i];\n            // In case a bridge asset is added that already has a Silo,\n            // do not initiate that asset in its Silo\n            if (address(_assetStorage[bridgeAsset].collateralToken) == address(0)) {\n                _initAsset(tokensFactory, bridgeAsset, true);\n            } else {\n                _interestData[bridgeAsset].status = AssetStatus.Active;\n                emit AssetStatusUpdate(bridgeAsset, AssetStatus.Active);\n            }\n        }\n    }\n\n    /// @dev Generate asset shares tokens names and symbols\n    /// @param _asset asset for which shares tokens will be initializaed\n    /// @param _isBridgeAsset true if initialized asset is a bridge asset\n    function _generateSharesNames(address _asset, bool _isBridgeAsset)\n        internal\n        view\n        returns (AssetSharesMetadata memory metadata)\n    {\n        // Naming convention in UNI example:\n        // - for siloAsset: sUNI, dUNI, spUNI\n        // - for bridgeAsset: sWETH-UNI, dWETH-UNI, spWETH-UNI\n        string memory assetSymbol = TokenHelper.symbol(_asset);\n\n        metadata = AssetSharesMetadata({\n            collateralName: string.concat(\"Silo Finance Borrowable \", assetSymbol, \" Deposit\"),\n            collateralSymbol: string.concat(\"s\", assetSymbol),\n            protectedName: string.concat(\"Silo Finance Protected \", assetSymbol, \" Deposit\"),\n            protectedSymbol: string.concat(\"sp\", assetSymbol),\n            debtName: string.concat(\"Silo Finance \", assetSymbol, \" Debt\"),\n            debtSymbol: string.concat(\"d\", assetSymbol)\n        });\n\n        if (_isBridgeAsset) {\n            string memory baseSymbol = TokenHelper.symbol(siloAsset);\n\n            metadata.collateralName = string.concat(metadata.collateralName, \" in \", baseSymbol, \" Silo\");\n            metadata.collateralSymbol = string.concat(metadata.collateralSymbol, \"-\", baseSymbol);\n\n            metadata.protectedName = string.concat(metadata.protectedName, \" in \", baseSymbol, \" Silo\");\n            metadata.protectedSymbol = string.concat(metadata.protectedSymbol, \"-\", baseSymbol);\n\n            metadata.debtName = string.concat(metadata.debtName, \" in \", baseSymbol, \" Silo\");\n            metadata.debtSymbol = string.concat(metadata.debtSymbol, \"-\", baseSymbol);\n        }\n    }\n\n    /// @dev Main deposit function that handles all deposit logic and validation\n    /// @param _asset asset address that is being deposited\n    /// @param _from wallet address form which to pull asset tokens\n    /// @param _depositor wallet address that will be granted ownership of deposited tokens. Keep in mind\n    /// that deposit can be made by Router contract but the owner of the deposit should be user.\n    /// @param _amount deposit amount\n    /// @param _collateralOnly true if deposit should be used for collateral only. Otherwise false.\n    /// Collateral only deposit cannot be borrowed by anyone and does not earn any interest. However,\n    /// it can be used as collateral and can be subject to liquidation.\n    /// @return collateralAmount deposited amount\n    /// @return collateralShare `_depositor` collateral shares based on deposited amount\n    function _deposit(\n        address _asset,\n        address _from,\n        address _depositor,\n        uint256 _amount,\n        bool _collateralOnly\n    )\n        internal\n        nonReentrant\n        validateMaxDepositsAfter(_asset)\n        returns (uint256 collateralAmount, uint256 collateralShare)\n    {\n        // MUST BE CALLED AS FIRST METHOD!\n        _accrueInterest(_asset);\n\n        if (!depositPossible(_asset, _depositor)) revert DepositNotPossible();\n\n        AssetStorage storage _state = _assetStorage[_asset];\n\n        collateralAmount = _amount;\n\n        uint256 totalDepositsCached = _collateralOnly ? _state.collateralOnlyDeposits : _state.totalDeposits;\n\n        if (_collateralOnly) {\n            collateralShare = _amount.toShare(totalDepositsCached, _state.collateralOnlyToken.totalSupply());\n            _state.collateralOnlyDeposits = totalDepositsCached + _amount;\n            _state.collateralOnlyToken.mint(_depositor, collateralShare);\n        } else {\n            collateralShare = _amount.toShare(totalDepositsCached, _state.collateralToken.totalSupply());\n            _state.totalDeposits = totalDepositsCached + _amount;\n            _state.collateralToken.mint(_depositor, collateralShare);\n        }\n\n        ERC20(_asset).safeTransferFrom(_from, address(this), _amount);\n\n        emit Deposit(_asset, _depositor, _amount, _collateralOnly);\n    }\n\n    /// @dev Main withdraw function that handles all withdraw logic and validation\n    /// @param _asset asset address that is being withdrawn\n    /// @param _depositor wallet address that is an owner of the deposited tokens\n    /// @param _receiver wallet address that will receive withdrawn tokens. It's possible that Router\n    /// contract is the owner of deposited tokens but we want user to get these tokens directly.\n    /// @param _amount amount to withdraw. If amount is equal to maximum value stored by uint256 type\n    /// (type(uint256).max), it will be assumed that user wants to withdraw all tokens and final account\n    /// will be dynamically calculated including interest.\n    /// @param _collateralOnly true if collateral only tokens are to be withdrawn. Otherwise false.\n    /// User can deposit the same asset as collateral only and as regular deposit. During withdraw,\n    /// it must be specified which tokens are to be withdrawn.\n    /// @return withdrawnAmount withdrawn amount that was transferred to user\n    /// @return withdrawnShare burned share based on `withdrawnAmount`\n    function _withdraw(address _asset, address _depositor, address _receiver, uint256 _amount, bool _collateralOnly)\n        internal\n        nonReentrant // because we transferring tokens\n        onlyExistingAsset(_asset)\n        returns (uint256 withdrawnAmount, uint256 withdrawnShare)\n    {\n        // MUST BE CALLED AS FIRST METHOD!\n        _accrueInterest(_asset);\n\n        (withdrawnAmount, withdrawnShare) = _withdrawAsset(\n            _asset,\n            _amount,\n            _depositor,\n            _receiver,\n            _collateralOnly,\n            0 // do not apply any fees on regular withdraw\n        );\n\n        if (withdrawnAmount == 0) revert UnexpectedEmptyReturn();\n\n        if (!isSolvent(_depositor)) revert NotSolvent();\n\n        emit Withdraw(_asset, _depositor, _receiver, withdrawnAmount, _collateralOnly);\n    }\n\n    /// @dev Main borrow function that handles all borrow logic and validation\n    /// @param _asset asset address that is being borrowed\n    /// @param _borrower wallet address that will own debt\n    /// @param _receiver wallet address that will receive borrowed tokens. It's possible that Router\n    /// contract is executing borrowing for user and should be the one receiving tokens, however,\n    /// the owner of the debt should be user himself.\n    /// @param _amount amount of asset to borrow\n    /// @return debtAmount borrowed amount\n    /// @return debtShare user debt share based on borrowed amount\n    function _borrow(address _asset, address _borrower, address _receiver, uint256 _amount)\n        internal\n        nonReentrant\n        returns (uint256 debtAmount, uint256 debtShare)\n    {\n        // MUST BE CALLED AS FIRST METHOD!\n        _accrueInterest(_asset);\n\n        if (!borrowPossible(_asset, _borrower)) revert BorrowNotPossible();\n\n        if (liquidity(_asset) < _amount) revert NotEnoughLiquidity();\n\n        AssetStorage storage _state = _assetStorage[_asset];\n\n        uint256 totalBorrowAmount = _state.totalBorrowAmount;\n        uint256 entryFee = siloRepository.entryFee();\n        uint256 fee = entryFee == 0 ? 0 : _amount * entryFee / SolvencyV2._PRECISION_DECIMALS;\n        debtShare = (_amount + fee).toShareRoundUp(totalBorrowAmount, _state.debtToken.totalSupply());\n        debtAmount = _amount;\n\n        _state.totalBorrowAmount = totalBorrowAmount + _amount + fee;\n        _interestData[_asset].protocolFees += fee;\n\n        _state.debtToken.mint(_borrower, debtShare);\n\n        emit Borrow(_asset, _borrower, _amount);\n        ERC20(_asset).safeTransfer(_receiver, _amount);\n\n        // IMPORTANT - keep `validateBorrowAfter` at the end\n        _validateBorrowAfter(_borrower);\n    }\n\n    /// @dev Main repay function that handles all repay logic and validation\n    /// @param _asset asset address that is being repaid\n    /// @param _borrower wallet address for which debt is being repaid\n    /// @param _repayer wallet address that will pay the debt. It's possible that Router\n    /// contract is executing repay for user and should be the one paying the debt.\n    /// @param _amount amount of asset to repay\n    /// @return repaidAmount amount repaid\n    /// @return repaidShare burned debt share\n    function _repay(address _asset, address _borrower, address _repayer, uint256 _amount)\n        internal\n        onlyExistingAsset(_asset)\n        nonReentrant\n        returns (uint256 repaidAmount, uint256 repaidShare)\n    {\n        // MUST BE CALLED AS FIRST METHOD!\n        _accrueInterest(_asset);\n\n        AssetStorage storage _state = _assetStorage[_asset];\n        (repaidAmount, repaidShare) = _calculateDebtAmountAndShare(_state, _borrower, _amount);\n\n        if (repaidShare == 0) revert UnexpectedEmptyReturn();\n\n        emit Repay(_asset, _borrower, repaidAmount);\n\n        ERC20(_asset).safeTransferFrom(_repayer, address(this), repaidAmount);\n\n        // change debt state before, because share token state is changes the same way (notification is after burn)\n        _state.totalBorrowAmount -= repaidAmount;\n        _state.debtToken.burn(_borrower, repaidShare);\n    }\n\n    /// @param _assets all current assets, this is an optimization, so we don't have to read it from storage few times\n    /// @param _user user to liquidate\n    /// @param _flashReceiver address which will get all collaterals and will be notified once collaterals will be send\n    /// @param _flashReceiverData custom data to forward to receiver\n    /// @return receivedCollaterals amounts of collaterals transferred to `_flashReceiver`\n    /// @return shareAmountsToRepay expected amounts to repay\n    function _userLiquidation(\n        address[] memory _assets,\n        address _user,\n        IFlashLiquidationReceiver _flashReceiver,\n        bytes memory _flashReceiverData\n    )\n        internal\n        // we can not use `nonReentrant` because we are using it in `_repay`,\n        // and `_repay` needs to be reentered as part of a liquidation\n        liquidationNonReentrant\n        returns (uint256[] memory receivedCollaterals, uint256[] memory shareAmountsToRepay)\n    {\n        // gracefully fail if _user is solvent\n        if (isSolvent(_user)) {\n            uint256[] memory empty = new uint256[](_assets.length);\n            return (empty, empty);\n        }\n\n        (receivedCollaterals, shareAmountsToRepay) = _flashUserLiquidation(_assets, _user, address(_flashReceiver));\n\n        // _flashReceiver needs to repayFor user\n        _flashReceiver.siloLiquidationCallback(\n            _user,\n            _assets,\n            receivedCollaterals,\n            shareAmountsToRepay,\n            _flashReceiverData\n        );\n\n        for (uint256 i = 0; i < _assets.length; i++) {\n            if (receivedCollaterals[i] != 0 || shareAmountsToRepay[i] != 0) {\n                emit Liquidate(_assets[i], _user, shareAmountsToRepay[i], receivedCollaterals[i]);\n            }\n        }\n\n        if (!isSolvent(_user)) revert NotSolvent();\n    }\n\n    function _flashUserLiquidation(address[] memory _assets, address _borrower, address _liquidator)\n        internal\n        returns (uint256[] memory receivedCollaterals, uint256[] memory amountsToRepay)\n    {\n        uint256 assetsLength = _assets.length;\n        receivedCollaterals = new uint256[](assetsLength);\n        amountsToRepay = new uint256[](assetsLength);\n\n        uint256 protocolLiquidationFee = siloRepository.protocolLiquidationFee();\n\n        for (uint256 i = 0; i < assetsLength; i++) {\n            _accrueInterest(_assets[i]);\n\n            AssetStorage storage _state = _assetStorage[_assets[i]];\n\n            // we do not allow for partial repayment on liquidation, that's why max\n            (amountsToRepay[i],) = _calculateDebtAmountAndShare(_state, _borrower, type(uint256).max);\n\n            (uint256 withdrawnOnlyAmount,) = _withdrawAsset(\n                _assets[i],\n                type(uint256).max,\n                _borrower,\n                _liquidator,\n                true, // collateral only\n                protocolLiquidationFee\n            );\n\n            (uint256 withdrawnAmount,) = _withdrawAsset(\n                _assets[i],\n                type(uint256).max,\n                _borrower,\n                _liquidator,\n                false, // collateral only\n                protocolLiquidationFee\n            );\n\n            receivedCollaterals[i] = withdrawnOnlyAmount + withdrawnAmount;\n        }\n    }\n\n    /// @dev Utility function for withdrawing an asset\n    /// @param _asset asset to withdraw\n    /// @param _assetAmount amount of asset to withdraw\n    /// @param _depositor wallet address that is an owner of the deposit\n    /// @param _receiver wallet address that is receiving the token\n    /// @param _collateralOnly true if withdraw collateral only.\n    /// @param _protocolLiquidationFee if provided (!=0) liquidation fees will be applied and returned\n    /// `withdrawnAmount` will be decreased\n    /// @return withdrawnAmount amount of asset that has been sent to receiver\n    /// @return burnedShare burned share based on `withdrawnAmount`\n    function _withdrawAsset(\n        address _asset,\n        uint256 _assetAmount,\n        address _depositor,\n        address _receiver,\n        bool _collateralOnly,\n        uint256 _protocolLiquidationFee\n    )\n        internal\n        returns (uint256 withdrawnAmount, uint256 burnedShare)\n    {\n        (uint256 assetTotalDeposits, IShareToken shareToken, uint256 availableLiquidity) =\n            _getWithdrawAssetData(_asset, _collateralOnly);\n\n        if (_assetAmount == type(uint256).max) {\n            burnedShare = shareToken.balanceOf(_depositor);\n            withdrawnAmount = burnedShare.toAmount(assetTotalDeposits, shareToken.totalSupply());\n        } else {\n            burnedShare = _assetAmount.toShareRoundUp(assetTotalDeposits, shareToken.totalSupply());\n            withdrawnAmount = _assetAmount;\n        }\n\n        if (withdrawnAmount == 0) {\n            // we can not revert here, because liquidation will fail when one of collaterals will be empty\n            return (0, 0);\n        }\n\n        if (assetTotalDeposits < withdrawnAmount) revert NotEnoughDeposits();\n\n        unchecked {\n            // can be unchecked because of the `if` above\n            assetTotalDeposits -=  withdrawnAmount;\n        }\n\n        uint256 amountToTransfer = _applyLiquidationFee(_asset, withdrawnAmount, _protocolLiquidationFee);\n\n        if (availableLiquidity < amountToTransfer) revert NotEnoughLiquidity();\n\n        AssetStorage storage _state = _assetStorage[_asset];\n\n        if (_collateralOnly) {\n            _state.collateralOnlyDeposits = assetTotalDeposits;\n        } else {\n            _state.totalDeposits = assetTotalDeposits;\n        }\n\n        shareToken.burn(_depositor, burnedShare);\n        // in case token sent in fee-on-transfer type of token we do not care when withdrawing\n        ERC20(_asset).safeTransfer(_receiver, amountToTransfer);\n    }\n\n    /// @notice Calculates liquidations fee and returns amount of asset transferred to liquidator\n    /// @param _asset asset address\n    /// @param _amount amount on which we will apply fee\n    /// @param _protocolLiquidationFee liquidation fee in SolvencyV2._PRECISION_DECIMALS\n    /// @return change amount left after subtracting liquidation fee\n    function _applyLiquidationFee(address _asset, uint256 _amount, uint256 _protocolLiquidationFee)\n        internal\n        returns (uint256 change)\n    {\n        if (_protocolLiquidationFee == 0) {\n            return _amount;\n        }\n\n        uint256 liquidationFeeAmount;\n\n        (\n            liquidationFeeAmount,\n            _interestData[_asset].protocolFees\n        ) = SolvencyV2.calculateLiquidationFee(_interestData[_asset].protocolFees, _amount, _protocolLiquidationFee);\n\n        unchecked {\n            // if fees will not be higher than 100% this will not underflow, this is responsibility of siloRepository\n            // in case we do underflow, we can expect liquidator reject tx because of too little change\n            change = _amount - liquidationFeeAmount;\n        }\n    }\n\n    /// @dev harvest protocol fees from particular asset\n    /// @param _asset asset we want to harvest fees from\n    /// @param _receiver address of fees receiver\n    /// @return harvestedFees harvested fee\n    function _harvestProtocolFees(address _asset, address _receiver)\n        internal\n        nonReentrant\n        returns (uint256 harvestedFees)\n    {\n        AssetInterestData storage data = _interestData[_asset];\n\n        harvestedFees = data.protocolFees - data.harvestedProtocolFees;\n\n        uint256 currentLiquidity = liquidity(_asset);\n\n        if (harvestedFees > currentLiquidity) {\n            harvestedFees = currentLiquidity;\n        }\n\n        if (harvestedFees == 0) {\n            return 0;\n        }\n\n        unchecked {\n            // This can't overflow because this addition is less than or equal to data.protocolFees\n            data.harvestedProtocolFees += harvestedFees;\n        }\n\n        ERC20(_asset).safeTransfer(_receiver, harvestedFees);\n    }\n\n    /// @notice Accrue interest for asset\n    /// @dev Silo Interest Rate Model implements dynamic interest rate that changes every second. Returned\n    /// interest rate by the model is compounded rate so it can be used in math calculations as if it was\n    /// static. Rate is calculated for the time range between last update and current timestamp.\n    /// @param _asset address of the asset for which interest should be accrued\n    /// @return accruedInterest total accrued interest\n    function _accrueInterest(address _asset) internal returns (uint256 accruedInterest) {\n        /// @dev `_accrueInterest` is called on every user action, including liquidation. It's enough to check\n        /// if Silo is paused in this function.\n        if (IGuardedLaunch(address(siloRepository)).isSiloPaused(address(this), _asset)) {\n            revert Paused();\n        }\n\n        AssetStorage storage _state = _assetStorage[_asset];\n        AssetInterestData storage _assetInterestData = _interestData[_asset];\n        uint256 lastTimestamp = _assetInterestData.interestRateTimestamp;\n\n        // This is the first time, so we can return early and save some gas\n        if (lastTimestamp == 0) {\n            _assetInterestData.interestRateTimestamp = uint64(block.timestamp);\n            return 0;\n        }\n\n        // Interest has already been accrued this block\n        if (lastTimestamp == block.timestamp) {\n            return 0;\n        }\n\n        uint256 rcomp = _getModel(_asset).getCompoundInterestRateAndUpdate(_asset, block.timestamp);\n        uint256 protocolShareFee = siloRepository.protocolShareFee();\n\n        uint256 totalBorrowAmountCached = _state.totalBorrowAmount;\n        uint256 protocolFeesCached = _assetInterestData.protocolFees;\n        uint256 newProtocolFees;\n        uint256 protocolShare;\n        uint256 depositorsShare;\n\n        accruedInterest = totalBorrowAmountCached * rcomp / SolvencyV2._PRECISION_DECIMALS;\n\n        unchecked {\n            // If we overflow on multiplication it should not revert tx, we will get lower fees\n            protocolShare = accruedInterest * protocolShareFee / SolvencyV2._PRECISION_DECIMALS;\n            newProtocolFees = protocolFeesCached + protocolShare;\n\n            if (newProtocolFees < protocolFeesCached) {\n                protocolShare = type(uint256).max - protocolFeesCached;\n                newProtocolFees = type(uint256).max;\n            }\n    \n            depositorsShare = accruedInterest - protocolShare;\n        }\n\n        // update contract state\n        _state.totalBorrowAmount = totalBorrowAmountCached + accruedInterest;\n        _state.totalDeposits = _state.totalDeposits + depositorsShare;\n        _assetInterestData.protocolFees = newProtocolFees;\n        _assetInterestData.interestRateTimestamp = uint64(block.timestamp);\n    }\n\n    /// @dev gets interest rates model object\n    /// @param _asset asset for which to calculate interest rate\n    /// @return IInterestRateModel interest rates model object\n    function _getModel(address _asset) internal view returns (IInterestRateModel) {\n        return IInterestRateModel(siloRepository.getInterestRateModel(address(this), _asset));\n    }\n\n    /// @dev calculates amount to repay based on user shares, we do not apply virtual balances here,\n    /// if needed, they need to be apply beforehand\n    /// @param _state asset storage struct\n    /// @param _borrower borrower address\n    /// @param _amount proposed amount of asset to repay. Based on that,`repayShare` is calculated.\n    /// @return amount amount of asset to repay\n    /// @return repayShare amount of debt token representing debt ownership\n    function _calculateDebtAmountAndShare(AssetStorage storage _state, address _borrower, uint256 _amount)\n        internal\n        view\n        returns (uint256 amount, uint256 repayShare)\n    {\n        uint256 borrowerDebtShare = _state.debtToken.balanceOf(_borrower);\n        uint256 debtTokenTotalSupply = _state.debtToken.totalSupply();\n        uint256 totalBorrowed = _state.totalBorrowAmount;\n        uint256 maxAmount = borrowerDebtShare.toAmountRoundUp(totalBorrowed, debtTokenTotalSupply);\n\n        if (_amount >= maxAmount) {\n            amount = maxAmount;\n            repayShare = borrowerDebtShare;\n        } else {\n            amount = _amount;\n            repayShare = _amount.toShare(totalBorrowed, debtTokenTotalSupply);\n        }\n    }\n\n    /// @dev verifies if user did not borrow more than allowed maximum\n    function _validateBorrowAfter(address _user) private view {\n        (address[] memory assets, AssetStorage[] memory assetsStates) = getAssetsWithState();\n\n        (uint256 userLTV, uint256 maximumAllowedLTV) = SolvencyV2.calculateLTVs(\n            SolvencyV2.SolvencyParams(\n                siloRepository,\n                ISilo(address(this)),\n                assets,\n                assetsStates,\n                _user\n            ),\n            SolvencyV2.TypeofLTV.MaximumLTV\n        );\n\n        if (userLTV > maximumAllowedLTV) revert MaximumLTVReached();\n    }\n\n    function _getWithdrawAssetData(address _asset, bool _collateralOnly)\n        private\n        view\n        returns(uint256 assetTotalDeposits, IShareToken shareToken, uint256 availableLiquidity)\n    {\n        AssetStorage storage _state = _assetStorage[_asset];\n\n        if (_collateralOnly) {\n            assetTotalDeposits = _state.collateralOnlyDeposits;\n            shareToken = _state.collateralOnlyToken;\n            availableLiquidity = assetTotalDeposits;\n        } else {\n            assetTotalDeposits = _state.totalDeposits;\n            shareToken = _state.collateralToken;\n            availableLiquidity = liquidity(_asset);\n        }\n    }\n}\n"
    },
    "contracts/external/aave/incentives/base/BaseIncentivesController.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.13;\n\nimport {DistributionTypes} from \"../../lib/DistributionTypes.sol\";\nimport {DistributionManager} from \"./DistributionManager.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IAaveIncentivesController} from \"../../interfaces/IAaveIncentivesController.sol\";\n\n/**\n * @title BaseIncentivesController\n * @notice Abstract contract template to build Distributors contracts for ERC20 rewards to protocol participants\n * @author Aave\n  */\nabstract contract BaseIncentivesController is IAaveIncentivesController, DistributionManager {\n    uint256 public constant REVISION = 1;\n\n    address public immutable override REWARD_TOKEN; // solhint-disable-line var-name-mixedcase\n\n    mapping(address => uint256) internal _usersUnclaimedRewards;\n\n    // this mapping allows whitelisted addresses to claim on behalf of others\n    // useful for contracts that hold tokens to be rewarded but don't have any native logic to claim Liquidity Mining\n    // rewards\n    mapping(address => address) internal _authorizedClaimers;\n\n    modifier onlyAuthorizedClaimers(address claimer, address user) {\n        if (_authorizedClaimers[user] != claimer) revert ClaimerUnauthorized();\n\n        _;\n    }\n\n    error InvalidConfiguration();\n    error IndexOverflowAtEmissionsPerSecond();\n    error InvalidToAddress();\n    error InvalidUserAddress();\n    error ClaimerUnauthorized();\n\n    constructor(IERC20 rewardToken, address emissionManager) DistributionManager(emissionManager) {\n        REWARD_TOKEN = address(rewardToken);\n    }\n\n    /// @inheritdoc IAaveIncentivesController\n    function configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond)\n        external\n        override\n        onlyEmissionManager\n    {\n        if (assets.length != emissionsPerSecond.length) revert InvalidConfiguration();\n\n        DistributionTypes.AssetConfigInput[] memory assetsConfig =\n            new DistributionTypes.AssetConfigInput[](assets.length);\n\n        for (uint256 i = 0; i < assets.length;) {\n            if (uint104(emissionsPerSecond[i]) != emissionsPerSecond[i]) revert IndexOverflowAtEmissionsPerSecond();\n\n            assetsConfig[i].underlyingAsset = assets[i];\n            assetsConfig[i].emissionPerSecond = uint104(emissionsPerSecond[i]);\n            assetsConfig[i].totalStaked = IERC20(assets[i]).totalSupply();\n\n            unchecked { i++; }\n        }\n\n        _configureAssets(assetsConfig);\n    }\n\n    /// @inheritdoc IAaveIncentivesController\n    function handleAction(\n        // this handler is never executed if notification is off\n        // however `_updateUserAssetInternal` is executed on claiming rewards\n        // this is where we should update user state on mint: totalSupply will be before mint,\n        // and userBalance will be 0 (before mint)\n        address user,\n        uint256 totalSupply,\n        uint256 userBalance\n    ) public override {\n        uint256 accruedRewards = _updateUserAssetInternal(user, msg.sender, userBalance, totalSupply);\n\n        if (accruedRewards != 0) {\n            _usersUnclaimedRewards[user] = _usersUnclaimedRewards[user] + accruedRewards;\n            emit RewardsAccrued(user, accruedRewards);\n        }\n    }\n\n    /// @inheritdoc IAaveIncentivesController\n    function getRewardsBalance(address[] calldata assets, address user)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        uint256 unclaimedRewards = _usersUnclaimedRewards[user];\n\n        DistributionTypes.UserStakeInput[] memory userState = new DistributionTypes.UserStakeInput[](assets.length);\n\n        for (uint256 i = 0; i < assets.length;) {\n            userState[i].underlyingAsset = assets[i];\n            (userState[i].stakedByUser, userState[i].totalStaked) = _getScaledUserBalanceAndSupply(assets[i], user);\n\n            unchecked { i++; }\n        }\n\n        unclaimedRewards = unclaimedRewards + _getUnclaimedRewards(user, userState);\n        return unclaimedRewards;\n    }\n\n    /// @inheritdoc IAaveIncentivesController\n    function claimRewards(\n        address[] calldata assets,\n        uint256 amount,\n        address to\n    ) external override returns (uint256) {\n        if (to == address(0)) revert InvalidToAddress();\n\n        return _claimRewards(assets, amount, msg.sender, msg.sender, to);\n    }\n\n    /// @inheritdoc IAaveIncentivesController\n    function claimRewardsOnBehalf(\n        address[] calldata assets,\n        uint256 amount,\n        address user,\n        address to\n    ) external override onlyAuthorizedClaimers(msg.sender, user) returns (uint256) {\n        if (user == address(0)) revert InvalidUserAddress();\n        if (to == address(0)) revert InvalidToAddress();\n\n        return _claimRewards(assets, amount, msg.sender, user, to);\n    }\n\n    /// @inheritdoc IAaveIncentivesController\n    function claimRewardsToSelf(address[] calldata assets, uint256 amount)\n        external\n        override\n        returns (uint256)\n    {\n        return _claimRewards(assets, amount, msg.sender, msg.sender, msg.sender);\n    }\n\n    /// @inheritdoc IAaveIncentivesController\n    function setClaimer(address user, address caller) external override onlyEmissionManager {\n        _authorizedClaimers[user] = caller;\n        emit ClaimerSet(user, caller);\n    }\n\n    /// @inheritdoc IAaveIncentivesController\n    function getClaimer(address user) external view override returns (address) {\n        return _authorizedClaimers[user];\n    }\n\n    /// @inheritdoc IAaveIncentivesController\n    function getUserUnclaimedRewards(address _user) external view override returns (uint256) {\n        return _usersUnclaimedRewards[_user];\n    }\n\n    /**\n     * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards\n     * @param amount Amount of rewards to claim\n     * @param user Address to check and claim rewards\n     * @param to Address that will be receiving the rewards\n     * @return Rewards claimed\n     */\n    function _claimRewards(\n        address[] calldata assets,\n        uint256 amount,\n        address claimer,\n        address user,\n        address to\n    ) internal returns (uint256) {\n        if (amount == 0) {\n            return 0;\n        }\n\n        // on claim: here user have 0 claimed rewards\n        uint256 unclaimedRewards = _usersUnclaimedRewards[user];\n\n        // on claim: amount is passed by user, it cam be max(uint), so we entering the if\n        if (amount > unclaimedRewards) {\n            DistributionTypes.UserStakeInput[] memory userState = new DistributionTypes.UserStakeInput[](assets.length);\n\n            // we building up user state for each token, basically it is reading total supply and user balance\n            for (uint256 i = 0; i < assets.length;) {\n                userState[i].underlyingAsset = assets[i];\n                (userState[i].stakedByUser, userState[i].totalStaked) = _getScaledUserBalanceAndSupply(assets[i], user);\n\n                unchecked { i++; }\n            }\n\n            // on claim: we build up `userState` with current token state for user\n            uint256 accruedRewards = _claimRewards(user, userState);\n\n            if (accruedRewards != 0) {\n                unclaimedRewards = unclaimedRewards + accruedRewards;\n                emit RewardsAccrued(user, accruedRewards);\n            }\n        }\n\n        if (unclaimedRewards == 0) {\n            return 0;\n        }\n\n        uint256 amountToClaim = amount > unclaimedRewards ? unclaimedRewards : amount;\n        unchecked { _usersUnclaimedRewards[user] = unclaimedRewards - amountToClaim; } // Safe due to the previous line\n\n        _transferRewards(to, amountToClaim);\n        emit RewardsClaimed(user, to, claimer, amountToClaim);\n\n        return amountToClaim;\n    }\n\n    /**\n     * @dev Abstract function to transfer rewards to the desired account\n     * @param to Account address to send the rewards\n     * @param amount Amount of rewards to transfer\n     */\n    function _transferRewards(address to, uint256 amount) internal virtual;\n\n    function _getScaledUserBalanceAndSupply(address _asset, address _user)\n        internal\n        view\n        virtual\n        returns (uint256 userBalance, uint256 totalSupply);\n}\n"
    },
    "contracts/external/aave/incentives/base/DistributionManager.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.13;\n\nimport {IAaveDistributionManager} from \"../../interfaces/IAaveDistributionManager.sol\";\nimport {DistributionTypes} from \"../../lib/DistributionTypes.sol\";\n\n/**\n * @title DistributionManager\n * @notice Accounting contract to manage multiple staking distributions\n * @author Aave\n */\ncontract DistributionManager is IAaveDistributionManager {\n    struct AssetData {\n        uint104 emissionPerSecond;\n        uint104 index;\n        uint40 lastUpdateTimestamp;\n        mapping(address => uint256) users;\n    }\n\n    address public immutable EMISSION_MANAGER; // solhint-disable-line var-name-mixedcase\n\n    uint8 public constant PRECISION = 18;\n    uint256 public constant TEN_POW_PRECISION = 10 ** PRECISION;\n\n    mapping(address => AssetData) public assets;\n\n    uint256 internal _distributionEnd;\n\n    error OnlyEmissionManager();\n    error IndexOverflow();\n\n    modifier onlyEmissionManager() {\n        if (msg.sender != EMISSION_MANAGER) revert OnlyEmissionManager();\n\n        _;\n    }\n\n    constructor(address emissionManager) {\n        EMISSION_MANAGER = emissionManager;\n    }\n\n    /// @inheritdoc IAaveDistributionManager\n    function setDistributionEnd(uint256 distributionEnd) external override onlyEmissionManager {\n        _distributionEnd = distributionEnd;\n        emit DistributionEndUpdated(distributionEnd);\n    }\n\n    /// @inheritdoc IAaveDistributionManager\n    function getDistributionEnd() external view override returns (uint256) {\n        return _distributionEnd;\n    }\n\n    /// @inheritdoc IAaveDistributionManager\n    function DISTRIBUTION_END() external view override returns (uint256) { // solhint-disable-line func-name-mixedcase\n        return _distributionEnd;\n    }\n\n    /// @inheritdoc IAaveDistributionManager\n    function getUserAssetData(address user, address asset) public view override returns (uint256) {\n        return assets[asset].users[user];\n    }\n\n    /// @inheritdoc IAaveDistributionManager\n    function getAssetData(address asset) public view override returns (uint256, uint256, uint256) {\n        return (assets[asset].index, assets[asset].emissionPerSecond, assets[asset].lastUpdateTimestamp);\n    }\n\n    /**\n     * @dev Configure the assets for a specific emission\n     * @param assetsConfigInput The array of each asset configuration\n     */\n    function _configureAssets(DistributionTypes.AssetConfigInput[] memory assetsConfigInput) internal {\n        for (uint256 i = 0; i < assetsConfigInput.length;) {\n            AssetData storage assetConfig = assets[assetsConfigInput[i].underlyingAsset];\n\n            _updateAssetStateInternal(\n                assetsConfigInput[i].underlyingAsset,\n                assetConfig,\n                assetsConfigInput[i].totalStaked\n            );\n\n            assetConfig.emissionPerSecond = assetsConfigInput[i].emissionPerSecond;\n\n            emit AssetConfigUpdated(\n                assetsConfigInput[i].underlyingAsset,\n                assetsConfigInput[i].emissionPerSecond\n            );\n\n            unchecked { i++; }\n        }\n    }\n\n    /**\n     * @dev Updates the state of one distribution, mainly rewards index and timestamp\n     * @param asset The address of the asset being updated\n     * @param assetConfig Storage pointer to the distribution's config\n     * @param totalStaked Current total of staked assets for this distribution\n     * @return The new distribution index\n     */\n    function _updateAssetStateInternal(\n        address asset,\n        AssetData storage assetConfig,\n        uint256 totalStaked\n    ) internal returns (uint256) {\n        // this method is first called on config, and then when users claims\n        // on config: oldIndex is 0\n        // on claim `oldIndex` will be some positive index created on config\n        uint256 oldIndex = assetConfig.index;\n        // on config: some positive value we set as emission\n        uint256 emissionPerSecond = assetConfig.emissionPerSecond;\n        // on config: 0\n        // on claim: it will be time of config setup\n        uint128 lastUpdateTimestamp = assetConfig.lastUpdateTimestamp;\n\n        // on config: it is not equal\n        // on claim: is not equal (if this is first try of claim)\n        if (block.timestamp == lastUpdateTimestamp) {\n            return oldIndex;\n        }\n\n        // on config _getAssetIndex(0, emissionPerSecond, 0, totalStaked)\n        // on config: newIndex will have some positive value\n        uint256 newIndex = _getAssetIndex(oldIndex, emissionPerSecond, lastUpdateTimestamp, totalStaked);\n\n        // on config ( positive != 0) => yes\n        if (newIndex != oldIndex) {\n            if (uint104(newIndex) != newIndex) revert IndexOverflow();\n\n            //optimization: storing one after another saves one SSTORE\n            assetConfig.index = uint104(newIndex);\n            assetConfig.lastUpdateTimestamp = uint40(block.timestamp);\n            emit AssetIndexUpdated(asset, newIndex);\n        } else {\n            assetConfig.lastUpdateTimestamp = uint40(block.timestamp);\n        }\n\n        return newIndex;\n    }\n\n    /**\n     * @dev Updates the state of an user in a distribution\n     * @param user The user's address\n     * @param asset The address of the reference asset of the distribution\n     * @param stakedByUser Amount of tokens staked by the user in the distribution at the moment\n     * @param totalStaked Total tokens staked in the distribution\n     * @return The accrued rewards for the user until the moment\n     */\n    function _updateUserAssetInternal(\n        address user,\n        address asset,\n        uint256 stakedByUser, // ON MINT THIS WILL BE 0\n        uint256 totalStaked\n    ) internal returns (uint256) {\n        AssetData storage assetData = assets[asset];\n        // on claim: userIndex is 0 because this is first claim of the user\n        uint256 userIndex = assetData.users[user];\n        uint256 accruedRewards = 0;\n\n        uint256 newIndex = _updateAssetStateInternal(asset, assetData, totalStaked);\n\n        if (userIndex != newIndex) {\n            if (stakedByUser != 0) {\n                // ON MINT we will not assign any rewards because stakedByUser == 0\n                // however if notification was not done, then on claim stakedByUser != 0 and we enter this place in code\n                // and we apply rewards for user who JUST stake\n                accruedRewards = _getRewards(stakedByUser, newIndex, userIndex);\n            }\n\n            // ON MINT: we save users \"starting point\"\n            assetData.users[user] = newIndex;\n            emit UserIndexUpdated(user, asset, newIndex);\n        }\n\n        return accruedRewards;\n    }\n\n    /**\n     * @dev Used by \"frontend\" stake contracts to update the data of an user when claiming rewards from there\n     * @param user The address of the user\n     * @param stakes List of structs of the user data related with his stake\n     * @return The accrued rewards for the user until the moment\n     */\n    function _claimRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\n        internal\n        returns (uint256)\n    {\n        uint256 accruedRewards = 0;\n\n        // on claim: here we looping over builded user states for eac hasset\n        for (uint256 i = 0; i < stakes.length;) {\n            accruedRewards = accruedRewards + _updateUserAssetInternal(\n                    user,\n                    stakes[i].underlyingAsset,\n                    stakes[i].stakedByUser,\n                    stakes[i].totalStaked\n                );\n\n            unchecked { i++; }\n        }\n\n        return accruedRewards;\n    }\n\n    /**\n     * @dev Return the accrued rewards for an user over a list of distribution\n     * @param user The address of the user\n     * @param stakes List of structs of the user data related with his stake\n     * @return The accrued rewards for the user until the moment\n     */\n    function _getUnclaimedRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 accruedRewards = 0;\n\n        for (uint256 i = 0; i < stakes.length;) {\n            AssetData storage assetConfig = assets[stakes[i].underlyingAsset];\n\n            uint256 assetIndex = _getAssetIndex(\n                assetConfig.index,\n                assetConfig.emissionPerSecond,\n                assetConfig.lastUpdateTimestamp,\n                stakes[i].totalStaked\n            );\n\n            accruedRewards = accruedRewards + _getRewards(stakes[i].stakedByUser, assetIndex, assetConfig.users[user]);\n\n            unchecked { i++; }\n        }\n\n        return accruedRewards;\n    }\n\n    /**\n     * @dev Internal function for the calculation of user's rewards on a distribution\n     * @param principalUserBalance Amount staked by the user on a distribution\n     * @param reserveIndex Current index of the distribution\n     * @param userIndex Index stored for the user, representation his staking moment\n     * @return rewards The rewards\n     */\n    function _getRewards(\n        uint256 principalUserBalance,\n        uint256 reserveIndex,\n        uint256 userIndex\n    ) internal pure returns (uint256 rewards) {\n        rewards = principalUserBalance * (reserveIndex - userIndex);\n        unchecked { rewards /= TEN_POW_PRECISION; }\n    }\n\n    /**\n     * @dev Calculates the next value of an specific distribution index, with validations\n     * @param currentIndex Current index of the distribution\n     * @param emissionPerSecond Representing the total rewards distributed per second per asset unit,\n     * on the distribution\n     * @param lastUpdateTimestamp Last moment this distribution was updated\n     * @param totalBalance of tokens considered for the distribution\n     * @return newIndex The new index.\n     */\n    function _getAssetIndex(\n        uint256 currentIndex,\n        uint256 emissionPerSecond,\n        uint128 lastUpdateTimestamp,\n        uint256 totalBalance\n    ) internal view returns (uint256 newIndex) {\n        uint256 distributionEnd = _distributionEnd;\n\n        // on config: we not entering this if\n        if (\n            emissionPerSecond == 0 ||\n            totalBalance == 0 ||\n            lastUpdateTimestamp == block.timestamp ||\n            lastUpdateTimestamp >= distributionEnd\n        ) {\n            return currentIndex;\n        }\n\n        // on config: currentTimestamp = block.timestamp\n        uint256 currentTimestamp = block.timestamp > distributionEnd ? distributionEnd : block.timestamp;\n        // on config: this will be positive value\n        // on claim: timeDelta will be positive, it is time since config setup\n        uint256 timeDelta = currentTimestamp - lastUpdateTimestamp;\n\n        // on config: some start index is created that is not zero\n        // on claim: emissionPerSecond is the same, TEN_POW_PRECISION is the same, timeDelta is some positive number\n        newIndex = emissionPerSecond * timeDelta * TEN_POW_PRECISION;\n        // on config: totalBalance is pulled from token\n        // NOTE: when user deposit, then we mint share token and totalBalance is increased\n        // BUT without notification this contract is not updated with this information\n        //\n        unchecked { newIndex /= totalBalance; }\n        newIndex += currentIndex;\n    }\n}\n"
    },
    "contracts/external/aave/interfaces/IAaveDistributionManager.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.13;\n\nimport {DistributionTypes} from \"../lib/DistributionTypes.sol\";\n\ninterface IAaveDistributionManager {\n  \n    event AssetConfigUpdated(address indexed asset, uint256 emission);\n    event AssetIndexUpdated(address indexed asset, uint256 index);\n    event UserIndexUpdated(address indexed user, address indexed asset, uint256 index);\n    event DistributionEndUpdated(uint256 newDistributionEnd);\n\n    /**\n     * @dev Sets the end date for the distribution\n     * @param distributionEnd The end date timestamp\n     */\n    function setDistributionEnd(uint256 distributionEnd) external;\n\n    /**\n     * @dev Gets the end date for the distribution\n     * @return The end of the distribution\n     */\n    function getDistributionEnd() external view returns (uint256);\n\n    /**\n     * @dev for backwards compatibility with the previous DistributionManager used\n     * @return The end of the distribution\n     */\n    function DISTRIBUTION_END() external view returns(uint256); // solhint-disable-line func-name-mixedcase\n\n    /**\n     * @dev Returns the data of an user on a distribution\n     * @param user Address of the user\n     * @param asset The address of the reference asset of the distribution\n     * @return The new index\n     */\n    function getUserAssetData(address user, address asset) external view returns (uint256);\n\n    /**\n     * @dev Returns the configuration of the distribution for a certain asset\n     * @param asset The address of the reference asset of the distribution\n     * @return The asset index, the emission per second and the last updated timestamp\n     */\n    function getAssetData(address asset) external view returns (uint256, uint256, uint256);\n}\n"
    },
    "contracts/external/aave/interfaces/IAaveIncentivesController.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.13;\n\nimport {IAaveDistributionManager} from \"../interfaces/IAaveDistributionManager.sol\";\n\ninterface IAaveIncentivesController is IAaveDistributionManager {\n    event RewardsAccrued(address indexed user, uint256 amount);\n\n    event RewardsClaimed(\n        address indexed user,\n        address indexed to,\n        address indexed claimer,\n        uint256 amount\n    );\n\n    event ClaimerSet(address indexed user, address indexed claimer);\n\n    /**\n     * @dev Whitelists an address to claim the rewards on behalf of another address\n     * @param user The address of the user\n     * @param claimer The address of the claimer\n     */\n    function setClaimer(address user, address claimer) external;\n\n    /**\n     * @dev Configure assets for a certain rewards emission\n     * @param assets The assets to incentivize\n     * @param emissionsPerSecond The emission for each asset\n     */\n    function configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond) external;\n\n    /**\n     * @dev Called by the corresponding asset on any update that affects the rewards distribution\n     * @param asset The address of the user\n     * @param userBalance The balance of the user of the asset in the lending pool\n     * @param totalSupply The total supply of the asset in the lending pool\n     */\n    function handleAction(\n        address asset,\n        uint256 userBalance,\n        uint256 totalSupply\n    ) external;\n\n    /**\n     * @dev Claims reward for an user to the desired address, on all the assets of the lending pool,\n     * accumulating the pending rewards\n     * @param amount Amount of rewards to claim\n     * @param to Address that will be receiving the rewards\n     * @return Rewards claimed\n     */\n    function claimRewards(\n        address[] calldata assets,\n        uint256 amount,\n        address to\n    ) external returns (uint256);\n\n    /**\n     * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending\n     * rewards. The caller must be whitelisted via \"allowClaimOnBehalf\" function by the RewardsAdmin role manager\n     * @param amount Amount of rewards to claim\n     * @param user Address to check and claim rewards\n     * @param to Address that will be receiving the rewards\n     * @return Rewards claimed\n     */\n    function claimRewardsOnBehalf(\n        address[] calldata assets,\n        uint256 amount,\n        address user,\n        address to\n    ) external returns (uint256);\n\n    /**\n     * @dev Claims reward for msg.sender, on all the assets of the lending pool, accumulating the pending rewards\n     * @param amount Amount of rewards to claim\n     * @return Rewards claimed\n     */\n    function claimRewardsToSelf(address[] calldata assets, uint256 amount) external returns (uint256);\n\n    /**\n     * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\n     * @param user The address of the user\n     * @return The claimer address\n     */\n    function getClaimer(address user) external view returns (address);\n\n    /**\n     * @dev Returns the total of rewards of an user, already accrued + not yet accrued\n     * @param user The address of the user\n     * @return The rewards\n     */\n    function getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\n\n    /**\n     * @dev returns the unclaimed rewards of the user\n     * @param user the address of the user\n     * @return the unclaimed user rewards\n     */\n    function getUserUnclaimedRewards(address user) external view returns (uint256);\n\n    /**\n     * @dev for backward compatibility with previous implementation of the Incentives controller\n     */\n    function REWARD_TOKEN() external view returns (address); // solhint-disable-line func-name-mixedcase\n}\n"
    },
    "contracts/external/aave/interfaces/IStakedToken.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.13;\n\ninterface IStakedToken {\n\n    function stake(address to, uint256 amount) external;\n\n    function redeem(address to, uint256 amount) external;\n\n    function cooldown() external;\n\n    function claimRewards(address to, uint256 amount) external;\n}\n"
    },
    "contracts/external/aave/interfaces/IStakedTokenWithConfig.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.13;\n\nimport {IStakedToken} from \"./IStakedToken.sol\";\n\ninterface IStakedTokenWithConfig is IStakedToken {\n    function STAKED_TOKEN() external view returns(address); // solhint-disable-line func-name-mixedcase\n}\n"
    },
    "contracts/external/aave/lib/DistributionTypes.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.13;\n\nlibrary DistributionTypes {\n    struct AssetConfigInput {\n        uint104 emissionPerSecond;\n        uint256 totalStaked;\n        address underlyingAsset;\n    }\n\n    struct UserStakeInput {\n        address underlyingAsset;\n        uint256 stakedByUser;\n        uint256 totalStaked;\n    }\n}\n"
    },
    "contracts/external/dia/IDIAOracleV2.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\n/// @dev https://docs.diadata.org/documentation/oracle-documentation/access-the-oracle\ninterface IDIAOracleV2 {\n    function getValue(string memory key) external view returns (uint128 latestPrice, uint128 timestampOfLatestPrice);\n}\n"
    },
    "contracts/incentives/SiloIncentivesController.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {BaseIncentivesController} from \"../external/aave/incentives/base/BaseIncentivesController.sol\";\nimport \"../interfaces/INotificationReceiver.sol\";\n\n\n/**\n * @title SiloIncentivesController\n * @notice Distributor contract for rewards to the Aave protocol, using a staked token as rewards asset.\n * The contract stakes the rewards before redistributing them to the Aave protocol participants.\n * The reference staked token implementation is at https://github.com/aave/aave-stake-v2\n * @author Aave\n */\ncontract SiloIncentivesController is BaseIncentivesController, INotificationReceiver {\n    using SafeERC20 for IERC20;\n\n    constructor(IERC20 rewardToken, address emissionManager) BaseIncentivesController(rewardToken, emissionManager) {}\n\n    /**\n     * @dev Silo share token event handler\n     */\n    // this is NEVER executed if notification are off\n    function onAfterTransfer(address /* _token */, address _from, address _to, uint256 _amount) external {\n        if (assets[msg.sender].lastUpdateTimestamp == 0) {\n            // optimisation check, if we never configured rewards distribution, then no need for updating any data\n            return;\n        }\n\n        uint256 totalSupplyBefore = IERC20(msg.sender).totalSupply();\n\n        if (_from == address(0x0)) {\n            // we minting tokens, so supply before was less\n            // we safe, because this amount came from token, if token handle them we can handle as well\n            unchecked { totalSupplyBefore -= _amount; }\n        } else if (_to == address(0x0)) {\n            // we burning, so supply before was more\n            // we safe, because this amount came from token, if token handle them we can handle as well\n            unchecked { totalSupplyBefore += _amount; }\n        }\n\n        // here user either transferring token to someone else or burning tokens\n        // user state will be new, because this event is `onAfterTransfer`\n        // we need to recreate status before event in order to automatically calculate rewards\n        if (_from != address(0x0)) {\n            uint256 balanceBefore;\n            // we safe, because this amount came from token, if token handle them we can handle as well\n            unchecked { balanceBefore = IERC20(msg.sender).balanceOf(_from) + _amount; }\n            handleAction(_from, totalSupplyBefore, balanceBefore);\n        }\n\n        // we have to checkout also user `_to`\n        if (_to != address(0x0)) {\n            uint256 balanceBefore;\n            // we safe, because this amount came from token, if token handle them we can handle as well\n            unchecked { balanceBefore = IERC20(msg.sender).balanceOf(_to) - _amount; }\n            handleAction(_to, totalSupplyBefore, balanceBefore);\n        }\n    }\n\n    /// @dev it will transfer all balance of reward token to emission manager wallet\n    function rescueRewards() external onlyEmissionManager {\n        IERC20(REWARD_TOKEN).safeTransfer(msg.sender, IERC20(REWARD_TOKEN).balanceOf(address(this)));\n    }\n\n    function notificationReceiverPing() external pure returns (bytes4) {\n        return this.notificationReceiverPing.selector;\n    }\n\n    function _transferRewards(address to, uint256 amount) internal override {\n        IERC20(REWARD_TOKEN).safeTransfer(to, amount);\n    }\n\n    /**\n     * @dev in Silo, there is no scale, we simply using balance and total supply. Original method name is used here\n     * to keep as much of original code.\n     */\n    function _getScaledUserBalanceAndSupply(address _asset, address _user)\n        internal\n        virtual\n        view\n        override\n        returns (uint256 userBalance, uint256 totalSupply)\n    {\n        userBalance = IERC20(_asset).balanceOf(_user);\n        totalSupply = IERC20(_asset).totalSupply();\n    }\n}\n"
    },
    "contracts/InterestRateModelV2.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"./InterestRateModelXAI.sol\";\nimport \"./lib/EasyMathV2.sol\";\n\ninterface IGenericInterestRateModel {\n    function config(address _silo, address _asset) external view returns (IInterestRateModel.Config memory);\n}\n\n/// @title InterestRateModelV2\n/// @notice Dynamic interest rate model implementation\n/// @dev Model stores some Silo specific data. If model is replaced, it needs to set proper config after redeployment\n/// for seamless service. Please refer to separate litepaper about model for design details.\n/// @custom:security-contact security@silo.finance\ncontract InterestRateModelV2 is InterestRateModelXAI {\n    using SafeCast for int256;\n    using SafeCast for uint256;\n\n    constructor(Config memory _config, address _owner) InterestRateModelXAI(_config) {\n        if (_owner != address(0) && _owner != msg.sender) {\n            transferOwnership(_owner);\n        }\n    }\n\n    /// @dev migration method for models before InterestRateModelV2\n    /// @param _silos array of Silos addresses for which config will be cloned\n    /// @param _siloRepository SiloRepository addresses\n    function migrationFromV1(address[] calldata _silos, ISiloRepository _siloRepository)\n        external\n        virtual\n        onlyOwner\n    {\n        IInterestRateModel model;\n\n        for (uint256 i; i < _silos.length;) {\n            address[] memory assets = ISilo(_silos[i]).getAssets();\n\n            if (address(model) == address(0)) {\n                // assumption is that XAI is not first asset otherwise this optimisation will not work\n                model = _siloRepository.getInterestRateModel(_silos[0], assets[0]);\n            }\n\n            for (uint256 j; j < assets.length;) {\n                Config memory clonedConfig = IGenericInterestRateModel(address(model)).config(_silos[i], assets[j]);\n\n                if (clonedConfig.uopt == 0) {\n                    IInterestRateModel secondModel = _siloRepository.getInterestRateModel(_silos[i], assets[j]);\n                    clonedConfig = IGenericInterestRateModel(address(secondModel)).config(_silos[i], assets[j]);\n                }\n\n                // in order not to clone empty config, check `uopt` - based on requirements it can not be 0\n                if (clonedConfig.uopt != 0) {\n                    // beta is divided by value of 4 for all configs, except stableLowCap, stableHighCap and bridgeXAI\n                    // With current values of beta parameter, volatile assets will get their interest rate\n                    // (proportional term) multiplied by 2 in one hour. Division of beta coefficient by 4 will result\n                    // in changing time for to double from one hour to four hours, which will make the interest rate\n                    // model behaviour less risky,\n                    // If we will forget about integral term (which will have less impact in first hours of critical\n                    // utilisation), proportional term will grow linear. It will double in first 4 hours,\n                    // triple in 8, x4 in 12, etc.\n                    if (clonedConfig.beta == 277777777777778) {\n                        clonedConfig.beta = 69444444444444;\n                    }\n\n                    // when we `setConfig()` we call `accrueInterest()`\n                    // we don't have to do it when we cloning, because config will not change\n                    _setConfig(_silos[i], assets[j], clonedConfig);\n                }\n\n                unchecked { j++; }\n            }\n\n            unchecked { i++; }\n        }\n    }\n\n    /// @inheritdoc IInterestRateModel\n    function calculateCurrentInterestRate( // solhint-disable-line function-max-lines\n        Config memory _c,\n        uint256 _totalDeposits,\n        uint256 _totalBorrowAmount,\n        uint256 _interestRateTimestamp,\n        uint256 _blockTimestamp\n    ) public pure virtual override returns (uint256 rcur) {\n        if (_interestRateTimestamp > _blockTimestamp) revert InvalidTimestamps();\n\n        // struct for local vars to avoid \"Stack too deep\"\n        LocalVarsRCur memory _l = LocalVarsRCur(0,0,0,0,0,0,false);\n\n        (,,,_l.overflow) = calculateCompoundInterestRateWithOverflowDetection(\n            _c,\n            _totalDeposits,\n            _totalBorrowAmount,\n            _interestRateTimestamp,\n            _blockTimestamp\n        );\n\n        if (_l.overflow) {\n            return 0;\n        }\n\n        // There can't be an underflow in the subtraction because of the previous check\n        unchecked {\n            // T := t1 - t0 # length of time period in seconds\n            _l.T = (_blockTimestamp - _interestRateTimestamp).toInt256();\n        }\n\n        _l.u = EasyMathV2.calculateUtilization(DP, _totalDeposits, _totalBorrowAmount).toInt256();\n        _l.DP = int256(DP);\n\n        if (_l.u > _c.ucrit) {\n            // rp := kcrit *(1 + Tcrit + beta *T)*( u0 - ucrit )\n            _l.rp = _c.kcrit * (_l.DP + _c.Tcrit + _c.beta * _l.T) / _l.DP * (_l.u - _c.ucrit) / _l.DP;\n        } else {\n            // rp := min (0, klow * (u0 - ulow ))\n            _l.rp = _min(0, _c.klow * (_l.u - _c.ulow) / _l.DP);\n        }\n\n        // rlin := klin * u0 # lower bound between t0 and t1\n        _l.rlin = _c.klin * _l.u / _l.DP;\n        // ri := max(ri , rlin )\n        _l.ri = _max(_c.ri, _l.rlin);\n        // ri := max(ri + ki * (u0 - uopt ) * T, rlin )\n        _l.ri = _max(_l.ri + _c.ki * (_l.u - _c.uopt) * _l.T / _l.DP, _l.rlin);\n        // rcur := max (ri + rp , rlin ) # current per second interest rate\n        rcur = (_max(_l.ri + _l.rp, _l.rlin)).toUint256();\n        rcur *= 365 days;\n\n        return _currentInterestRateCAP(rcur);\n    }\n\n    /// @inheritdoc IInterestRateModel\n    function calculateCompoundInterestRateWithOverflowDetection( // solhint-disable-line function-max-lines\n        Config memory _c,\n        uint256 _totalDeposits,\n        uint256 _totalBorrowAmount,\n        uint256 _interestRateTimestamp,\n        uint256 _blockTimestamp\n    ) public pure virtual override returns (\n        uint256 rcomp,\n        int256 ri,\n        int256 Tcrit, // solhint-disable-line var-name-mixedcase\n        bool overflow\n    ) {\n        ri = _c.ri;\n        Tcrit = _c.Tcrit;\n\n        // struct for local vars to avoid \"Stack too deep\"\n        LocalVarsRComp memory _l = LocalVarsRComp(0,0,0,0,0,0,0,0,0,0);\n\n        if (_interestRateTimestamp > _blockTimestamp) revert InvalidTimestamps();\n\n        // There can't be an underflow in the subtraction because of the previous check\n        unchecked {\n            // length of time period in seconds\n            _l.T = (_blockTimestamp - _interestRateTimestamp).toInt256();\n        }\n\n        int256 _DP = int256(DP); // solhint-disable-line var-name-mixedcase\n\n        _l.u = EasyMathV2.calculateUtilization(DP, _totalDeposits, _totalBorrowAmount).toInt256();\n\n        // slopei := ki * (u0 - uopt )\n        _l.slopei = _c.ki * (_l.u - _c.uopt) / _DP;\n\n        if (_l.u > _c.ucrit) {\n            // rp := kcrit * (1 + Tcrit) * (u0 - ucrit )\n            _l.rp = _c.kcrit * (_DP + Tcrit) / _DP * (_l.u - _c.ucrit) / _DP;\n            // slope := slopei + kcrit * beta * (u0 - ucrit )\n            _l.slope = _l.slopei + _c.kcrit * _c.beta / _DP * (_l.u - _c.ucrit) / _DP;\n            // Tcrit := Tcrit + beta * T\n            Tcrit = Tcrit + _c.beta * _l.T;\n        } else {\n            // rp := min (0, klow * (u0 - ulow ))\n            _l.rp = _min(0, _c.klow * (_l.u - _c.ulow) / _DP);\n            // slope := slopei\n            _l.slope = _l.slopei;\n            // Tcrit := max (0, Tcrit - beta * T)\n            Tcrit = _max(0, Tcrit - _c.beta * _l.T);\n        }\n\n        // rlin := klin * u0 # lower bound between t0 and t1\n        _l.rlin = _c.klin * _l.u / _DP;\n        // ri := max(ri , rlin )\n        ri = _max(ri , _l.rlin);\n        // r0 := ri + rp # interest rate at t0 ignoring lower bound\n        _l.r0 = ri + _l.rp;\n        // r1 := r0 + slope *T # what interest rate would be at t1 ignoring lower bound\n        _l.r1 = _l.r0 + _l.slope * _l.T;\n\n        // Calculating the compound interest\n\n        if (_l.r0 >= _l.rlin && _l.r1 >= _l.rlin) {\n            // lower bound isn’t activated\n            // rcomp := exp (( r0 + r1) * T / 2) - 1\n            _l.x = (_l.r0 + _l.r1) * _l.T / 2;\n        } else if (_l.r0 < _l.rlin && _l.r1 < _l.rlin) {\n            // lower bound is active during the whole time\n            // rcomp := exp( rlin * T) - 1\n            _l.x = _l.rlin * _l.T;\n        } else if (_l.r0 >= _l.rlin && _l.r1 < _l.rlin) {\n            // lower bound is active after some time\n            // rcomp := exp( rlin *T - (r0 - rlin )^2/ slope /2) - 1\n            _l.x = _l.rlin * _l.T - (_l.r0 - _l.rlin)**2 / _l.slope / 2;\n        } else {\n            // lower bound is active before some time\n            // rcomp := exp( rlin *T + (r1 - rlin )^2/ slope /2) - 1\n            _l.x = _l.rlin * _l.T + (_l.r1 - _l.rlin)**2 / _l.slope / 2;\n        }\n\n        // ri := max(ri + slopei * T, rlin )\n        ri = _max(ri + _l.slopei * _l.T, _l.rlin);\n\n        // Checking for the overflow below. In case of the overflow, ri and Tcrit will be set back to zeros. Rcomp is\n        // calculated to not make an overflow in totalBorrowedAmount, totalDeposits.\n        (rcomp, overflow) = _calculateRComp(_totalDeposits, _totalBorrowAmount, _l.x);\n\n        // if we got a limit for rcomp, we reset Tcrit and Ri model parameters to zeros\n        // Resetting parameters will make IR drop from 10k%/year to 100% per year and it will start growing again.\n        // If we don’t reset, we will have to wait ~2 weeks to make IR drop (low utilisation ratio required).\n        // So zeroing parameters is a only hope for a market to get well again, otherwise it will be almost impossible.\n        bool capApplied;\n\n        (rcomp, capApplied) = _compoundInterestRateCAP(rcomp, _l.T.toUint256());\n\n        if (overflow || capApplied) {\n            ri = 0;\n            Tcrit = 0;\n        }\n    }\n\n    /// @dev in order to keep methods pure and bee able to deploy easily new caps,\n    /// that method with hardcoded CAP was created\n    /// @notice limit for compounding interest rcomp := RCOMP_CAP * _l.T.\n    /// The limit is simple. Let’s threat our interest rate model as the black box. And for past _l.T time we got\n    /// a value for rcomp. We need to provide the top limit this value to take into account the limit for current\n    /// interest. Let’s imagine, if we had maximum allowed interest for _l.T. `RCOMP_CAP * _l.T` will be the value of\n    /// rcomp in this case, which will serve as the limit.\n    /// If we got this limit, we should make Tcrit and Ri equal to zero, otherwise there is a low probability of the\n    /// market going back below the limit.\n    function _compoundInterestRateCAP(uint256 _rcomp, uint256 _t)\n        internal\n        pure\n        virtual\n        returns (uint256 updatedRcomp, bool capApplied) {\n        // uint256 cap = 10**20 / (365 * 24 * 3600); // this is per-second rate because _l.T is in seconds.\n        uint256 cap = 3170979198376 * _t;\n        return _rcomp > cap ? (cap, true) : (_rcomp, false);\n    }\n\n    /// @notice limit for rcur - RCUR_CAP (FE/integrations, does not affect our protocol).\n    /// This is the limit for current interest rate, we picked 10k% of interest per year. Interest rate model is working\n    /// as expected before that threshold and simply sets the maximum value in case of limit.\n    /// 10k% is a really significant threshold, which will mean the death of market in most of cases.\n    /// Before 10k% interest rate can be good for certain market conditions.\n    /// We don’t read the current interest rate in our protocol, because we care only about the interest we compounded\n    /// over the past time since the last update. It is used in UI and other protocols integrations,\n    /// for example investing strategies.\n    function _currentInterestRateCAP(uint256 _rcur) internal pure virtual returns (uint256) {\n        uint256 cap = 1e20; // 10**20; this is 10,000% APR in the 18-decimals format.\n        return _rcur > cap ? cap : _rcur;\n    }\n}\n"
    },
    "contracts/InterestRateModelXAI.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nimport \"./lib/PRBMathSD59x18.sol\";\nimport \"./lib/EasyMathV2.sol\";\nimport \"./interfaces/ISilo.sol\";\nimport \"./interfaces/IInterestRateModel.sol\";\nimport \"./utils/TwoStepOwnable.sol\";\n\n/// @title InterestRateModelXAI\n/// @notice Dynamic interest rate model implementation\n/// @dev Model stores some Silo specific data. If model is replaced, it needs to set proper config after redeployment\n/// for seamless service. Please refer to separate litepaper about model for design details.\n/// Difference between original `InterestRateModel` is that we made methods to be `virtual` and :\n///     if (_config.ki < 0) revert InvalidKi();  --- was ... <= 0\n//      if (_config.kcrit < 0) revert InvalidKcrit();  --- was ... <= 0\n/// @custom:security-contact security@silo.finance\nabstract contract InterestRateModelXAI is IInterestRateModel, TwoStepOwnable {\n    using PRBMathSD59x18 for int256;\n    using SafeCast for int256;\n    using SafeCast for uint256;\n\n    /// @dev DP is 18 decimal points used for integer calculations\n    uint256 public constant override DP = 1e18;\n\n    /// @dev maximum value of compound interest the model will return\n    uint256 public constant RCOMP_MAX = (2**16) * 1e18;\n\n    /// @dev maximum value of X for which, RCOMP_MAX should be returned. If x > X_MAX => exp(x) > RCOMP_MAX.\n    /// X_MAX = ln(RCOMP_MAX + 1)\n    int256 public constant X_MAX = 11090370147631773313;\n\n    /// @dev maximum allowed amount for accruedInterest, totalDeposits and totalBorrowedAmount\n    /// after adding compounded interest. If rcomp cause this values to overflow, rcomp is reduced.\n    /// 196 bits max allowed for an asset amounts because the multiplication product with\n    /// decimal points (10^18) should not cause an overflow. 196 < log2(2^256 / 10^18)\n    uint256 public constant ASSET_DATA_OVERFLOW_LIMIT = 2**196;\n\n    // Silo => asset => ModelData\n    mapping(address => mapping(address => Config)) public config;\n\n    /// @notice Emitted on config change\n    /// @param silo Silo address for which config should be set\n    /// @param asset asset address for which config should be set\n    /// @param config config struct for asset in Silo\n    event ConfigUpdate(address indexed silo, address indexed asset, Config config);\n\n    error InvalidBeta();\n    error InvalidKcrit();\n    error InvalidKi();\n    error InvalidKlin();\n    error InvalidKlow();\n    error InvalidTcrit();\n    error InvalidTimestamps();\n    error InvalidUcrit();\n    error InvalidUlow();\n    error InvalidUopt();\n    error InvalidRi();\n\n    constructor(Config memory _config) {\n        _setConfig(address(0), address(0), _config);\n    }\n\n    /// @inheritdoc IInterestRateModel\n    function setConfig(address _silo, address _asset, Config calldata _config) external virtual override onlyOwner {\n        // we do not care, if accrueInterest call will be successful\n        // solhint-disable-next-line avoid-low-level-calls\n        _silo.call(abi.encodeCall(ISilo.accrueInterest, _asset));\n\n        _setConfig(_silo, _asset, _config);\n    }\n\n    /// @inheritdoc IInterestRateModel\n    function getCompoundInterestRateAndUpdate(\n        address _asset,\n        uint256 _blockTimestamp\n    ) external virtual override returns (uint256 rcomp) {\n        // assume that caller is Silo\n        address silo = msg.sender;\n\n        ISilo.UtilizationData memory data = ISilo(silo).utilizationData(_asset);\n\n        // TODO when depositing, we doing two calls for `calculateCompoundInterestRate`, maybe we can optimize?\n        Config storage currentConfig = config[silo][_asset];\n\n        (rcomp, currentConfig.ri, currentConfig.Tcrit) = calculateCompoundInterestRate(\n            getConfig(silo, _asset),\n            data.totalDeposits,\n            data.totalBorrowAmount,\n            data.interestRateTimestamp,\n            _blockTimestamp\n        );\n    }\n\n    /// @inheritdoc IInterestRateModel\n    function getCompoundInterestRate(\n        address _silo,\n        address _asset,\n        uint256 _blockTimestamp\n    ) external view virtual override returns (uint256 rcomp) {\n        ISilo.UtilizationData memory data = ISilo(_silo).utilizationData(_asset);\n\n        (rcomp,,) = calculateCompoundInterestRate(\n            getConfig(_silo, _asset),\n            data.totalDeposits,\n            data.totalBorrowAmount,\n            data.interestRateTimestamp,\n            _blockTimestamp\n        );\n    }\n\n    /// @inheritdoc IInterestRateModel\n    function overflowDetected(\n        address _silo,\n        address _asset,\n        uint256 _blockTimestamp\n    ) external view virtual override returns (bool overflow) {\n        ISilo.UtilizationData memory data = ISilo(_silo).utilizationData(_asset);\n\n        (,,,overflow) = calculateCompoundInterestRateWithOverflowDetection(\n            getConfig(_silo, _asset),\n            data.totalDeposits,\n            data.totalBorrowAmount,\n            data.interestRateTimestamp,\n            _blockTimestamp\n        );\n    }\n\n    /// @inheritdoc IInterestRateModel\n    function getCurrentInterestRate(\n        address _silo,\n        address _asset,\n        uint256 _blockTimestamp\n    ) external view virtual override returns (uint256 rcur) {\n        ISilo.UtilizationData memory data = ISilo(_silo).utilizationData(_asset);\n\n        rcur = calculateCurrentInterestRate(\n            getConfig(_silo, _asset),\n            data.totalDeposits,\n            data.totalBorrowAmount,\n            data.interestRateTimestamp,\n            _blockTimestamp\n        );\n    }\n\n    /// @inheritdoc IInterestRateModel\n    function getConfig(address _silo, address _asset) public view virtual override returns (Config memory) {\n        Config storage currentConfig = config[_silo][_asset];\n\n        if (currentConfig.uopt != 0) {\n            return currentConfig;\n        }\n\n        // use default config\n        Config memory c = config[address(0)][address(0)];\n\n        // model data is always stored for each silo and asset so default values must be replaced\n        c.ri = currentConfig.ri;\n        c.Tcrit = currentConfig.Tcrit;\n        return c;\n    }\n\n    /* solhint-disable */\n\n    struct LocalVarsRCur {\n        int256 T;\n        int256 u;\n        int256 DP;\n        int256 rp;\n        int256 rlin;\n        int256 ri;\n        bool overflow;\n    }\n\n    /// @inheritdoc IInterestRateModel\n    function calculateCurrentInterestRate(\n        Config memory _c,\n        uint256 _totalDeposits,\n        uint256 _totalBorrowAmount,\n        uint256 _interestRateTimestamp,\n        uint256 _blockTimestamp\n    ) public pure virtual override returns (uint256 rcur) {\n        if (_interestRateTimestamp > _blockTimestamp) revert InvalidTimestamps();\n\n        // struct for local vars to avoid \"Stack too deep\"\n        LocalVarsRCur memory _l = LocalVarsRCur(0,0,0,0,0,0,false);\n\n        (,,,_l.overflow) = calculateCompoundInterestRateWithOverflowDetection(\n            _c,\n            _totalDeposits,\n            _totalBorrowAmount,\n            _interestRateTimestamp,\n            _blockTimestamp\n        );\n\n        if (_l.overflow) {\n            return 0;\n        }\n\n        // There can't be an underflow in the subtraction because of the previous check\n        unchecked {\n            // T := t1 - t0 # length of time period in seconds\n            _l.T = (_blockTimestamp - _interestRateTimestamp).toInt256();\n        }\n\n        _l.u = EasyMathV2.calculateUtilization(DP, _totalDeposits, _totalBorrowAmount).toInt256();\n        _l.DP = int256(DP);\n\n        if (_l.u > _c.ucrit) {\n            // rp := kcrit *(1 + Tcrit + beta *T)*( u0 - ucrit )\n            _l.rp = _c.kcrit * (_l.DP + _c.Tcrit + _c.beta * _l.T) / _l.DP * (_l.u - _c.ucrit) / _l.DP;\n        } else {\n            // rp := min (0, klow * (u0 - ulow ))\n            _l.rp = _min(0, _c.klow * (_l.u - _c.ulow) / _l.DP);\n        }\n\n        // rlin := klin * u0 # lower bound between t0 and t1\n        _l.rlin = _c.klin * _l.u / _l.DP;\n        // ri := max(ri , rlin )\n        _l.ri = _max(_c.ri, _l.rlin);\n        // ri := max(ri + ki * (u0 - uopt ) * T, rlin )\n        _l.ri = _max(_l.ri + _c.ki * (_l.u - _c.uopt) * _l.T / _l.DP, _l.rlin);\n        // rcur := max (ri + rp , rlin ) # current per second interest rate\n        rcur = (_max(_l.ri + _l.rp, _l.rlin)).toUint256();\n        rcur *= 365 days;\n    }\n\n    struct LocalVarsRComp {\n        int256 T;\n        int256 slopei;\n        int256 rp;\n        int256 slope;\n        int256 r0;\n        int256 rlin;\n        int256 r1;\n        int256 x;\n        int256 rlin1;\n        int256 u;\n    }\n\n    function interestRateModelPing() external pure virtual override returns (bytes4) {\n        return this.interestRateModelPing.selector;\n    }\n\n    /// @inheritdoc IInterestRateModel\n    function calculateCompoundInterestRate(\n        Config memory _c,\n        uint256 _totalDeposits,\n        uint256 _totalBorrowAmount,\n        uint256 _interestRateTimestamp,\n        uint256 _blockTimestamp\n    ) public pure virtual override returns (\n        uint256 rcomp,\n        int256 ri,\n        int256 Tcrit\n    ) {\n        (rcomp, ri, Tcrit,) = calculateCompoundInterestRateWithOverflowDetection(\n            _c,\n            _totalDeposits,\n            _totalBorrowAmount,\n            _interestRateTimestamp,\n            _blockTimestamp\n        );\n    }\n\n    /// @inheritdoc IInterestRateModel\n    function calculateCompoundInterestRateWithOverflowDetection(\n        Config memory _c,\n        uint256 _totalDeposits,\n        uint256 _totalBorrowAmount,\n        uint256 _interestRateTimestamp,\n        uint256 _blockTimestamp\n    ) public pure virtual override returns (\n        uint256 rcomp,\n        int256 ri,\n        int256 Tcrit,\n        bool overflow\n    ) {\n        ri = _c.ri;\n        Tcrit = _c.Tcrit;\n\n        // struct for local vars to avoid \"Stack too deep\"\n        LocalVarsRComp memory _l = LocalVarsRComp(0,0,0,0,0,0,0,0,0,0);\n\n        if (_interestRateTimestamp > _blockTimestamp) revert InvalidTimestamps();\n\n        // There can't be an underflow in the subtraction because of the previous check\n    unchecked {\n        // length of time period in seconds\n        _l.T = (_blockTimestamp - _interestRateTimestamp).toInt256();\n    }\n\n        int256 _DP = int256(DP);\n\n        _l.u = EasyMathV2.calculateUtilization(DP, _totalDeposits, _totalBorrowAmount).toInt256();\n\n        // slopei := ki * (u0 - uopt )\n        _l.slopei = _c.ki * (_l.u - _c.uopt) / _DP;\n\n        if (_l.u > _c.ucrit) {\n            // rp := kcrit * (1 + Tcrit) * (u0 - ucrit )\n            _l.rp = _c.kcrit * (_DP + Tcrit) / _DP * (_l.u - _c.ucrit) / _DP;\n            // slope := slopei + kcrit * beta * (u0 - ucrit )\n            _l.slope = _l.slopei + _c.kcrit * _c.beta / _DP * (_l.u - _c.ucrit) / _DP;\n            // Tcrit := Tcrit + beta * T\n            Tcrit = Tcrit + _c.beta * _l.T;\n        } else {\n            // rp := min (0, klow * (u0 - ulow ))\n            _l.rp = _min(0, _c.klow * (_l.u - _c.ulow) / _DP);\n            // slope := slopei\n            _l.slope = _l.slopei;\n            // Tcrit := max (0, Tcrit - beta * T)\n            Tcrit = _max(0, Tcrit - _c.beta * _l.T);\n        }\n\n        // rlin := klin * u0 # lower bound between t0 and t1\n        _l.rlin = _c.klin * _l.u / _DP;\n        // ri := max(ri , rlin )\n        ri = _max(ri , _l.rlin);\n        // r0 := ri + rp # interest rate at t0 ignoring lower bound\n        _l.r0 = ri + _l.rp;\n        // r1 := r0 + slope *T # what interest rate would be at t1 ignoring lower bound\n        _l.r1 = _l.r0 + _l.slope * _l.T;\n\n        // Calculating the compound interest\n\n        if (_l.r0 >= _l.rlin && _l.r1 >= _l.rlin) {\n            // lower bound isn’t activated\n            // rcomp := exp (( r0 + r1) * T / 2) - 1\n            _l.x = (_l.r0 + _l.r1) * _l.T / 2;\n        } else if (_l.r0 < _l.rlin && _l.r1 < _l.rlin) {\n            // lower bound is active during the whole time\n            // rcomp := exp( rlin * T) - 1\n            _l.x = _l.rlin * _l.T;\n        } else if (_l.r0 >= _l.rlin && _l.r1 < _l.rlin) {\n            // lower bound is active after some time\n            // rcomp := exp( rlin *T - (r0 - rlin )^2/ slope /2) - 1\n            _l.x = _l.rlin * _l.T - (_l.r0 - _l.rlin)**2 / _l.slope / 2;\n        } else {\n            // lower bound is active before some time\n            // rcomp := exp( rlin *T + (r1 - rlin )^2/ slope /2) - 1\n            _l.x = _l.rlin * _l.T + (_l.r1 - _l.rlin)**2 / _l.slope / 2;\n        }\n\n        // ri := max(ri + slopei * T, rlin )\n        ri = _max(ri + _l.slopei * _l.T, _l.rlin);\n\n        // Checking for the overflow below. In case of the overflow, ri and Tcrit will be set back to zeros. Rcomp is\n        // calculated to not make an overflow in totalBorrowedAmount, totalDeposits.\n        (rcomp, overflow) = _calculateRComp(_totalDeposits, _totalBorrowAmount, _l.x);\n\n        if (overflow) {\n            ri = 0;\n            Tcrit = 0;\n        }\n    }\n\n    /// @dev set config for silo and asset\n    function _setConfig(address _silo, address _asset, Config memory _config) internal virtual {\n        int256 _DP = int256(DP);\n\n        if (_config.uopt <= 0 || _config.uopt >= _DP) revert InvalidUopt();\n        if (_config.ucrit <= _config.uopt || _config.ucrit >= _DP) revert InvalidUcrit();\n        if (_config.ulow <= 0 || _config.ulow >= _config.uopt) revert InvalidUlow();\n        if (_config.ki < 0) revert InvalidKi();\n        if (_config.kcrit < 0) revert InvalidKcrit();\n        if (_config.klow < 0) revert InvalidKlow();\n        if (_config.klin < 0) revert InvalidKlin();\n        if (_config.beta < 0) revert InvalidBeta();\n        if (_config.ri < 0) revert InvalidRi();\n        if (_config.Tcrit < 0) revert InvalidTcrit();\n\n        config[_silo][_asset] = _config;\n        emit ConfigUpdate(_silo, _asset, _config);\n    }\n\n    /* solhint-enable */\n\n    /// @dev checks for the overflow in rcomp calculations, accruedInterest, totalDeposits and totalBorrowedAmount.\n    /// In case of the overflow, rcomp is reduced to make totalDeposits and totalBorrowedAmount <= 2**196.\n    function _calculateRComp(\n        uint256 _totalDeposits,\n        uint256 _totalBorrowAmount,\n        int256 _x\n    ) internal pure virtual returns (uint256 rcomp, bool overflow) {\n        int256 rcompSigned;\n\n        if (_x >= X_MAX) {\n            rcomp = RCOMP_MAX;\n            // overflow, but not return now. It counts as an overflow to reset model parameters,\n            // but later on we can get overflow worse.\n            overflow = true;\n        } else {\n            rcompSigned = _x.exp() - int256(DP);\n            rcomp = rcompSigned > 0 ? rcompSigned.toUint256() : 0;\n        }\n\n        unchecked {\n            // maxAmount = max(_totalDeposits, _totalBorrowAmount) to see\n            // if any of this variables overflow in result.\n            uint256 maxAmount = _totalDeposits > _totalBorrowAmount ? _totalDeposits : _totalBorrowAmount;\n\n            if (maxAmount >= ASSET_DATA_OVERFLOW_LIMIT) {\n                return (0, true);\n            }\n\n            uint256 rcompMulTBA = rcomp * _totalBorrowAmount;\n\n            if (rcompMulTBA == 0) {\n                return (rcomp, overflow);\n            }\n\n            if (\n                rcompMulTBA / rcomp != _totalBorrowAmount ||\n                rcompMulTBA / DP > ASSET_DATA_OVERFLOW_LIMIT - maxAmount\n            ) {\n                rcomp = (ASSET_DATA_OVERFLOW_LIMIT - maxAmount) * DP / _totalBorrowAmount;\n\n                return (rcomp, true);\n            }\n        }\n    }\n\n    /// @dev Returns the largest of two numbers\n    function _max(int256 a, int256 b) internal pure virtual returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /// @dev Returns the smallest of two numbers\n    function _min(int256 a, int256 b) internal pure virtual returns (int256) {\n        return a < b ? a : b;\n    }\n}\n"
    },
    "contracts/interfaces/IBaseSilo.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"./IShareToken.sol\";\nimport \"./IFlashLiquidationReceiver.sol\";\nimport \"./ISiloRepository.sol\";\n\ninterface IBaseSilo {\n    enum AssetStatus { Undefined, Active, Removed }\n\n    /// @dev Storage struct that holds all required data for a single token market\n    struct AssetStorage {\n        /// @dev Token that represents a share in totalDeposits of Silo\n        IShareToken collateralToken;\n        /// @dev Token that represents a share in collateralOnlyDeposits of Silo\n        IShareToken collateralOnlyToken;\n        /// @dev Token that represents a share in totalBorrowAmount of Silo\n        IShareToken debtToken;\n        /// @dev COLLATERAL: Amount of asset token that has been deposited to Silo with interest earned by depositors.\n        /// It also includes token amount that has been borrowed.\n        uint256 totalDeposits;\n        /// @dev COLLATERAL ONLY: Amount of asset token that has been deposited to Silo that can be ONLY used\n        /// as collateral. These deposits do NOT earn interest and CANNOT be borrowed.\n        uint256 collateralOnlyDeposits;\n        /// @dev DEBT: Amount of asset token that has been borrowed with accrued interest.\n        uint256 totalBorrowAmount;\n    }\n\n    /// @dev Storage struct that holds data related to fees and interest\n    struct AssetInterestData {\n        /// @dev Total amount of already harvested protocol fees\n        uint256 harvestedProtocolFees;\n        /// @dev Total amount (ever growing) of asset token that has been earned by the protocol from\n        /// generated interest.\n        uint256 protocolFees;\n        /// @dev Timestamp of the last time `interestRate` has been updated in storage.\n        uint64 interestRateTimestamp;\n        /// @dev True if asset was removed from the protocol. If so, deposit and borrow functions are disabled\n        /// for that asset\n        AssetStatus status;\n    }\n\n    /// @notice data that InterestModel needs for calculations\n    struct UtilizationData {\n        uint256 totalDeposits;\n        uint256 totalBorrowAmount;\n        /// @dev timestamp of last interest accrual\n        uint64 interestRateTimestamp;\n    }\n\n    /// @dev Shares names and symbols that are generated while asset initialization\n    struct AssetSharesMetadata {\n        /// @dev Name for the collateral shares token\n        string collateralName;\n        /// @dev Symbol for the collateral shares token\n        string collateralSymbol;\n        /// @dev Name for the collateral only (protected collateral) shares token\n        string protectedName;\n        /// @dev Symbol for the collateral only (protected collateral) shares token\n        string protectedSymbol;\n        /// @dev Name for the debt shares token\n        string debtName;\n        /// @dev Symbol for the debt shares token\n        string debtSymbol;\n    }\n\n    /// @notice Emitted when deposit is made\n    /// @param asset asset address that was deposited\n    /// @param depositor wallet address that deposited asset\n    /// @param amount amount of asset that was deposited\n    /// @param collateralOnly type of deposit, true if collateralOnly deposit was used\n    event Deposit(address indexed asset, address indexed depositor, uint256 amount, bool collateralOnly);\n\n    /// @notice Emitted when withdraw is made\n    /// @param asset asset address that was withdrawn\n    /// @param depositor wallet address that deposited asset\n    /// @param receiver wallet address that received asset\n    /// @param amount amount of asset that was withdrew\n    /// @param collateralOnly type of withdraw, true if collateralOnly deposit was used\n    event Withdraw(\n        address indexed asset,\n        address indexed depositor,\n        address indexed receiver,\n        uint256 amount,\n        bool collateralOnly\n    );\n\n    /// @notice Emitted on asset borrow\n    /// @param asset asset address that was borrowed\n    /// @param user wallet address that borrowed asset\n    /// @param amount amount of asset that was borrowed\n    event Borrow(address indexed asset, address indexed user, uint256 amount);\n\n    /// @notice Emitted on asset repay\n    /// @param asset asset address that was repaid\n    /// @param user wallet address that repaid asset\n    /// @param amount amount of asset that was repaid\n    event Repay(address indexed asset, address indexed user, uint256 amount);\n\n    /// @notice Emitted on user liquidation\n    /// @param asset asset address that was liquidated\n    /// @param user wallet address that was liquidated\n    /// @param shareAmountRepaid amount of collateral-share token that was repaid. This is collateral token representing\n    /// ownership of underlying deposit.\n    /// @param seizedCollateral amount of underlying token that was seized by liquidator\n    event Liquidate(address indexed asset, address indexed user, uint256 shareAmountRepaid, uint256 seizedCollateral);\n\n    /// @notice Emitted when the status for an asset is updated\n    /// @param asset asset address that was updated\n    /// @param status new asset status\n    event AssetStatusUpdate(address indexed asset, AssetStatus indexed status);\n\n    /// @return version of the silo contract\n    function VERSION() external returns (uint128); // solhint-disable-line func-name-mixedcase\n\n    /// @notice Synchronize current bridge assets with Silo\n    /// @dev This function needs to be called on Silo deployment to setup all assets for Silo. It needs to be\n    /// called every time a bridged asset is added or removed. When bridge asset is removed, depositing and borrowing\n    /// should be disabled during asset sync.\n    function syncBridgeAssets() external;\n\n    /// @notice Get Silo Repository contract address\n    /// @return Silo Repository contract address\n    function siloRepository() external view returns (ISiloRepository);\n\n    /// @notice Get asset storage data\n    /// @param _asset asset address\n    /// @return AssetStorage struct\n    function assetStorage(address _asset) external view returns (AssetStorage memory);\n\n    /// @notice Get asset interest data\n    /// @param _asset asset address\n    /// @return AssetInterestData struct\n    function interestData(address _asset) external view returns (AssetInterestData memory);\n\n    /// @dev helper method for InterestRateModel calculations\n    function utilizationData(address _asset) external view returns (UtilizationData memory data);\n\n    /// @notice Calculates solvency of an account\n    /// @param _user wallet address for which solvency is calculated\n    /// @return true if solvent, false otherwise\n    function isSolvent(address _user) external view returns (bool);\n\n    /// @notice Returns all initialized (synced) assets of Silo including current and removed bridge assets\n    /// @return assets array of initialized assets of Silo\n    function getAssets() external view returns (address[] memory assets);\n\n    /// @notice Returns all initialized (synced) assets of Silo including current and removed bridge assets\n    /// with corresponding state\n    /// @return assets array of initialized assets of Silo\n    /// @return assetsStorage array of assets state corresponding to `assets` array\n    function getAssetsWithState() external view returns (address[] memory assets, AssetStorage[] memory assetsStorage);\n\n    /// @notice Check if depositing an asset for given account is possible\n    /// @dev Depositing an asset that has been already borrowed (and vice versa) is disallowed\n    /// @param _asset asset we want to deposit\n    /// @param _depositor depositor address\n    /// @return true if asset can be deposited by depositor\n    function depositPossible(address _asset, address _depositor) external view returns (bool);\n\n    /// @notice Check if borrowing an asset for given account is possible\n    /// @dev Borrowing an asset that has been already deposited (and vice versa) is disallowed\n    /// @param _asset asset we want to deposit\n    /// @param _borrower borrower address\n    /// @return true if asset can be borrowed by borrower\n    function borrowPossible(address _asset, address _borrower) external view returns (bool);\n\n    /// @dev Amount of token that is available for borrowing\n    /// @param _asset asset to get liquidity for\n    /// @return Silo liquidity\n    function liquidity(address _asset) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IConvexBoosterLike.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\ninterface IConvexBoosterLike {\n    struct PoolInfo {\n        address lptoken;\n        address token;\n        address gauge;\n        address crvRewards;\n        address stash;\n        bool shutdown;\n    }\n\n    function poolInfo(uint256 pid) external view returns (PoolInfo memory);\n    function poolLength() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IConvexSiloWrapper.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.6.12 <=0.8.13; // solhint-disable-line compiler-version\n\ninterface IConvexSiloWrapper {\n    /// @dev Function to checkpoint single user rewards. This function has the same use case as the `user_checkpoint`\n    ///     in `ConvexStakingWrapper` and implemented to match the `IConvexSiloWrapper` interface.\n    /// @param _account address\n    function checkpointSingle(address _account) external;\n\n    /// @dev Function to checkpoint pair of users rewards. This function must be used to checkpoint collateral transfer.\n    /// @param _from sender address\n    /// @param _to recipient address\n    function checkpointPair(address _from, address _to) external;\n\n    /// @notice wrap underlying tokens\n    /// @param _amount of underlying token to wrap\n    /// @param _to receiver of the wrapped tokens\n    function deposit(uint256 _amount, address _to) external;\n\n    /// @dev initializeSiloWrapper executes parent `initialize` function, transfers ownership to Silo DAO,\n    ///     changes token name and symbol. After `initializeSiloWrapper` execution, execution of the parent `initialize`\n    ///     function is not possible. This function must be called by `ConvexSiloWrapperFactory` in the same\n    ///     transaction with the deployment of this contract. If the parent `initialize` function was already executed\n    ///     for some reason, call to `initialize` is skipped.\n    /// @param _poolId the Curve pool id in the Convex Booster.\n    function initializeSiloWrapper(uint256 _poolId) external;\n\n    /// @notice unwrap and receive underlying tokens\n    /// @param _amount of tokens to unwrap\n    function withdrawAndUnwrap(uint256 _amount) external;\n\n    /// @dev Function to init or update Silo address. Saves the history of deprecated Silos and routers to not take it\n    ///     into account for rewards calculation. Reverts if the first Silo is not created yet. Note, that syncSilo\n    ///     updates collateral vault and it can cause the unclaimed and not checkpointed rewards to be lost in\n    ///     deprecated Silos. This behaviour is intended. Taking into account deprecated Silos shares for rewards\n    ///     calculations will significantly increase the gas costs for all interactions with Convex Silo. Users should\n    ///     claim rewards before the Silo is replaced. Note that replacing Silo is improbable scenario and must be done\n    ///     by the DAO only in very specific cases.\n    function syncSilo() external;\n\n    /// @dev Function to get underlying curveLP token address. Created for a better naming,\n    ///     the `curveToken` inherited variable name can be misleading.\n    function underlyingToken() external view returns (address);\n}\n"
    },
    "contracts/interfaces/IConvexSiloWrapperFactory.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.6.12 <=0.8.13; // solhint-disable-line compiler-version\n\ninterface IConvexSiloWrapperFactory {\n    /// @dev Deploys ConvexSiloWrapper. This function is permissionless, ownership of a new token\n    ///     is transferred to the Silo DAO by calling `initializeSiloWrapper`.\n    /// @param _poolId the Curve pool id in the Convex Booster. Curve LP token will be the underlying\n    ///     token of a wrapper.\n    /// @return wrapper is an address of deployed ConvexSiloWrapper\n    function createConvexSiloWrapper(uint256 _poolId) external returns (address wrapper);\n\n    /// @dev Get deployed ConvexSiloWrapper by Curve poolId. We don't allow duplicates for the same poolId.\n    /// @param _poolId the Curve pool id in the Convex Booster\n    function deployedWrappers(uint256 _poolId) external view returns (address);\n\n    /// @dev Check if an address is a ConvexSiloWrapper.\n    /// @param _wrapper address to check.\n    function isWrapper(address _wrapper) external view returns (bool);\n\n    /// @dev Ping library function for ConvexSiloWrapperFactory.\n    function convexSiloWrapperFactoryPing() external pure returns (bytes4);\n}\n"
    },
    "contracts/interfaces/IERC20R.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/// @dev This interface stands for \"ERC20 Reversed\",\n/// in the sense that the recipient of a transfer needs to approve the transfer amount first\ninterface IERC20R is IERC20 {\n    /// @dev Emitted when the allowance of a `_receiver` for an `_owner` is set by\n    /// a call to {changeReceiveApproval}. `value` is the new allowance.\n    /// @param _owner previous owner of the debt\n    /// @param _receiver wallet that received debt\n    /// @param _value amount of token transferred\n    event ReceiveApproval(address indexed _owner, address indexed _receiver, uint256 _value);\n\n    /// @dev Atomically decreases the receive allowance granted to `owner` by the caller.\n    /// This is an alternative to {receive approve} that can be used as a mitigation for problems\n    /// described in {IERC20-approve}.\n    /// Emits an {ReceiveApproval} event indicating the updated receive allowance.\n    /// @param _owner owner of debt token that is being allowed sending it to the caller\n    /// @param _subtractedValue amount of token to decrease allowance\n    function decreaseReceiveAllowance(address _owner, uint256 _subtractedValue) external;\n\n    /// @dev Atomically increases the receive allowance granted to `owner` by the caller.\n    /// This is an alternative to {receive approve} that can be used as a mitigation for problems\n    /// described in {IERC20-approve}.\n    /// Emits an {ReceiveApproval} event indicating the updated receive allowance.\n    /// @param _owner owner of debt token that is being allowed sending it to the caller\n    /// @param _addedValue amount of token to increase allowance\n    function increaseReceiveAllowance(address _owner, uint256 _addedValue) external;\n\n    /// @dev Sets `_amount` as the allowance of `spender` over the caller's tokens.\n    /// Returns a boolean value indicating whether the operation succeeded.\n    /// IMPORTANT: Beware that changing an allowance with this method brings the risk\n    /// that someone may use both the old and the new allowance by unfortunate\n    /// transaction ordering. One possible solution to mitigate this race\n    /// condition is to first reduce the spender's allowance to 0 and set the\n    /// desired value afterwards:\n    /// https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    /// OR use increase/decrease approval method instead.\n    /// Emits an {ReceiveApproval} event.\n    /// @param _owner owner of debt token that is being allowed sending it to the caller\n    /// @param _amount amount of token allowance\n    function setReceiveApproval(address _owner, uint256 _amount) external;\n\n    /// @dev Returns the remaining number of tokens that `_owner` is allowed to send to `_receiver`\n    /// through {transferFrom}. This is zero by default.\n    /// @param _owner owner of debt token\n    /// @param _receiver wallet that is receiving debt tokens\n    /// @return current token allowance\n    function receiveAllowance(address _owner, address _receiver) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IFlashLiquidationReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\n/// @dev when performing Silo flash liquidation, FlashReceiver contract will receive all collaterals\ninterface IFlashLiquidationReceiver {\n    /// @dev this method is called when doing Silo flash liquidation\n    ///         one can NOT assume, that if _seizedCollateral[i] != 0, then _shareAmountsToRepaid[i] must be 0\n    ///         one should assume, that any combination of amounts is possible\n    ///         on callback, one must call `Silo.repayFor` because at the end of transaction,\n    ///         Silo will check if borrower is solvent.\n    /// @param _user user address, that is liquidated\n    /// @param _assets array of collateral assets received during user liquidation\n    ///         this array contains all assets (collateral borrowed) without any order\n    /// @param _receivedCollaterals array of collateral amounts received during user liquidation\n    ///         indexes of amounts are related to `_assets`,\n    /// @param _shareAmountsToRepaid array of amounts to repay for each asset\n    ///         indexes of amounts are related to `_assets`,\n    /// @param _flashReceiverData data that are passed from sender that executes liquidation\n    function siloLiquidationCallback(\n        address _user,\n        address[] calldata _assets,\n        uint256[] calldata _receivedCollaterals,\n        uint256[] calldata _shareAmountsToRepaid,\n        bytes memory _flashReceiverData\n    ) external;\n}\n"
    },
    "contracts/interfaces/IGuardedLaunch.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\ninterface IGuardedLaunch {\n    /// @dev Stores info about maximum allowed liquidity in a Silo. This limit applies to deposit only.\n    struct MaxLiquidityLimit {\n        /// @dev flag to turn on/off all limits for all Silos\n        bool globalLimit;\n        /// @dev default value represents maximum allowed liquidity in Silo\n        uint256 defaultMaxLiquidity;\n        /// @notice siloMaxLiquidity maps silo => asset => maximum allowed deposit liquidity.\n        /// @dev Deposit liquidity limit is denominated in quote token. For example, if set to 1e18, it means that any\n        /// given Silo is allowed for deposits up to 1 quote token of value. Value is calculated using prices from the\n        /// Oracle.\n        mapping(address => mapping(address => uint256)) siloMaxLiquidity;\n    }\n\n    /// @dev Stores info about paused Silos\n    /// if `globalPause` == `true`, all Silo are paused\n    /// if `globalPause` == `false` and `siloPause[silo][0x0]` == `true`, all assets in a `silo` are paused\n    /// if `globalPause` == `false` and `siloPause[silo][asset]` == `true`, only `asset` in a `silo` is paused\n    struct Paused {\n        bool globalPause;\n        /// @dev maps silo address to asset address to bool\n        mapping(address => mapping(address => bool)) siloPause;\n    }\n\n    /// @notice Emitted when all Silos are paused or unpaused\n    /// @param globalPause current value of `globalPause`\n    event GlobalPause(bool globalPause);\n\n    /// @notice Emitted when a single Silo or single asset in a Silo is paused or unpaused\n    /// @param silo address of Silo which is paused\n    /// @param asset address of an asset which is paused\n    /// @param pauseValue true when paused, otherwise false\n    event SiloPause(address silo, address asset, bool pauseValue);\n\n    /// @notice Emitted when max liquidity toggle is switched\n    /// @param newLimitedMaxLiquidityState new value for max liquidity toggle\n    event LimitedMaxLiquidityToggled(bool newLimitedMaxLiquidityState);\n\n    /// @notice Emitted when deposit liquidity limit is changed for Silo and asset\n    /// @param silo Silo address for which to set limit\n    /// @param asset Silo asset for which to set limit\n    /// @param newMaxDeposits deposit limit amount in quote token\n    event SiloMaxDepositsLimitsUpdate(address indexed silo, address indexed asset, uint256 newMaxDeposits);\n\n    /// @notice Emitted when default max liquidity limit is changed\n    /// @param newMaxDeposits new deposit limit in quote token\n    event DefaultSiloMaxDepositsLimitUpdate(uint256 newMaxDeposits);\n\n    /// @notice Sets limited liquidity to provided value\n    function setLimitedMaxLiquidity(bool _globalLimit) external;\n\n    /// @notice Sets default deposit limit for all Silos\n    /// @param _maxDeposits deposit limit amount in quote token\n    function setDefaultSiloMaxDepositsLimit(uint256 _maxDeposits) external;\n\n    /// @notice Sets deposit limit for Silo\n    /// @param _silo Silo address for which to set limit\n    /// @param _asset Silo asset for which to set limit\n    /// @param _maxDeposits deposit limit amount in quote token\n    function setSiloMaxDepositsLimit(\n        address _silo,\n        address _asset,\n        uint256 _maxDeposits\n    ) external;\n\n    /// @notice Pause all Silos\n    /// @dev Callable only by owner.\n    /// @param _globalPause true to pause all Silos, otherwise false\n    function setGlobalPause(bool _globalPause) external;\n\n    /// @notice Pause single asset in a single Silo\n    /// @dev Callable only by owner.\n    /// @param _silo address of Silo in which `_asset` is being paused\n    /// @param _asset address of an asset that is being paused\n    /// @param _pauseValue true to pause, false to unpause\n    function setSiloPause(address _silo, address _asset, bool _pauseValue) external;\n\n    /// @notice Check given asset in a Silo is paused\n    /// @param _silo address of Silo\n    /// @param _asset address of an asset\n    /// @return true if given asset in a Silo is paused, otherwise false\n    function isSiloPaused(address _silo, address _asset) external view returns (bool);\n\n    /// @notice Gets deposit limit for Silo\n    /// @param _silo Silo address for which to set limit\n    /// @param _asset Silo asset for which to set limit\n    /// @return deposit limit for Silo\n    function getMaxSiloDepositsValue(address _silo, address _asset) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IInterestRateModel.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\ninterface IInterestRateModel {\n    /* solhint-disable */\n    struct Config {\n        // uopt ∈ (0, 1) – optimal utilization;\n        int256 uopt;\n        // ucrit ∈ (uopt, 1) – threshold of large utilization;\n        int256 ucrit;\n        // ulow ∈ (0, uopt) – threshold of low utilization\n        int256 ulow;\n        // ki > 0 – integrator gain\n        int256 ki;\n        // kcrit > 0 – proportional gain for large utilization\n        int256 kcrit;\n        // klow ≥ 0 – proportional gain for low utilization\n        int256 klow;\n        // klin ≥ 0 – coefficient of the lower linear bound\n        int256 klin;\n        // beta ≥ 0 - a scaling factor\n        int256 beta;\n        // ri ≥ 0 – initial value of the integrator\n        int256 ri;\n        // Tcrit ≥ 0 - the time during which the utilization exceeds the critical value\n        int256 Tcrit;\n    }\n    /* solhint-enable */\n\n    /// @dev Set dedicated config for given asset in a Silo. Config is per asset per Silo so different assets\n    /// in different Silo can have different configs.\n    /// It will try to call `_silo.accrueInterest(_asset)` before updating config, but it is not guaranteed,\n    /// that this call will be successful, if it fail config will be set anyway.\n    /// @param _silo Silo address for which config should be set\n    /// @param _asset asset address for which config should be set\n    function setConfig(address _silo, address _asset, Config calldata _config) external;\n\n    /// @dev get compound interest rate and update model storage\n    /// @param _asset address of an asset in Silo for which interest rate should be calculated\n    /// @param _blockTimestamp current block timestamp\n    /// @return rcomp compounded interest rate from last update until now (1e18 == 100%)\n    function getCompoundInterestRateAndUpdate(\n        address _asset,\n        uint256 _blockTimestamp\n    ) external returns (uint256 rcomp);\n\n    /// @dev Get config for given asset in a Silo. If dedicated config is not set, default one will be returned.\n    /// @param _silo Silo address for which config should be set\n    /// @param _asset asset address for which config should be set\n    /// @return Config struct for asset in Silo\n    function getConfig(address _silo, address _asset) external view returns (Config memory);\n\n    /// @dev get compound interest rate\n    /// @param _silo address of Silo\n    /// @param _asset address of an asset in Silo for which interest rate should be calculated\n    /// @param _blockTimestamp current block timestamp\n    /// @return rcomp compounded interest rate from last update until now (1e18 == 100%)\n    function getCompoundInterestRate(\n        address _silo,\n        address _asset,\n        uint256 _blockTimestamp\n    ) external view returns (uint256 rcomp);\n\n    /// @dev get current annual interest rate\n    /// @param _silo address of Silo\n    /// @param _asset address of an asset in Silo for which interest rate should be calculated\n    /// @param _blockTimestamp current block timestamp\n    /// @return rcur current annual interest rate (1e18 == 100%)\n    function getCurrentInterestRate(\n        address _silo,\n        address _asset,\n        uint256 _blockTimestamp\n    ) external view returns (uint256 rcur);\n\n    /// @notice get the flag to detect rcomp restriction (zero current interest) due to overflow\n    /// overflow boolean flag to detect rcomp restriction\n    function overflowDetected(\n        address _silo,\n        address _asset,\n        uint256 _blockTimestamp\n    ) external view returns (bool overflow);\n\n    /// @dev pure function that calculates current annual interest rate\n    /// @param _c configuration object, InterestRateModel.Config\n    /// @param _totalBorrowAmount current total borrows for asset\n    /// @param _totalDeposits current total deposits for asset\n    /// @param _interestRateTimestamp timestamp of last interest rate update\n    /// @param _blockTimestamp current block timestamp\n    /// @return rcur current annual interest rate (1e18 == 100%)\n    function calculateCurrentInterestRate(\n        Config memory _c,\n        uint256 _totalDeposits,\n        uint256 _totalBorrowAmount,\n        uint256 _interestRateTimestamp,\n        uint256 _blockTimestamp\n    ) external pure returns (uint256 rcur);\n\n    /// @dev pure function that calculates interest rate based on raw input data\n    /// @param _c configuration object, InterestRateModel.Config\n    /// @param _totalBorrowAmount current total borrows for asset\n    /// @param _totalDeposits current total deposits for asset\n    /// @param _interestRateTimestamp timestamp of last interest rate update\n    /// @param _blockTimestamp current block timestamp\n    /// @return rcomp compounded interest rate from last update until now (1e18 == 100%)\n    /// @return ri current integral part of the rate\n    /// @return Tcrit time during which the utilization exceeds the critical value\n    /// @return overflow boolean flag to detect rcomp restriction\n    function calculateCompoundInterestRateWithOverflowDetection(\n        Config memory _c,\n        uint256 _totalDeposits,\n        uint256 _totalBorrowAmount,\n        uint256 _interestRateTimestamp,\n        uint256 _blockTimestamp\n    ) external pure returns (\n        uint256 rcomp,\n        int256 ri,\n        int256 Tcrit, // solhint-disable-line var-name-mixedcase\n        bool overflow\n    );\n\n    /// @dev pure function that calculates interest rate based on raw input data\n    /// @param _c configuration object, InterestRateModel.Config\n    /// @param _totalBorrowAmount current total borrows for asset\n    /// @param _totalDeposits current total deposits for asset\n    /// @param _interestRateTimestamp timestamp of last interest rate update\n    /// @param _blockTimestamp current block timestamp\n    /// @return rcomp compounded interest rate from last update until now (1e18 == 100%)\n    /// @return ri current integral part of the rate\n    /// @return Tcrit time during which the utilization exceeds the critical value\n    function calculateCompoundInterestRate(\n        Config memory _c,\n        uint256 _totalDeposits,\n        uint256 _totalBorrowAmount,\n        uint256 _interestRateTimestamp,\n        uint256 _blockTimestamp\n    ) external pure returns (\n        uint256 rcomp,\n        int256 ri,\n        int256 Tcrit // solhint-disable-line var-name-mixedcase\n    );\n\n    /// @dev returns decimal points used by model\n    function DP() external pure returns (uint256); // solhint-disable-line func-name-mixedcase\n\n    /// @dev just a helper method to see if address is a InterestRateModel\n    /// @return always true\n    function interestRateModelPing() external pure returns (bytes4);\n}\n"
    },
    "contracts/interfaces/INotificationReceiver.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\n/// @title Common interface for Silo Incentive Contract\ninterface INotificationReceiver {\n    /// @dev Informs the contract about token transfer\n    /// @param _token address of the token that was transferred\n    /// @param _from sender\n    /// @param _to receiver\n    /// @param _amount amount that was transferred\n    function onAfterTransfer(address _token, address _from, address _to, uint256 _amount) external;\n\n    /// @dev Sanity check function\n    /// @return always true\n    function notificationReceiverPing() external pure returns (bytes4);\n}\n"
    },
    "contracts/interfaces/IPriceProvider.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.7.6 <0.9.0;\n\n/// @title Common interface for Silo Price Providers\ninterface IPriceProvider {\n    /// @notice Returns \"Time-Weighted Average Price\" for an asset. Calculates TWAP price for quote/asset.\n    /// It unifies all tokens decimal to 18, examples:\n    /// - if asses == quote it returns 1e18\n    /// - if asset is USDC and quote is ETH and ETH costs ~$3300 then it returns ~0.0003e18 WETH per 1 USDC\n    /// @param _asset address of an asset for which to read price\n    /// @return price of asses with 18 decimals, throws when pool is not ready yet to provide price\n    function getPrice(address _asset) external view returns (uint256 price);\n\n    /// @dev Informs if PriceProvider is setup for asset. It does not means PriceProvider can provide price right away.\n    /// Some providers implementations need time to \"build\" buffer for TWAP price,\n    /// so price may not be available yet but this method will return true.\n    /// @param _asset asset in question\n    /// @return TRUE if asset has been setup, otherwise false\n    function assetSupported(address _asset) external view returns (bool);\n\n    /// @notice Gets token address in which prices are quoted\n    /// @return quoteToken address\n    function quoteToken() external view returns (address);\n\n    /// @notice Helper method that allows easily detects, if contract is PriceProvider\n    /// @dev this can save us from simple human errors, in case we use invalid address\n    /// but this should NOT be treated as security check\n    /// @return always true\n    function priceProviderPing() external pure returns (bytes4);\n}\n"
    },
    "contracts/interfaces/IPriceProvidersRepository.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.7.6 <0.9.0;\n\nimport \"./IPriceProvider.sol\";\n\ninterface IPriceProvidersRepository {\n    /// @notice Emitted when price provider is added\n    /// @param newPriceProvider new price provider address\n    event NewPriceProvider(IPriceProvider indexed newPriceProvider);\n\n    /// @notice Emitted when price provider is removed\n    /// @param priceProvider removed price provider address\n    event PriceProviderRemoved(IPriceProvider indexed priceProvider);\n\n    /// @notice Emitted when asset is assigned to price provider\n    /// @param asset assigned asset   address\n    /// @param priceProvider price provider address\n    event PriceProviderForAsset(address indexed asset, IPriceProvider indexed priceProvider);\n\n    /// @notice Register new price provider\n    /// @param _priceProvider address of price provider\n    function addPriceProvider(IPriceProvider _priceProvider) external;\n\n    /// @notice Unregister price provider\n    /// @param _priceProvider address of price provider to be removed\n    function removePriceProvider(IPriceProvider _priceProvider) external;\n\n    /// @notice Sets price provider for asset\n    /// @dev Request for asset price is forwarded to the price provider assigned to that asset\n    /// @param _asset address of an asset for which price provider will be used\n    /// @param _priceProvider address of price provider\n    function setPriceProviderForAsset(address _asset, IPriceProvider _priceProvider) external;\n\n    /// @notice Returns \"Time-Weighted Average Price\" for an asset\n    /// @param _asset address of an asset for which to read price\n    /// @return price TWAP price of a token with 18 decimals\n    function getPrice(address _asset) external view returns (uint256 price);\n\n    /// @notice Gets price provider assigned to an asset\n    /// @param _asset address of an asset for which to get price provider\n    /// @return priceProvider address of price provider\n    function priceProviders(address _asset) external view returns (IPriceProvider priceProvider);\n\n    /// @notice Gets token address in which prices are quoted\n    /// @return quoteToken address\n    function quoteToken() external view returns (address);\n\n    /// @notice Gets manager role address\n    /// @return manager role address\n    function manager() external view returns (address);\n\n    /// @notice Checks if providers are available for an asset\n    /// @param _asset asset address to check\n    /// @return returns TRUE if price feed is ready, otherwise false\n    function providersReadyForAsset(address _asset) external view returns (bool);\n\n    /// @notice Returns true if address is a registered price provider\n    /// @param _provider address of price provider to be removed\n    /// @return true if address is a registered price provider, otherwise false\n    function isPriceProvider(IPriceProvider _provider) external view returns (bool);\n\n    /// @notice Gets number of price providers registered\n    /// @return number of price providers registered\n    function providersCount() external view returns (uint256);\n\n    /// @notice Gets an array of price providers\n    /// @return array of price providers\n    function providerList() external view returns (address[] memory);\n\n    /// @notice Sanity check function\n    /// @return returns always TRUE\n    function priceProvidersRepositoryPing() external pure returns (bytes4);\n}\n"
    },
    "contracts/interfaces/IPriceProviderV2.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.7.6 <0.9.0;\n\nimport \"./IPriceProvider.sol\";\n\n/// @title Common interface V2 for Silo Price Providers\ninterface IPriceProviderV2 is IPriceProvider {\n    /// @dev for liquidation purposes and for compatibility with naming convention we already using in LiquidationHelper\n    /// we have this method to return on-chain provider that can be useful for liquidation\n    function getFallbackProvider(address _asset) external view returns (IPriceProvider);\n\n    /// @dev this is info method for LiquidationHelper\n    /// @return bool TRUE if provider is off-chain, means it is not a dex\n    function offChainProvider() external pure returns (bool);\n}\n"
    },
    "contracts/interfaces/IShareToken.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\nimport \"./INotificationReceiver.sol\";\n\ninterface IShareToken is IERC20Metadata {\n    /// @notice Emitted every time receiver is notified about token transfer\n    /// @param notificationReceiver receiver address\n    /// @param success false if TX reverted on `notificationReceiver` side, otherwise true\n    event NotificationSent(\n        INotificationReceiver indexed notificationReceiver,\n        bool success\n    );\n\n    /// @notice Mint method for Silo to create debt position\n    /// @param _account wallet for which to mint token\n    /// @param _amount amount of token to be minted\n    function mint(address _account, uint256 _amount) external;\n\n    /// @notice Burn method for Silo to close debt position\n    /// @param _account wallet for which to burn token\n    /// @param _amount amount of token to be burned\n    function burn(address _account, uint256 _amount) external;\n}\n"
    },
    "contracts/interfaces/ISilo.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"./IBaseSilo.sol\";\n\ninterface ISilo is IBaseSilo {\n    /// @notice Deposit `_amount` of `_asset` tokens from `msg.sender` to the Silo\n    /// @param _asset The address of the token to deposit\n    /// @param _amount The amount of the token to deposit\n    /// @param _collateralOnly True if depositing collateral only\n    /// @return collateralAmount deposited amount\n    /// @return collateralShare user collateral shares based on deposited amount\n    function deposit(address _asset, uint256 _amount, bool _collateralOnly)\n        external\n        returns (uint256 collateralAmount, uint256 collateralShare);\n\n    /// @notice Router function to deposit `_amount` of `_asset` tokens to the Silo for the `_depositor`\n    /// @param _asset The address of the token to deposit\n    /// @param _depositor The address of the recipient of collateral tokens\n    /// @param _amount The amount of the token to deposit\n    /// @param _collateralOnly True if depositing collateral only\n    /// @return collateralAmount deposited amount\n    /// @return collateralShare `_depositor` collateral shares based on deposited amount\n    function depositFor(address _asset, address _depositor, uint256 _amount, bool _collateralOnly)\n        external\n        returns (uint256 collateralAmount, uint256 collateralShare);\n\n    /// @notice Withdraw `_amount` of `_asset` tokens from the Silo to `msg.sender`\n    /// @param _asset The address of the token to withdraw\n    /// @param _amount The amount of the token to withdraw\n    /// @param _collateralOnly True if withdrawing collateral only deposit\n    /// @return withdrawnAmount withdrawn amount that was transferred to user\n    /// @return withdrawnShare burned share based on `withdrawnAmount`\n    function withdraw(address _asset, uint256 _amount, bool _collateralOnly)\n        external\n        returns (uint256 withdrawnAmount, uint256 withdrawnShare);\n\n    /// @notice Router function to withdraw `_amount` of `_asset` tokens from the Silo for the `_depositor`\n    /// @param _asset The address of the token to withdraw\n    /// @param _depositor The address that originally deposited the collateral tokens being withdrawn,\n    /// it should be the one initiating the withdrawal through the router\n    /// @param _receiver The address that will receive the withdrawn tokens\n    /// @param _amount The amount of the token to withdraw\n    /// @param _collateralOnly True if withdrawing collateral only deposit\n    /// @return withdrawnAmount withdrawn amount that was transferred to `_receiver`\n    /// @return withdrawnShare burned share based on `withdrawnAmount`\n    function withdrawFor(\n        address _asset,\n        address _depositor,\n        address _receiver,\n        uint256 _amount,\n        bool _collateralOnly\n    ) external returns (uint256 withdrawnAmount, uint256 withdrawnShare);\n\n    /// @notice Borrow `_amount` of `_asset` tokens from the Silo to `msg.sender`\n    /// @param _asset The address of the token to borrow\n    /// @param _amount The amount of the token to borrow\n    /// @return debtAmount borrowed amount\n    /// @return debtShare user debt share based on borrowed amount\n    function borrow(address _asset, uint256 _amount) external returns (uint256 debtAmount, uint256 debtShare);\n\n    /// @notice Router function to borrow `_amount` of `_asset` tokens from the Silo for the `_receiver`\n    /// @param _asset The address of the token to borrow\n    /// @param _borrower The address that will take the loan,\n    /// it should be the one initiating the borrowing through the router\n    /// @param _receiver The address of the asset receiver\n    /// @param _amount The amount of the token to borrow\n    /// @return debtAmount borrowed amount\n    /// @return debtShare `_receiver` debt share based on borrowed amount\n    function borrowFor(address _asset, address _borrower, address _receiver, uint256 _amount)\n        external\n        returns (uint256 debtAmount, uint256 debtShare);\n\n    /// @notice Repay `_amount` of `_asset` tokens from `msg.sender` to the Silo\n    /// @param _asset The address of the token to repay\n    /// @param _amount amount of asset to repay, includes interests\n    /// @return repaidAmount amount repaid\n    /// @return burnedShare burned debt share\n    function repay(address _asset, uint256 _amount) external returns (uint256 repaidAmount, uint256 burnedShare);\n\n    /// @notice Allows to repay in behalf of borrower to execute liquidation\n    /// @param _asset The address of the token to repay\n    /// @param _borrower The address of the user to have debt tokens burned\n    /// @param _amount amount of asset to repay, includes interests\n    /// @return repaidAmount amount repaid\n    /// @return burnedShare burned debt share\n    function repayFor(address _asset, address _borrower, uint256 _amount)\n        external\n        returns (uint256 repaidAmount, uint256 burnedShare);\n\n    /// @dev harvest protocol fees from an array of assets\n    /// @return harvestedAmounts amount harvested during tx execution for each of silo asset\n    function harvestProtocolFees() external returns (uint256[] memory harvestedAmounts);\n\n    /// @notice Function to update interests for `_asset` token since the last saved state\n    /// @param _asset The address of the token to be updated\n    /// @return interest accrued interest\n    function accrueInterest(address _asset) external returns (uint256 interest);\n\n    /// @notice this methods does not requires to have tokens in order to liquidate user\n    /// @dev during liquidation process, msg.sender will be notified once all collateral will be send to him\n    /// msg.sender needs to be `IFlashLiquidationReceiver`\n    /// @param _users array of users to liquidate\n    /// @param _flashReceiverData this data will be forward to msg.sender on notification\n    /// @return assets array of all processed assets (collateral + debt, including removed)\n    /// @return receivedCollaterals receivedCollaterals[userId][assetId] => amount\n    /// amounts of collaterals send to `_flashReceiver`\n    /// @return shareAmountsToRepaid shareAmountsToRepaid[userId][assetId] => amount\n    /// required amounts of debt to be repaid\n    function flashLiquidate(address[] memory _users, bytes memory _flashReceiverData)\n        external\n        returns (\n            address[] memory assets,\n            uint256[][] memory receivedCollaterals,\n            uint256[][] memory shareAmountsToRepaid\n        );\n}\n"
    },
    "contracts/interfaces/ISiloConvexStateChangesHandler.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\ninterface ISiloConvexStateChangesHandler {\n    /// @dev This function checkpoints two users rewards. This part of code can not be implemented in the Silo\n    ///     because of the smart contract bytecode limit. Can be called from the Silo only.\n    /// @param _firstToCheckpoint address to checkpoint, can be zero.\n    /// @param _secondToCheckpoint address to checkpoint, can be zero.\n    function beforeBalanceUpdate(address _firstToCheckpoint, address _secondToCheckpoint) external;\n\n    /// @dev This function checks ConvexSiloWrapper `_wrapper`. Returns false if `_wrapper` is not registered in\n    ///     `ConvexSiloWrapperFactory`. Returns false if Curve pool can not be fetched for `_wrapper` underlying\n    ///     Curve LP token. Otherwise, returns true.\n    /// @param _wrapper address.\n    /// @return If the return argument is false, Silo contract must revert.\n    function wrapperSetupVerification(address _wrapper) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/ISiloFactory.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\ninterface ISiloFactory {\n    /// @notice Emitted when Silo is deployed\n    /// @param silo address of deployed Silo\n    /// @param asset address of asset for which Silo was deployed\n    /// @param version version of silo implementation\n    event NewSiloCreated(address indexed silo, address indexed asset, uint128 version);\n\n    /// @notice Must be called by repository on constructor\n    /// @param _siloRepository the SiloRepository to set\n    function initRepository(address _siloRepository) external;\n\n    /// @notice Deploys Silo\n    /// @param _siloAsset unique asset for which Silo is deployed\n    /// @param _version version of silo implementation\n    /// @param _data (optional) data that may be needed during silo creation\n    /// @return silo deployed Silo address\n    function createSilo(address _siloAsset, uint128 _version, bytes memory _data) external returns (address silo);\n\n    /// @dev just a helper method to see if address is a factory\n    function siloFactoryPing() external pure returns (bytes4);\n}\n"
    },
    "contracts/interfaces/ISiloFactoryV2.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\ninterface ISiloFactoryV2 {\n    /// @notice Emitted when Silo is deployed\n    /// @param silo address of deployed Silo\n    /// @param asset address of asset for which Silo was deployed\n    /// @param version version of silo implementation\n    event NewSiloCreated(address indexed silo, address indexed asset, uint128 version);\n\n    /// @notice Deploys Silo\n    /// @param _siloAsset unique asset for which Silo is deployed\n    /// @param _version version of silo implementation\n    /// @param _data (optional) data that may be needed during silo creation\n    /// @return silo deployed Silo address\n    function createSilo(address _siloAsset, uint128 _version, bytes memory _data) external returns (address silo);\n\n    /// @dev just a helper method to see if address is a factory\n    function siloFactoryPing() external pure returns (bytes4);\n}\n"
    },
    "contracts/interfaces/ISiloGovernanceToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\ninterface ISiloGovernanceToken {\n    function mint(address, uint256) external;\n    function burn(address, uint256) external;\n    function balanceOf(address) external view returns (uint256);\n    function owner() external view returns (address);\n}\n"
    },
    "contracts/interfaces/ISiloRepository.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"./ISiloFactory.sol\";\nimport \"./ITokensFactory.sol\";\nimport \"./IPriceProvidersRepository.sol\";\nimport \"./INotificationReceiver.sol\";\nimport \"./IInterestRateModel.sol\";\n\ninterface ISiloRepository {\n    /// @dev protocol fees in precision points (Solvency._PRECISION_DECIMALS), we do allow for fee == 0\n    struct Fees {\n        /// @dev One time protocol fee for opening a borrow position in precision points (Solvency._PRECISION_DECIMALS)\n        uint64 entryFee;\n        /// @dev Protocol revenue share in interest paid in precision points (Solvency._PRECISION_DECIMALS)\n        uint64 protocolShareFee;\n        /// @dev Protocol share in liquidation profit in precision points (Solvency._PRECISION_DECIMALS).\n        /// It's calculated from total collateral amount to be transferred to liquidator.\n        uint64 protocolLiquidationFee;\n    }\n\n    struct SiloVersion {\n        /// @dev Default version of Silo. If set to 0, it means it is not set. By default it is set to 1\n        uint128 byDefault;\n\n        /// @dev Latest added version of Silo. If set to 0, it means it is not set. By default it is set to 1\n        uint128 latest;\n    }\n\n    /// @dev AssetConfig struct represents configurable parameters for each Silo\n    struct AssetConfig {\n        /// @dev Loan-to-Value ratio represents the maximum borrowing power of a specific collateral.\n        ///      For example, if the collateral asset has an LTV of 75%, the user can borrow up to 0.75 worth\n        ///      of quote token in the principal currency for every quote token worth of collateral.\n        ///      value uses 18 decimals eg. 100% == 1e18\n        ///      max valid value is 1e18 so it needs storage of 60 bits\n        uint64 maxLoanToValue;\n\n        /// @dev Liquidation Threshold represents the threshold at which a borrow position will be considered\n        ///      undercollateralized and subject to liquidation for each collateral. For example,\n        ///      if a collateral has a liquidation threshold of 80%, it means that the loan will be\n        ///      liquidated when the borrowAmount value is worth 80% of the collateral value.\n        ///      value uses 18 decimals eg. 100% == 1e18\n        uint64 liquidationThreshold;\n\n        /// @dev interest rate model address\n        IInterestRateModel interestRateModel;\n    }\n\n    event NewDefaultMaximumLTV(uint64 defaultMaximumLTV);\n\n    event NewDefaultLiquidationThreshold(uint64 defaultLiquidationThreshold);\n\n    /// @notice Emitted on new Silo creation\n    /// @param silo deployed Silo address\n    /// @param asset unique asset for deployed Silo\n    /// @param siloVersion version of deployed Silo\n    event NewSilo(address indexed silo, address indexed asset, uint128 siloVersion);\n\n    /// @notice Emitted when new Silo (or existing one) becomes a bridge pool (pool with only bridge tokens).\n    /// @param pool address of the bridge pool, It can be zero address when bridge asset is removed and pool no longer\n    /// is treated as bridge pool\n    event BridgePool(address indexed pool);\n\n    /// @notice Emitted on new bridge asset\n    /// @param newBridgeAsset address of added bridge asset\n    event BridgeAssetAdded(address indexed newBridgeAsset);\n\n    /// @notice Emitted on removed bridge asset\n    /// @param bridgeAssetRemoved address of removed bridge asset\n    event BridgeAssetRemoved(address indexed bridgeAssetRemoved);\n\n    /// @notice Emitted when default interest rate model is changed\n    /// @param newModel address of new interest rate model\n    event InterestRateModel(IInterestRateModel indexed newModel);\n\n    /// @notice Emitted on price provider repository address update\n    /// @param newProvider address of new oracle repository\n    event PriceProvidersRepositoryUpdate(\n        IPriceProvidersRepository indexed newProvider\n    );\n\n    /// @notice Emitted on token factory address update\n    /// @param newTokensFactory address of new token factory\n    event TokensFactoryUpdate(address indexed newTokensFactory);\n\n    /// @notice Emitted on router address update\n    /// @param newRouter address of new router\n    event RouterUpdate(address indexed newRouter);\n\n    /// @notice Emitted on INotificationReceiver address update\n    /// @param newIncentiveContract address of new INotificationReceiver\n    event NotificationReceiverUpdate(INotificationReceiver indexed newIncentiveContract);\n\n    /// @notice Emitted when new Silo version is registered\n    /// @param factory factory address that deploys registered Silo version\n    /// @param siloLatestVersion Silo version of registered Silo\n    /// @param siloDefaultVersion current default Silo version\n    event RegisterSiloVersion(address indexed factory, uint128 siloLatestVersion, uint128 siloDefaultVersion);\n\n    /// @notice Emitted when Silo version is unregistered\n    /// @param factory factory address that deploys unregistered Silo version\n    /// @param siloVersion version that was unregistered\n    event UnregisterSiloVersion(address indexed factory, uint128 siloVersion);\n\n    /// @notice Emitted when default Silo version is updated\n    /// @param newDefaultVersion new default version\n    event SiloDefaultVersion(uint128 newDefaultVersion);\n\n    /// @notice Emitted when default fee is updated\n    /// @param newEntryFee new entry fee\n    /// @param newProtocolShareFee new protocol share fee\n    /// @param newProtocolLiquidationFee new protocol liquidation fee\n    event FeeUpdate(\n        uint64 newEntryFee,\n        uint64 newProtocolShareFee,\n        uint64 newProtocolLiquidationFee\n    );\n\n    /// @notice Emitted when asset config is updated for a silo\n    /// @param silo silo for which asset config is being set\n    /// @param asset asset for which asset config is being set\n    /// @param assetConfig new asset config\n    event AssetConfigUpdate(address indexed silo, address indexed asset, AssetConfig assetConfig);\n\n    /// @notice Emitted when silo (silo factory) version is set for asset\n    /// @param asset asset for which asset config is being set\n    /// @param version Silo version\n    event VersionForAsset(address indexed asset, uint128 version);\n\n    /// @param _siloAsset silo asset\n    /// @return version of Silo that is assigned for provided asset, if not assigned it returns zero (default)\n    function getVersionForAsset(address _siloAsset) external returns (uint128);\n\n    /// @notice setter for `getVersionForAsset` mapping\n    /// @param _siloAsset silo asset\n    /// @param _version version of Silo that will be assigned for `_siloAsset`, zero (default) is acceptable\n    function setVersionForAsset(address _siloAsset, uint128 _version) external;\n\n    /// @notice use this method only when off-chain verification is OFF\n    /// @dev Silo does NOT support rebase and deflationary tokens\n    /// @param _siloAsset silo asset\n    /// @param _siloData (optional) data that may be needed during silo creation\n    /// @return createdSilo address of created silo\n    function newSilo(address _siloAsset, bytes memory _siloData) external returns (address createdSilo);\n\n    /// @notice use this method to deploy new version of Silo for an asset that already has Silo deployed.\n    /// Only owner (DAO) can replace.\n    /// @dev Silo does NOT support rebase and deflationary tokens\n    /// @param _siloAsset silo asset\n    /// @param _siloVersion version of silo implementation. Use 0 for default version which is fine\n    /// for 99% of cases.\n    /// @param _siloData (optional) data that may be needed during silo creation\n    /// @return createdSilo address of created silo\n    function replaceSilo(\n        address _siloAsset,\n        uint128 _siloVersion,\n        bytes memory _siloData\n    ) external returns (address createdSilo);\n\n    /// @notice Set factory contract for debt and collateral tokens for each Silo asset\n    /// @dev Callable only by owner\n    /// @param _tokensFactory address of TokensFactory contract that deploys debt and collateral tokens\n    function setTokensFactory(address _tokensFactory) external;\n\n    /// @notice Set default fees\n    /// @dev Callable only by owner\n    /// @param _fees:\n    /// - _entryFee one time protocol fee for opening a borrow position in precision points\n    /// (Solvency._PRECISION_DECIMALS)\n    /// - _protocolShareFee protocol revenue share in interest paid in precision points\n    /// (Solvency._PRECISION_DECIMALS)\n    /// - _protocolLiquidationFee protocol share in liquidation profit in precision points\n    /// (Solvency._PRECISION_DECIMALS). It's calculated from total collateral amount to be transferred\n    /// to liquidator.\n    function setFees(Fees calldata _fees) external;\n\n    /// @notice Set configuration for given asset in given Silo\n    /// @dev Callable only by owner\n    /// @param _silo Silo address for which config applies\n    /// @param _asset asset address for which config applies\n    /// @param _assetConfig:\n    ///    - _maxLoanToValue maximum Loan-to-Value, for details see `Repository.AssetConfig.maxLoanToValue`\n    ///    - _liquidationThreshold liquidation threshold, for details see `Repository.AssetConfig.maxLoanToValue`\n    ///    - _interestRateModel interest rate model address, for details see `Repository.AssetConfig.interestRateModel`\n    function setAssetConfig(\n        address _silo,\n        address _asset,\n        AssetConfig calldata _assetConfig\n    ) external;\n\n    /// @notice Set default interest rate model\n    /// @dev Callable only by owner\n    /// @param _defaultInterestRateModel default interest rate model\n    function setDefaultInterestRateModel(IInterestRateModel _defaultInterestRateModel) external;\n\n    /// @notice Set default maximum LTV\n    /// @dev Callable only by owner\n    /// @param _defaultMaxLTV default maximum LTV in precision points (Solvency._PRECISION_DECIMALS)\n    function setDefaultMaximumLTV(uint64 _defaultMaxLTV) external;\n\n    /// @notice Set default liquidation threshold\n    /// @dev Callable only by owner\n    /// @param _defaultLiquidationThreshold default liquidation threshold in precision points\n    /// (Solvency._PRECISION_DECIMALS)\n    function setDefaultLiquidationThreshold(uint64 _defaultLiquidationThreshold) external;\n\n    /// @notice Set price provider repository\n    /// @dev Callable only by owner\n    /// @param _repository price provider repository address\n    function setPriceProvidersRepository(IPriceProvidersRepository _repository) external;\n\n    /// @notice Set router contract\n    /// @dev Callable only by owner\n    /// @param _router router address\n    function setRouter(address _router) external;\n\n    /// @notice Set NotificationReceiver contract\n    /// @dev Callable only by owner\n    /// @param _silo silo address for which to set `_notificationReceiver`\n    /// @param _notificationReceiver NotificationReceiver address\n    function setNotificationReceiver(address _silo, INotificationReceiver _notificationReceiver) external;\n\n    /// @notice Adds new bridge asset\n    /// @dev New bridge asset must be unique. Duplicates in bridge assets are not allowed. It's possible to add\n    /// bridge asset that has been removed in the past. Note that all Silos must be synced manually. Callable\n    /// only by owner.\n    /// @param _newBridgeAsset bridge asset address\n    function addBridgeAsset(address _newBridgeAsset) external;\n\n    /// @notice Removes bridge asset\n    /// @dev Note that all Silos must be synced manually. Callable only by owner.\n    /// @param _bridgeAssetToRemove bridge asset address to be removed\n    function removeBridgeAsset(address _bridgeAssetToRemove) external;\n\n    /// @notice Registers new Silo version\n    /// @dev User can choose which Silo version he wants to deploy. It's possible to have multiple versions of Silo.\n    /// Callable only by owner.\n    /// @param _factory factory contract that deploys new version of Silo\n    /// @param _isDefault true if this version should be used as default\n    function registerSiloVersion(ISiloFactory _factory, bool _isDefault) external;\n\n    /// @notice Unregisters Silo version\n    /// @dev Callable only by owner.\n    /// @param _siloVersion Silo version to be unregistered\n    function unregisterSiloVersion(uint128 _siloVersion) external;\n\n    /// @notice Sets default Silo version\n    /// @dev Callable only by owner.\n    /// @param _defaultVersion Silo version to be set as default\n    function setDefaultSiloVersion(uint128 _defaultVersion) external;\n\n    /// @notice Check if contract address is a Silo deployment\n    /// @param _silo address of expected Silo\n    /// @return true if address is Silo deployment, otherwise false\n    function isSilo(address _silo) external view returns (bool);\n\n    /// @notice Get Silo address of asset\n    /// @param _asset address of asset\n    /// @return address of corresponding Silo deployment\n    function getSilo(address _asset) external view returns (address);\n\n    /// @notice Get Silo Factory for given version\n    /// @param _siloVersion version of Silo implementation\n    /// @return ISiloFactory contract that deploys Silos of given version\n    function siloFactory(uint256 _siloVersion) external view returns (ISiloFactory);\n\n    /// @notice Get debt and collateral Token Factory\n    /// @return ITokensFactory contract that deploys debt and collateral tokens\n    function tokensFactory() external view returns (ITokensFactory);\n\n    /// @notice Get Router contract\n    /// @return address of router contract\n    function router() external view returns (address);\n\n    /// @notice Get current bridge assets\n    /// @dev Keep in mind that not all Silos may be synced with current bridge assets so it's possible that some\n    /// assets in that list are not part of given Silo.\n    /// @return address array of bridge assets\n    function getBridgeAssets() external view returns (address[] memory);\n\n    /// @notice Get removed bridge assets\n    /// @dev Keep in mind that not all Silos may be synced with bridge assets so it's possible that some\n    /// assets in that list are still part of given Silo.\n    /// @return address array of bridge assets\n    function getRemovedBridgeAssets() external view returns (address[] memory);\n\n    /// @notice Get maximum LTV for asset in given Silo\n    /// @dev If dedicated config is not set, method returns default config\n    /// @param _silo address of Silo\n    /// @param _asset address of an asset\n    /// @return maximum LTV in precision points (Solvency._PRECISION_DECIMALS)\n    function getMaximumLTV(address _silo, address _asset) external view returns (uint256);\n\n    /// @notice Get Interest Rate Model address for asset in given Silo\n    /// @dev If dedicated config is not set, method returns default config\n    /// @param _silo address of Silo\n    /// @param _asset address of an asset\n    /// @return address of interest rate model\n    function getInterestRateModel(address _silo, address _asset) external view returns (IInterestRateModel);\n\n    /// @notice Get liquidation threshold for asset in given Silo\n    /// @dev If dedicated config is not set, method returns default config\n    /// @param _silo address of Silo\n    /// @param _asset address of an asset\n    /// @return liquidation threshold in precision points (Solvency._PRECISION_DECIMALS)\n    function getLiquidationThreshold(address _silo, address _asset) external view returns (uint256);\n\n    /// @notice Get incentive contract address. Incentive contracts are responsible for distributing rewards\n    /// to debt and/or collateral token holders of given Silo\n    /// @param _silo address of Silo\n    /// @return incentive contract address\n    function getNotificationReceiver(address _silo) external view returns (INotificationReceiver);\n\n    /// @notice Get owner role address of Repository\n    /// @return owner role address\n    function owner() external view returns (address);\n\n    /// @notice get PriceProvidersRepository contract that manages price providers implementations\n    /// @return IPriceProvidersRepository address\n    function priceProvidersRepository() external view returns (IPriceProvidersRepository);\n\n    /// @dev Get protocol fee for opening a borrow position\n    /// @return fee in precision points (Solvency._PRECISION_DECIMALS == 100%)\n    function entryFee() external view returns (uint256);\n\n    /// @dev Get protocol share fee\n    /// @return protocol share fee in precision points (Solvency._PRECISION_DECIMALS == 100%)\n    function protocolShareFee() external view returns (uint256);\n\n    /// @dev Get protocol liquidation fee\n    /// @return protocol liquidation fee in precision points (Solvency._PRECISION_DECIMALS == 100%)\n    function protocolLiquidationFee() external view returns (uint256);\n\n    /// @dev Checks all conditions for new silo creation and throws when not possible to create\n    /// @param _asset address of asset for which you want to create silo\n    /// @param _assetIsABridge bool TRUE when `_asset` is bridge asset, FALSE when it is not\n    function ensureCanCreateSiloFor(address _asset, bool _assetIsABridge) external view;\n\n    function siloRepositoryPing() external pure returns (bytes4);\n}\n"
    },
    "contracts/interfaces/ISwapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9.0;\n\ninterface ISwapper {\n    /// @dev swaps `_amountIn` of `_tokenIn` for `_tokenOut`. It might require approvals.\n    /// @return amountOut amount of _tokenOut received\n    function swapAmountIn(\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _amountIn,\n        address _priceProvider,\n        address _siloAsset\n    ) external returns (uint256 amountOut);\n\n    /// @dev swaps `_tokenIn` for `_amountOut` of  `_tokenOut`. It might require approvals\n    /// @return amountIn amount of _tokenIn spend\n    function swapAmountOut(\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _amountOut,\n        address _priceProvider,\n        address _siloAsset\n    ) external returns (uint256 amountIn);\n\n    /// @return address that needs to have approval to spend tokens to execute a swap\n    function spenderToApprove() external view returns (address);\n}\n"
    },
    "contracts/interfaces/ITokensFactory.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"./IShareToken.sol\";\n\ninterface ITokensFactory {\n    /// @notice Emitted when collateral token is deployed\n    /// @param token address of deployed collateral token\n    event NewShareCollateralTokenCreated(address indexed token);\n\n    /// @notice Emitted when collateral token is deployed\n    /// @param token address of deployed debt token\n    event NewShareDebtTokenCreated(address indexed token);\n\n    ///@notice Must be called by repository on constructor\n    /// @param _siloRepository the SiloRepository to set\n    function initRepository(address _siloRepository) external;\n\n    /// @notice Deploys collateral token\n    /// @param _name name of the token\n    /// @param _symbol symbol of the token\n    /// @param _asset underlying asset for which token is deployed\n    /// @return address of deployed collateral share token\n    function createShareCollateralToken(\n        string memory _name,\n        string memory _symbol,\n        address _asset\n    ) external returns (IShareToken);\n\n    /// @notice Deploys debt token\n    /// @param _name name of the token\n    /// @param _symbol symbol of the token\n    /// @param _asset underlying asset for which token is deployed\n    /// @return address of deployed debt share token\n    function createShareDebtToken(\n        string memory _name,\n        string memory _symbol,\n        address _asset\n    )\n        external\n        returns (IShareToken);\n\n    /// @dev just a helper method to see if address is a factory\n    /// @return always true\n    function tokensFactoryPing() external pure returns (bytes4);\n}\n"
    },
    "contracts/interfaces/IWrappedNativeToken.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IWrappedNativeToken is IERC20 {\n    function deposit() external payable;\n    function withdraw(uint256 amount) external;\n}\n"
    },
    "contracts/lib/EasyMathV2.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\n/// @dev EasyMathV2 is optimised version of EasyMath, many places was `unchecked` for lower gas cost.\n/// There is also fixed version of `calculateUtilization()` method.\nlibrary EasyMathV2 {\n    error ZeroAssets();\n    error ZeroShares();\n\n    function toShare(uint256 amount, uint256 totalAmount, uint256 totalShares)\n        internal\n        pure\n        returns (uint256 result)\n    {\n        if (totalShares == 0 || totalAmount == 0) {\n            return amount;\n        }\n\n        result = amount * totalShares;\n        // totalAmount is never 0 based on above check, so we can uncheck\n        unchecked { result /= totalAmount; }\n\n        // Prevent rounding error\n        if (result == 0 && amount != 0) {\n            revert ZeroShares();\n        }\n    }\n\n    function toShareRoundUp(uint256 amount, uint256 totalAmount, uint256 totalShares)\n        internal\n        pure\n        returns (uint256 result)\n    {\n        if (totalShares == 0 || totalAmount == 0) {\n            return amount;\n        }\n\n        uint256 numerator = amount * totalShares;\n        // totalAmount is not 0, so it is safe to uncheck\n        unchecked { result = numerator / totalAmount; }\n        \n        // Round up\n        if (numerator % totalAmount != 0) {\n            unchecked { result += 1; }\n        }\n    }\n\n    function toAmount(uint256 share, uint256 totalAmount, uint256 totalShares)\n        internal\n        pure\n        returns (uint256 result)\n    {\n        if (totalShares == 0 || totalAmount == 0) {\n            return 0;\n        }\n\n        result = share * totalAmount;\n        // totalShares are not 0, so we can uncheck\n        unchecked { result /= totalShares; }\n\n        // Prevent rounding error\n        if (result == 0 && share != 0) {\n            revert ZeroAssets();\n        }\n    }\n\n    function toAmountRoundUp(uint256 share, uint256 totalAmount, uint256 totalShares)\n        internal\n        pure\n        returns (uint256 result)\n    {\n        if (totalShares == 0 || totalAmount == 0) {\n            return 0;\n        }\n\n        uint256 numerator = share * totalAmount;\n        // totalShares are not 0, based on above check, so we can uncheck\n        unchecked { result = numerator / totalShares; }\n        \n        // Round up\n        if (numerator % totalShares != 0) {\n            unchecked { result += 1; }\n        }\n    }\n\n    function toValue(uint256 _assetAmount, uint256 _assetPrice, uint256 _assetDecimals)\n        internal\n        pure\n        returns (uint256 value)\n    {\n        value = _assetAmount * _assetPrice;\n        // power of 10 can not be 0, so we can uncheck\n        unchecked { value /= 10 ** _assetDecimals; }\n    }\n\n    function sum(uint256[] memory _numbers) internal pure returns (uint256 s) {\n        for(uint256 i; i < _numbers.length;) {\n            s += _numbers[i];\n            unchecked { i++; }\n        }\n    }\n\n    /// @notice Calculates fraction between borrowed and deposited amount of tokens denominated in percentage\n    /// @dev It assumes `_dp` = 100%.\n    /// @param _dp decimal points used by model\n    /// @param _totalDeposits current total deposits for assets\n    /// @param _totalBorrowAmount current total borrows for assets\n    /// @return utilization value, capped to 100%\n    /// Limiting utilisation ratio by 100% max will allows us to perform better interest rate computations\n    /// and should not affect any other part of protocol.\n    function calculateUtilization(uint256 _dp, uint256 _totalDeposits, uint256 _totalBorrowAmount)\n        internal\n        pure\n        returns (uint256 utilization)\n    {\n        if (_totalDeposits == 0 || _totalBorrowAmount == 0) return 0;\n\n        utilization = _totalBorrowAmount * _dp;\n        // _totalDeposits is not 0 based on above check, so it is safe to uncheck this division\n        unchecked { utilization /= _totalDeposits; }\n\n        // cap at 100%\n        if (utilization > _dp) utilization = _dp;\n    }\n}\n"
    },
    "contracts/lib/MathHelpers.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.7.6 <=0.9.0;\n\n/// @title Math helper functions\nlibrary MathHelpers {\n    /// @notice It will not support an array with `0` or `1` element.\n    /// @dev Returns a minimal value from the provided array.\n    /// @param _values A list of values from which will be selected a lower value\n    /// @return min A lower value from the `_values` array\n    function minValue(uint256[] memory _values) internal pure returns (uint256 min) {\n        min = _values[0] > _values[1] ? _values[1] : _values[0];\n        uint256 i = 2;\n\n        while(i < _values.length) {\n            if (min > _values[i]) {\n                min = _values[i];\n            }\n\n            // Variable 'i' and '_values.length' have the same data type,\n            // so due to condition (i < _values.length) overflow is impossible.\n            unchecked { i++; }\n        }\n    }\n}\n"
    },
    "contracts/lib/NormalizeWithDecimalsLib.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nlibrary NormalizeWithDecimalsLib {\n    error DivisionResultIsZero();\n\n    /// @dev Adjusts the given value to have different decimals\n    function normalizeWithDecimals(\n        uint256 _value,\n        uint256 _toDecimals,\n        uint256 _fromDecimals\n    )\n        internal\n        pure\n        returns (uint256)\n    {\n        if (_toDecimals == _fromDecimals) {\n            return _value;\n        }\n\n        if (_toDecimals < _fromDecimals) {\n            uint256 divideOn;\n            // It can be unchecked because of the condition `_toDecimals < _fromDecimals`.\n            // We trust to `_fromDecimals` and `_toDecimals` they should not have large numbers.\n            unchecked { divideOn = 10 ** (_fromDecimals - _toDecimals); }\n            // Zero value after normalization is unacceptable.\n            if (_value < divideOn) revert DivisionResultIsZero();\n            // Assertion above make it safe\n            unchecked { return _value / divideOn; }\n        }\n\n        uint256 decimalsDiff;\n        // Because of the condition `_toDecimals < _fromDecimals` above,\n        // we are safe as it guarantees that `_toDecimals` is > `_fromDecimals`\n        unchecked { decimalsDiff = 10 ** (_toDecimals - _fromDecimals); }\n\n        return _value * decimalsDiff;\n    }\n}\n"
    },
    "contracts/lib/Ping.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.7.6 <0.9.0;\n\n\nlibrary Ping {\n    function pong(function() external pure returns(bytes4) pingFunction) internal pure returns (bool) {\n        return pingFunction.address != address(0) && pingFunction.selector == pingFunction();\n    }\n}\n"
    },
    "contracts/lib/PRBMathCommon.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\npragma solidity 0.8.13;\n\n/* solhint-disable */\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\n// representation. When it does not, it is annonated in the function's NatSpec documentation.\n/// @author Paul Razvan Berg\nlibrary PRBMathCommon {\n    /// @dev How many trailing decimals can be represented.\n    uint256 internal constant SCALE = 1e18;\n\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\n    /// @dev Uses 128.128-bit fixed-point numbers - it is the most efficient way.\n    /// @param x The exponent as an unsigned 128.128-bit fixed-point number.\n    /// @return result The result as an unsigned 60x18 decimal fixed-point number.\n    function exp2(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            // Start from 0.5 in the 128.128-bit fixed-point format. We need to use uint256 because the intermediary\n            // may get very close to 2^256, which doesn't fit in int256.\n            result = 0x80000000000000000000000000000000;\n\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\n            // because the initial result is 2^127 and all magic factors are less than 2^129.\n            if (x & 0x80000000000000000000000000000000 > 0) result = (result * 0x16A09E667F3BCC908B2FB1366EA957D3E) >> 128;\n            if (x & 0x40000000000000000000000000000000 > 0) result = (result * 0x1306FE0A31B7152DE8D5A46305C85EDED) >> 128;\n            if (x & 0x20000000000000000000000000000000 > 0) result = (result * 0x1172B83C7D517ADCDF7C8C50EB14A7920) >> 128;\n            if (x & 0x10000000000000000000000000000000 > 0) result = (result * 0x10B5586CF9890F6298B92B71842A98364) >> 128;\n            if (x & 0x8000000000000000000000000000000 > 0) result = (result * 0x1059B0D31585743AE7C548EB68CA417FE) >> 128;\n            if (x & 0x4000000000000000000000000000000 > 0) result = (result * 0x102C9A3E778060EE6F7CACA4F7A29BDE9) >> 128;\n            if (x & 0x2000000000000000000000000000000 > 0) result = (result * 0x10163DA9FB33356D84A66AE336DCDFA40) >> 128;\n            if (x & 0x1000000000000000000000000000000 > 0) result = (result * 0x100B1AFA5ABCBED6129AB13EC11DC9544) >> 128;\n            if (x & 0x800000000000000000000000000000 > 0) result = (result * 0x10058C86DA1C09EA1FF19D294CF2F679C) >> 128;\n            if (x & 0x400000000000000000000000000000 > 0) result = (result * 0x1002C605E2E8CEC506D21BFC89A23A011) >> 128;\n            if (x & 0x200000000000000000000000000000 > 0) result = (result * 0x100162F3904051FA128BCA9C55C31E5E0) >> 128;\n            if (x & 0x100000000000000000000000000000 > 0) result = (result * 0x1000B175EFFDC76BA38E31671CA939726) >> 128;\n            if (x & 0x80000000000000000000000000000 > 0) result = (result * 0x100058BA01FB9F96D6CACD4B180917C3E) >> 128;\n            if (x & 0x40000000000000000000000000000 > 0) result = (result * 0x10002C5CC37DA9491D0985C348C68E7B4) >> 128;\n            if (x & 0x20000000000000000000000000000 > 0) result = (result * 0x1000162E525EE054754457D5995292027) >> 128;\n            if (x & 0x10000000000000000000000000000 > 0) result = (result * 0x10000B17255775C040618BF4A4ADE83FD) >> 128;\n            if (x & 0x8000000000000000000000000000 > 0) result = (result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAC) >> 128;\n            if (x & 0x4000000000000000000000000000 > 0) result = (result * 0x100002C5C89D5EC6CA4D7C8ACC017B7CA) >> 128;\n            if (x & 0x2000000000000000000000000000 > 0) result = (result * 0x10000162E43F4F831060E02D839A9D16D) >> 128;\n            if (x & 0x1000000000000000000000000000 > 0) result = (result * 0x100000B1721BCFC99D9F890EA06911763) >> 128;\n            if (x & 0x800000000000000000000000000 > 0) result = (result * 0x10000058B90CF1E6D97F9CA14DBCC1629) >> 128;\n            if (x & 0x400000000000000000000000000 > 0) result = (result * 0x1000002C5C863B73F016468F6BAC5CA2C) >> 128;\n            if (x & 0x200000000000000000000000000 > 0) result = (result * 0x100000162E430E5A18F6119E3C02282A6) >> 128;\n            if (x & 0x100000000000000000000000000 > 0) result = (result * 0x1000000B1721835514B86E6D96EFD1BFF) >> 128;\n            if (x & 0x80000000000000000000000000 > 0) result = (result * 0x100000058B90C0B48C6BE5DF846C5B2F0) >> 128;\n            if (x & 0x40000000000000000000000000 > 0) result = (result * 0x10000002C5C8601CC6B9E94213C72737B) >> 128;\n            if (x & 0x20000000000000000000000000 > 0) result = (result * 0x1000000162E42FFF037DF38AA2B219F07) >> 128;\n            if (x & 0x10000000000000000000000000 > 0) result = (result * 0x10000000B17217FBA9C739AA5819F44FA) >> 128;\n            if (x & 0x8000000000000000000000000 > 0) result = (result * 0x1000000058B90BFCDEE5ACD3C1CEDC824) >> 128;\n            if (x & 0x4000000000000000000000000 > 0) result = (result * 0x100000002C5C85FE31F35A6A30DA1BE51) >> 128;\n            if (x & 0x2000000000000000000000000 > 0) result = (result * 0x10000000162E42FF0999CE3541B9FFFD0) >> 128;\n            if (x & 0x1000000000000000000000000 > 0) result = (result * 0x100000000B17217F80F4EF5AADDA45554) >> 128;\n            if (x & 0x800000000000000000000000 > 0) result = (result * 0x10000000058B90BFBF8479BD5A81B51AE) >> 128;\n            if (x & 0x400000000000000000000000 > 0) result = (result * 0x1000000002C5C85FDF84BD62AE30A74CD) >> 128;\n            if (x & 0x200000000000000000000000 > 0) result = (result * 0x100000000162E42FEFB2FED257559BDAA) >> 128;\n            if (x & 0x100000000000000000000000 > 0) result = (result * 0x1000000000B17217F7D5A7716BBA4A9AF) >> 128;\n            if (x & 0x80000000000000000000000 > 0) result = (result * 0x100000000058B90BFBE9DDBAC5E109CCF) >> 128;\n            if (x & 0x40000000000000000000000 > 0) result = (result * 0x10000000002C5C85FDF4B15DE6F17EB0E) >> 128;\n            if (x & 0x20000000000000000000000 > 0) result = (result * 0x1000000000162E42FEFA494F1478FDE05) >> 128;\n            if (x & 0x10000000000000000000000 > 0) result = (result * 0x10000000000B17217F7D20CF927C8E94D) >> 128;\n            if (x & 0x8000000000000000000000 > 0) result = (result * 0x1000000000058B90BFBE8F71CB4E4B33E) >> 128;\n            if (x & 0x4000000000000000000000 > 0) result = (result * 0x100000000002C5C85FDF477B662B26946) >> 128;\n            if (x & 0x2000000000000000000000 > 0) result = (result * 0x10000000000162E42FEFA3AE53369388D) >> 128;\n            if (x & 0x1000000000000000000000 > 0) result = (result * 0x100000000000B17217F7D1D351A389D41) >> 128;\n            if (x & 0x800000000000000000000 > 0) result = (result * 0x10000000000058B90BFBE8E8B2D3D4EDF) >> 128;\n            if (x & 0x400000000000000000000 > 0) result = (result * 0x1000000000002C5C85FDF4741BEA6E77F) >> 128;\n            if (x & 0x200000000000000000000 > 0) result = (result * 0x100000000000162E42FEFA39FE95583C3) >> 128;\n            if (x & 0x100000000000000000000 > 0) result = (result * 0x1000000000000B17217F7D1CFB72B45E3) >> 128;\n            if (x & 0x80000000000000000000 > 0) result = (result * 0x100000000000058B90BFBE8E7CC35C3F2) >> 128;\n            if (x & 0x40000000000000000000 > 0) result = (result * 0x10000000000002C5C85FDF473E242EA39) >> 128;\n            if (x & 0x20000000000000000000 > 0) result = (result * 0x1000000000000162E42FEFA39F02B772C) >> 128;\n            if (x & 0x10000000000000000000 > 0) result = (result * 0x10000000000000B17217F7D1CF7D83C1A) >> 128;\n            if (x & 0x8000000000000000000 > 0) result = (result * 0x1000000000000058B90BFBE8E7BDCBE2E) >> 128;\n            if (x & 0x4000000000000000000 > 0) result = (result * 0x100000000000002C5C85FDF473DEA871F) >> 128;\n            if (x & 0x2000000000000000000 > 0) result = (result * 0x10000000000000162E42FEFA39EF44D92) >> 128;\n            if (x & 0x1000000000000000000 > 0) result = (result * 0x100000000000000B17217F7D1CF79E949) >> 128;\n            if (x & 0x800000000000000000 > 0) result = (result * 0x10000000000000058B90BFBE8E7BCE545) >> 128;\n            if (x & 0x400000000000000000 > 0) result = (result * 0x1000000000000002C5C85FDF473DE6ECA) >> 128;\n            if (x & 0x200000000000000000 > 0) result = (result * 0x100000000000000162E42FEFA39EF366F) >> 128;\n            if (x & 0x100000000000000000 > 0) result = (result * 0x1000000000000000B17217F7D1CF79AFA) >> 128;\n            if (x & 0x80000000000000000 > 0) result = (result * 0x100000000000000058B90BFBE8E7BCD6E) >> 128;\n            if (x & 0x40000000000000000 > 0) result = (result * 0x10000000000000002C5C85FDF473DE6B3) >> 128;\n            if (x & 0x20000000000000000 > 0) result = (result * 0x1000000000000000162E42FEFA39EF359) >> 128;\n            if (x & 0x10000000000000000 > 0) result = (result * 0x10000000000000000B17217F7D1CF79AC) >> 128;\n\n            // Multiply the result by the integer part 2^n + 1. We have to shift by one bit extra because we have already divided\n            // by two when we set the result equal to 0.5 above.\n            result = result << ((x >> 128) + 1);\n\n            // Convert the result to the signed 60.18-decimal fixed-point format.\n            result = PRBMathCommon.mulDiv(result, 1e18, 2**128);\n        }\n    }\n\n    /// @notice Calculates floor(x*y÷denominator) with full precision.\n    ///\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\n    ///\n    /// Requirements:\n    /// - The denominator cannot be zero.\n    /// - The result must fit within uint256.\n    ///\n    /// Caveats:\n    /// - This function does not work with fixed-point numbers.\n    ///\n    /// @param x The multiplicand as an uint256.\n    /// @param y The multiplier as an uint256.\n    /// @param denominator The divisor as an uint256.\n    /// @return result The result as an uint256.\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2**256 and mod 2**256 - 1, then use\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2**256 + prod0.\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        // Handle non-overflow cases, 256 by 256 division\n        if (prod1 == 0) {\n            require(denominator > 0);\n            assembly {\n                result := div(prod0, denominator)\n            }\n            return result;\n        }\n\n        // Make sure the result is less than 2**256. Also prevents denominator == 0.\n        require(denominator > prod1);\n\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n\n        // Make division exact by subtracting the remainder from [prod1 prod0].\n        uint256 remainder;\n        assembly {\n            // Compute remainder using mulmod.\n            remainder := mulmod(x, y, denominator)\n\n            // Subtract 256 bit number from 512 bit number\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n        // See https://cs.stackexchange.com/q/138556/92363.\n        unchecked {\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 lpotdod = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by lpotdod.\n                denominator := div(denominator, lpotdod)\n\n                // Divide [prod1 prod0] by lpotdod.\n                prod0 := div(prod0, lpotdod)\n\n                // Flip lpotdod such that it is 2**256 / lpotdod. If lpotdod is zero, then it becomes one.\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * lpotdod;\n\n            // Invert denominator mod 2**256. Now that denominator is an odd number, it has an inverse modulo 2**256 such\n            // that denominator * inv = 1 mod 2**256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2**4\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Now use Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2**8\n            inverse *= 2 - denominator * inverse; // inverse mod 2**16\n            inverse *= 2 - denominator * inverse; // inverse mod 2**32\n            inverse *= 2 - denominator * inverse; // inverse mod 2**64\n            inverse *= 2 - denominator * inverse; // inverse mod 2**128\n            inverse *= 2 - denominator * inverse; // inverse mod 2**256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2**256. Since the precoditions guarantee that the outcome is\n            // less than 2**256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n}\n/* solhint-enable */\n"
    },
    "contracts/lib/PRBMathSD59x18.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\npragma solidity 0.8.13;\n\nimport \"./PRBMathCommon.sol\";\n\n/* solhint-disable */\n/// @title PRBMathSD59x18\n/// @author Paul Razvan Berg\n/// @notice Smart contract library for advanced fixed-point math. It works with int256 numbers considered to have 18\n/// trailing decimals. We call this number representation signed 59.18-decimal fixed-point, since the numbers can have\n/// a sign and there can be up to 59 digits in the integer part and up to 18 decimals in the fractional part. The numbers\n/// are bound by the minimum and the maximum values permitted by the Solidity type int256.\nlibrary PRBMathSD59x18 {\n    /// @dev log2(e) as a signed 59.18-decimal fixed-point number.\n    int256 internal constant LOG2_E = 1442695040888963407;\n\n    /// @dev Half the SCALE number.\n    int256 internal constant HALF_SCALE = 5e17;\n\n    /// @dev The maximum value a signed 59.18-decimal fixed-point number can have.\n    int256 internal constant MAX_SD59x18 = 57896044618658097711785492504343953926634992332820282019728792003956564819967;\n\n    /// @dev How many trailing decimals can be represented.\n    int256 internal constant SCALE = 1e18;\n\n    /// INTERNAL FUNCTIONS ///\n\n\n    /// @notice Calculates the natural exponent of x.\n    ///\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\n    ///\n    /// Requirements:\n    /// - All from \"log2\".\n    /// - x must be less than 88722839111672999628.\n    ///\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\n    function exp(int256 x) internal pure returns (int256 result) {\n        // Without this check, the value passed to \"exp2\" would be less than -59794705707972522261.\n        if (x < -41446531673892822322) {\n            return 0;\n        }\n\n        // Without this check, the value passed to \"exp2\" would be greater than 128e18.\n        require(x < 88722839111672999628);\n\n        // Do the fixed-point multiplication inline to save gas.\n        unchecked {\n            int256 doubleScaleProduct = x * LOG2_E;\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\n        }\n    }\n\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\n    ///\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\n    ///\n    /// Requirements:\n    /// - x must be 128e18 or less.\n    /// - The result must fit within MAX_SD59x18.\n    ///\n    /// Caveats:\n    /// - For any x less than -59794705707972522261, the result is zero.\n    ///\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\n    function exp2(int256 x) internal pure returns (int256 result) {\n        // This works because 2^-x = 1/2^x.\n        if (x < 0) {\n            // 2**59.794705707972522262 is the maximum number whose inverse does not equal zero.\n            if (x < -59794705707972522261) {\n                return 0;\n            }\n\n            // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\n            unchecked { result = 1e36 / exp2(-x); }\n            return result;\n        } else {\n            // 2**128 doesn't fit within the 128.128-bit fixed-point representation.\n            require(x < 128e18);\n\n            unchecked {\n                // Convert x to the 128.128-bit fixed-point format.\n                uint256 x128x128 = (uint256(x) << 128) / uint256(SCALE);\n\n                // Safe to convert the result to int256 directly because the maximum input allowed is 128e18.\n                result = int256(PRBMathCommon.exp2(x128x128));\n            }\n        }\n    }\n}\n/* solhint-enable */\n"
    },
    "contracts/lib/RevertBytes.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.7.6 <=0.9.0;\n\nlibrary RevertBytes {\n    function revertBytes(bytes memory _errMsg, string memory _customErr) internal pure {\n        if (_errMsg.length > 0) {\n            assembly { // solhint-disable-line no-inline-assembly\n                revert(add(32, _errMsg), mload(_errMsg))\n            }\n        }\n\n        revert(_customErr);\n    }\n}\n"
    },
    "contracts/lib/SolvencyV2.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\nimport \"../interfaces/IPriceProvidersRepository.sol\";\nimport \"../interfaces/ISilo.sol\";\nimport \"../interfaces/IInterestRateModel.sol\";\nimport \"../interfaces/ISiloRepository.sol\";\nimport \"./EasyMathV2.sol\";\n\nlibrary SolvencyV2 {\n    using EasyMathV2 for uint256;\n\n    /// @notice\n    /// MaximumLTV - Maximum Loan-to-Value ratio represents the maximum borrowing power of all user's collateral\n    /// positions in a Silo\n    /// LiquidationThreshold - Liquidation Threshold represents the threshold at which all user's borrow positions\n    /// in a Silo will be considered under collateralized and subject to liquidation\n    enum TypeofLTV { MaximumLTV, LiquidationThreshold }\n\n    error DifferentArrayLength();\n    error UnsupportedLTVType();\n\n    struct SolvencyParams {\n        /// @param siloRepository SiloRepository address\n        ISiloRepository siloRepository;\n        /// @param silo Silo address\n        ISilo silo;\n        /// @param assets array with assets\n        address[] assets;\n        /// @param assetStates array of states for each asset, where index match the `assets` index\n        ISilo.AssetStorage[] assetStates;\n        /// @param user wallet address for which to read debt\n        address user;\n    }\n\n    /// @dev is value that used for integer calculations and decimal points for utilization ratios, LTV, protocol fees\n    uint256 internal constant _PRECISION_DECIMALS = 1e18;\n    uint256 internal constant _INFINITY = type(uint256).max;\n\n    /// @notice Returns current user LTV and second LTV chosen in params\n    /// @dev This function is optimized for protocol use. In some cases there is no need to keep the calculation\n    /// going and predefined results can be returned.\n    /// @param _params `SolvencyV2.SolvencyParams` struct with needed params for calculation\n    /// @param _secondLtvType type of LTV to be returned as second value\n    /// @return currentUserLTV Loan-to-Value ratio represents current user's proportion of debt to collateral\n    /// @return secondLTV second type of LTV which depends on _secondLtvType, zero is returned if the value of the loan\n    /// or the collateral are zero\n    function calculateLTVs(SolvencyParams memory _params, TypeofLTV _secondLtvType)\n        internal\n        view\n        returns (uint256 currentUserLTV, uint256 secondLTV)\n    {\n        uint256[] memory totalBorrowAmounts = getBorrowAmounts(_params);\n\n        // this return avoids eg. additional checks on withdraw, when user did not borrow any asset\n        if (EasyMathV2.sum(totalBorrowAmounts) == 0) return (0, 0);\n\n        IPriceProvidersRepository priceProvidersRepository = _params.siloRepository.priceProvidersRepository();\n\n        uint256[] memory borrowValues = convertAmountsToValues(\n            priceProvidersRepository,\n            _params.assets,\n            totalBorrowAmounts\n        );\n\n        // value of user's total debt\n        uint256 borrowTotalValue = EasyMathV2.sum(borrowValues);\n\n        if (borrowTotalValue == 0) return (0, 0);\n\n        uint256[] memory collateralValues = getUserCollateralValues(priceProvidersRepository, _params);\n\n        // value of user's collateral\n        uint256 collateralTotalValue = EasyMathV2.sum(collateralValues);\n\n        if (collateralTotalValue == 0) return (_INFINITY, 0);\n\n        // value of theoretical debt user can have depending on TypeofLTV\n        uint256 borrowAvailableTotalValue = _getTotalAvailableToBorrowValue(\n            _params.siloRepository,\n            address(_params.silo),\n            _params.assets,\n            _secondLtvType,\n            collateralValues\n        );\n\n        currentUserLTV = borrowTotalValue * _PRECISION_DECIMALS / collateralTotalValue;\n\n        // one of SolvencyV2.TypeofLTV\n        secondLTV = borrowAvailableTotalValue * _PRECISION_DECIMALS / collateralTotalValue;\n    }\n\n    /// @notice Calculates chosen LTV limit\n    /// @dev This function should be used by external actors like SiloLens and UI/subgraph. `calculateLTVs` is\n    /// optimized for protocol use and may not return second LVT calculation when they are not needed.\n    /// @param _params `SolvencyV2.SolvencyParams` struct with needed params for calculation\n    /// @param _ltvType acceptable values are only TypeofLTV.MaximumLTV or TypeofLTV.LiquidationThreshold\n    /// @return limit theoretical LTV limit of `_ltvType`\n    function calculateLTVLimit(SolvencyParams memory _params, TypeofLTV _ltvType)\n        internal\n        view\n        returns (uint256 limit)\n    {\n        IPriceProvidersRepository priceProvidersRepository = _params.siloRepository.priceProvidersRepository();\n\n        uint256[] memory collateralValues = getUserCollateralValues(priceProvidersRepository, _params);\n\n        // value of user's collateral\n        uint256 collateralTotalValue = EasyMathV2.sum(collateralValues);\n\n        if (collateralTotalValue == 0) return 0;\n\n        // value of theoretical debt user can have depending on TypeofLTV\n        uint256 borrowAvailableTotalValue = _getTotalAvailableToBorrowValue(\n            _params.siloRepository,\n            address(_params.silo),\n            _params.assets,\n            _ltvType,\n            collateralValues\n        );\n\n        limit = borrowAvailableTotalValue * _PRECISION_DECIMALS / collateralTotalValue;\n    }\n\n    /// @notice Returns worth (in quote token) of each collateral deposit of a user\n    /// @param _priceProvidersRepository address of IPriceProvidersRepository where prices are read\n    /// @param _params `SolvencyV2.SolvencyParams` struct with needed params for calculation\n    /// @return collateralValues worth of each collateral deposit of a user as an array\n    function getUserCollateralValues(IPriceProvidersRepository _priceProvidersRepository, SolvencyParams memory _params)\n        internal\n        view\n        returns(uint256[] memory collateralValues)\n    {\n        uint256[] memory collateralAmounts = getCollateralAmounts(_params);\n        collateralValues = convertAmountsToValues(_priceProvidersRepository, _params.assets, collateralAmounts);\n    }\n\n    /// @notice Convert assets amounts to values in quote token (amount * price)\n    /// @param _priceProviderRepo address of IPriceProvidersRepository where prices are read\n    /// @param _assets array with assets for which prices are read\n    /// @param _amounts array of amounts\n    /// @return values array of values for corresponding assets\n    function convertAmountsToValues(\n        IPriceProvidersRepository _priceProviderRepo,\n        address[] memory _assets,\n        uint256[] memory _amounts\n    ) internal view returns (uint256[] memory values) {\n        if (_assets.length != _amounts.length) revert DifferentArrayLength();\n\n        values = new uint256[](_assets.length);\n\n        for (uint256 i = 0; i < _assets.length; i++) {\n            if (_amounts[i] == 0) continue;\n\n            uint256 assetPrice = _priceProviderRepo.getPrice(_assets[i]);\n            uint8 assetDecimals = ERC20(_assets[i]).decimals();\n\n            values[i] = _amounts[i].toValue(assetPrice, assetDecimals);\n        }\n    }\n\n    /// @notice Get amount of collateral for each asset\n    /// @param _params `SolvencyV2.SolvencyParams` struct with needed params for calculation\n    /// @return collateralAmounts array of amounts for each token in Silo. May contain zero values if user\n    /// did not deposit given collateral token.\n    function getCollateralAmounts(SolvencyParams memory _params)\n        internal\n        view\n        returns (uint256[] memory collateralAmounts)\n    {\n        if (_params.assets.length != _params.assetStates.length) {\n            revert DifferentArrayLength();\n        }\n\n        collateralAmounts = new uint256[](_params.assets.length);\n\n        for (uint256 i = 0; i < _params.assets.length; i++) {\n            uint256 userCollateralTokenBalance = _params.assetStates[i].collateralToken.balanceOf(_params.user);\n            uint256 userCollateralOnlyTokenBalance = _params.assetStates[i].collateralOnlyToken.balanceOf(_params.user);\n\n            if (userCollateralTokenBalance + userCollateralOnlyTokenBalance == 0) continue;\n\n            uint256 rcomp = getRcomp(_params.silo, _params.siloRepository, _params.assets[i], block.timestamp);\n\n            collateralAmounts[i] = getUserCollateralAmount(\n                _params.assetStates[i],\n                userCollateralTokenBalance,\n                userCollateralOnlyTokenBalance,\n                rcomp,\n                _params.siloRepository\n            );\n        }\n    }\n\n    /// @notice Get amount of debt for each asset\n    /// @param _params `SolvencyV2.SolvencyParams` struct with needed params for calculation\n    /// @return totalBorrowAmounts array of amounts for each token in Silo. May contain zero values if user\n    /// did not borrow given token.\n    function getBorrowAmounts(SolvencyParams memory _params)\n        internal\n        view\n        returns (uint256[] memory totalBorrowAmounts)\n    {\n        if (_params.assets.length != _params.assetStates.length) {\n            revert DifferentArrayLength();\n        }\n\n        totalBorrowAmounts = new uint256[](_params.assets.length);\n\n        for (uint256 i = 0; i < _params.assets.length; i++) {\n            uint256 rcomp = getRcomp(_params.silo, _params.siloRepository, _params.assets[i], block.timestamp);\n            totalBorrowAmounts[i] = getUserBorrowAmount(_params.assetStates[i], _params.user, rcomp);\n        }\n    }\n\n    /// @notice Get amount of deposited token, including collateralOnly deposits\n    /// @param _assetStates state of deposited asset in Silo\n    /// @param _userCollateralTokenBalance balance of user's share collateral token\n    /// @param _userCollateralOnlyTokenBalance balance of user's share collateralOnly token\n    /// @param _rcomp compounded interest rate to account for during calculations, could be 0\n    /// @param _siloRepository SiloRepository address\n    /// @return amount of underlying token deposited, including collateralOnly deposit\n    function getUserCollateralAmount(\n        ISilo.AssetStorage memory _assetStates,\n        uint256 _userCollateralTokenBalance,\n        uint256 _userCollateralOnlyTokenBalance,\n        uint256 _rcomp,\n        ISiloRepository _siloRepository\n    ) internal view returns (uint256) {\n        uint256 assetAmount = _userCollateralTokenBalance == 0 ? 0 : _userCollateralTokenBalance.toAmount(\n            totalDepositsWithInterest(\n                _assetStates.totalDeposits,\n                _assetStates.totalBorrowAmount,\n                _siloRepository.protocolShareFee(),\n                _rcomp\n            ),\n            _assetStates.collateralToken.totalSupply()\n        );\n\n        uint256 assetCollateralOnlyAmount = _userCollateralOnlyTokenBalance == 0\n            ? 0\n            : _userCollateralOnlyTokenBalance.toAmount(\n                _assetStates.collateralOnlyDeposits,\n                _assetStates.collateralOnlyToken.totalSupply()\n            );\n\n        return assetAmount + assetCollateralOnlyAmount;\n    }\n\n    /// @notice Get amount of borrowed token\n    /// @param _assetStates state of borrowed asset in Silo\n    /// @param _user user wallet address for which to read debt\n    /// @param _rcomp compounded interest rate to account for during calculations, could be 0\n    /// @return amount of borrowed token\n    function getUserBorrowAmount(ISilo.AssetStorage memory _assetStates, address _user, uint256 _rcomp)\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 balance = _assetStates.debtToken.balanceOf(_user);\n        if (balance == 0) return 0;\n\n        uint256 totalBorrowAmountCached = totalBorrowAmountWithInterest(_assetStates.totalBorrowAmount, _rcomp);\n        return balance.toAmountRoundUp(totalBorrowAmountCached, _assetStates.debtToken.totalSupply());\n    }\n\n    /// @notice Get compounded interest rate from the model\n    /// @param _silo Silo address\n    /// @param _siloRepository SiloRepository address\n    /// @param _asset address of asset for which to read interest rate\n    /// @param _timestamp used to determine amount of time from last rate update\n    /// @return rcomp compounded interest rate for an asset\n    function getRcomp(ISilo _silo, ISiloRepository _siloRepository, address _asset, uint256 _timestamp)\n        internal\n        view\n        returns (uint256 rcomp)\n    {\n        IInterestRateModel model = _siloRepository.getInterestRateModel(address(_silo), _asset);\n        rcomp = model.getCompoundInterestRate(address(_silo), _asset, _timestamp);\n    }\n\n    /// @notice Returns total deposits with interest dynamically calculated with the provided rComp\n    /// @param _assetTotalDeposits total deposits for asset\n    /// @param _assetTotalBorrows total borrows for asset\n    /// @param _protocolShareFee `siloRepository.protocolShareFee()`\n    /// @param _rcomp compounded interest rate\n    /// @return _totalDepositsWithInterests total deposits amount with interest\n    function totalDepositsWithInterest(\n        uint256 _assetTotalDeposits,\n        uint256 _assetTotalBorrows,\n        uint256 _protocolShareFee,\n        uint256 _rcomp\n    )\n        internal\n        pure\n        returns (uint256 _totalDepositsWithInterests)\n    {\n        uint256 depositorsShare = _PRECISION_DECIMALS - _protocolShareFee;\n\n        return _assetTotalDeposits + _assetTotalBorrows * _rcomp / _PRECISION_DECIMALS * depositorsShare /\n            _PRECISION_DECIMALS;\n    }\n\n    /// @notice Returns total borrow amount with interest dynamically calculated with the provided rComp\n    /// @param _totalBorrowAmount total borrow amount\n    /// @param _rcomp compounded interest rate\n    /// @return totalBorrowAmountWithInterests total borrow amount with interest\n    function totalBorrowAmountWithInterest(uint256 _totalBorrowAmount, uint256 _rcomp)\n        internal\n        pure\n        returns (uint256 totalBorrowAmountWithInterests)\n    {\n        totalBorrowAmountWithInterests = _totalBorrowAmount + _totalBorrowAmount * _rcomp / _PRECISION_DECIMALS;\n    }\n\n    /// @notice Calculates protocol liquidation fee and new protocol total fees collected\n    /// @param _protocolEarnedFees amount of total collected fees so far\n    /// @param _amount amount on which we will apply fee\n    /// @param _liquidationFee liquidation fee in SolvencyV2._PRECISION_DECIMALS\n    /// @return liquidationFeeAmount calculated interest\n    /// @return newProtocolEarnedFees the new total amount of protocol fees\n    function calculateLiquidationFee(uint256 _protocolEarnedFees, uint256 _amount, uint256 _liquidationFee)\n        internal\n        pure\n        returns (uint256 liquidationFeeAmount, uint256 newProtocolEarnedFees)\n    {\n        unchecked {\n            // If we overflow on multiplication it should not revert tx, we will get lower fees\n            liquidationFeeAmount = _amount * _liquidationFee / SolvencyV2._PRECISION_DECIMALS;\n\n            if (_protocolEarnedFees > type(uint256).max - liquidationFeeAmount) {\n                newProtocolEarnedFees = type(uint256).max;\n                liquidationFeeAmount = type(uint256).max - _protocolEarnedFees;\n            } else {\n                newProtocolEarnedFees = _protocolEarnedFees + liquidationFeeAmount;\n            }\n        }\n    }\n\n    /// @notice Calculates theoretical value (in quote token) that user could borrow based given collateral value\n    /// @param _siloRepository SiloRepository address\n    /// @param _silo Silo address\n    /// @param _asset address of collateral token\n    /// @param _type type of LTV limit to use for calculations\n    /// @param _collateralValue value of collateral deposit (in quote token)\n    /// @return availableToBorrow value (in quote token) that user can borrow against collateral value\n    function _getAvailableToBorrowValue(\n        ISiloRepository _siloRepository,\n        address _silo,\n        address _asset,\n        TypeofLTV _type,\n        uint256 _collateralValue\n    ) private view returns (uint256 availableToBorrow) {\n        uint256 assetLTV;\n\n        if (_type == TypeofLTV.MaximumLTV) {\n            assetLTV = _siloRepository.getMaximumLTV(_silo, _asset);\n        } else if (_type == TypeofLTV.LiquidationThreshold) {\n            assetLTV = _siloRepository.getLiquidationThreshold(_silo, _asset);\n        } else {\n            revert UnsupportedLTVType();\n        }\n\n        // value that can be borrowed against the deposit\n        // ie. for assetLTV = 50%, 1 ETH * 50% = 0.5 ETH of available to borrow\n        availableToBorrow = _collateralValue * assetLTV / _PRECISION_DECIMALS;\n    }\n\n    /// @notice Calculates theoretical value (in quote token) that user can borrow based on deposited collateral\n    /// @param _siloRepository SiloRepository address\n    /// @param _silo Silo address\n    /// @param _assets array with assets\n    /// @param _ltvType type of LTV limit to use for calculations\n    /// acceptable values are only TypeofLTV.MaximumLTV or TypeofLTV.LiquidationThreshold\n    /// @param _collateralValues value (worth in quote token) of each deposit made by user\n    /// @return totalAvailableToBorrowValue value (in quote token) that user can borrow against collaterals\n    function _getTotalAvailableToBorrowValue(\n        ISiloRepository _siloRepository,\n        address _silo,\n        address[] memory _assets,\n        TypeofLTV _ltvType,\n        uint256[] memory _collateralValues\n    ) private view returns (uint256 totalAvailableToBorrowValue) {\n        if (_assets.length != _collateralValues.length) revert DifferentArrayLength();\n\n        for (uint256 i = 0; i < _assets.length; i++) {\n            totalAvailableToBorrowValue += _getAvailableToBorrowValue(\n                _siloRepository,\n                _silo,\n                _assets[i],\n                _ltvType,\n                _collateralValues[i]\n            );\n        }\n    }\n}\n"
    },
    "contracts/lib/TokenHelper.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\n\nlibrary TokenHelper {\n    uint256 private constant _BYTES32_SIZE = 32;\n\n    error TokenIsNotAContract();\n\n    function assertAndGetDecimals(address _token) internal view returns (uint256) {\n        (bool hasMetadata, bytes memory data) = _tokenMetadataCall(_token, abi.encodeCall(IERC20Metadata.decimals,()));\n\n        // decimals() is optional in the ERC20 standard, so if metadata is not accessible\n        // we assume there are no decimals and use 0.\n        if (!hasMetadata) {\n            return 0;\n        }\n\n        return abi.decode(data, (uint8));\n    }\n\n    /// @dev Returns the symbol for the provided ERC20 token.\n    /// An empty string is returned if the call to the token didn't succeed.\n    /// @param _token address of the token to get the symbol for\n    /// @return assetSymbol the token symbol\n    function symbol(address _token) internal view returns (string memory assetSymbol) {\n        (bool hasMetadata, bytes memory data) = _tokenMetadataCall(_token, abi.encodeCall(IERC20Metadata.symbol,()));\n\n        if (!hasMetadata || data.length == 0) {\n            return \"?\";\n        } else if (data.length == _BYTES32_SIZE) {\n            return string(removeZeros(data));\n        } else {\n            return abi.decode(data, (string));\n        }\n    }\n\n    /// @dev Removes bytes with value equal to 0 from the provided byte array.\n    /// @param _data byte array from which to remove zeroes\n    /// @return result byte array with zeroes removed \n    function removeZeros(bytes memory _data) internal pure returns (bytes memory result) {\n        uint256 n = _data.length;\n\n        unchecked {\n            for (uint256 i; i < n; i++) {\n                if (_data[i] == 0) continue;\n\n                result = abi.encodePacked(result, _data[i]);\n            }\n        }\n    }\n\n    /// @dev Performs a staticcall to the token to get its metadata (symbol, decimals, name)\n    function _tokenMetadataCall(address _token, bytes memory _data) private view returns(bool, bytes memory) {\n        // We need to do this before the call, otherwise the call will succeed even for EOAs\n        if (!Address.isContract(_token)) revert TokenIsNotAContract();\n\n        (bool success, bytes memory result) = _token.staticcall(_data);\n\n        // If the call reverted we assume the token doesn't follow the metadata extension\n        if (!success) {\n            return (false, \"\");\n        }\n\n        return (true, result);\n    }\n}\n"
    },
    "contracts/lib/TypesConversions.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.7.6 <=0.9.0;\n\n/// @title Types conversions\nlibrary TypesConversions {\n    function toUint8(int256 input) internal pure returns (uint8 output) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly { output := input }\n    }\n\n    function toUint256(int128 input) internal pure returns (uint256 output) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly { output := input }\n    }\n\n    function toInt128(uint8 input) internal pure returns (int128 output) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly { output := input }\n    }\n}\n"
    },
    "contracts/liquidation/interface/ILiquidationHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\n/// @notice LiquidationHelper IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\ninterface ILiquidationHelper {\n    /// @dev Liquidation scenarios that are supported by helper:\n    /// - Internal: fully on-chain, using internal swappers, magicians etc\n    ///   When 0x API can not handle the swap, we will use internal.\n    /// - Full0x: 0x will handle swap for collateral -> repay asset, then contract needs to do repay.\n    ///   Change that left after repay will be swapped to WETH using internal methods.\n    ///   This scenario is for A -> B or A, B -> C cases.\n    /// - Full0xWithChange: similar to Full0x, but all repay tokens that left, will be send to liquidator.\n    ///   BE bot needs to do another tx to swap change to ETH\n    ///   This scenario is for A -> B or A, B -> C cases\n    ///   Exception: WETH -> A, it should be full or internal\n    ///   Helper is supporting all the tokens internally, so only case, when we would need Full0xWithChange is when\n    ///   we didn't develop swapper/magician for some new asset yet. Call `liquidationSupported` to check it.\n    /// - Collateral0x: 0x will swap collateral to native token, then from native -> repay asset contract handle it\n    ///   This is for A -> XAI, WETH, other cases of multiple repay tokens are not supported by 0x\n    /// - *Force: force option allows to liquidate even when liquidation is not profitable\n    enum LiquidationScenario {\n        Internal, Collateral0x, Full0x, Full0xWithChange,\n        InternalForce, Collateral0xForce, Full0xForce, Full0xWithChangeForce\n    }\n}\n"
    },
    "contracts/liquidation/lib/LiquidationScenarioDetector.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"../interface/ILiquidationHelper.sol\";\n\n/// @notice Library for processing LiquidationScenarios data\nlibrary LiquidationScenarioDetector {\n    function isFull0x(ILiquidationHelper.LiquidationScenario _scenario) internal pure returns (bool) {\n        return _scenario == ILiquidationHelper.LiquidationScenario.Full0x\n            || _scenario == ILiquidationHelper.LiquidationScenario.Full0xForce;\n    }\n\n    function isFull0xWithChange(ILiquidationHelper.LiquidationScenario _scenario) internal pure returns (bool) {\n        return _scenario == ILiquidationHelper.LiquidationScenario.Full0xWithChange\n            || _scenario == ILiquidationHelper.LiquidationScenario.Full0xWithChangeForce;\n    }\n\n    function isCollateral0x(ILiquidationHelper.LiquidationScenario _scenario) internal pure returns (bool) {\n        return _scenario == ILiquidationHelper.LiquidationScenario.Collateral0x\n            || _scenario == ILiquidationHelper.LiquidationScenario.Collateral0xForce;\n    }\n\n    function isInternal(ILiquidationHelper.LiquidationScenario _scenario) internal pure returns (bool) {\n        return _scenario == ILiquidationHelper.LiquidationScenario.Internal\n            || _scenario == ILiquidationHelper.LiquidationScenario.InternalForce;\n    }\n\n    function calculateEarnings(ILiquidationHelper.LiquidationScenario _scenario) internal pure returns (bool) {\n        return _scenario == ILiquidationHelper.LiquidationScenario.Internal\n            || _scenario == ILiquidationHelper.LiquidationScenario.Collateral0x\n            || _scenario == ILiquidationHelper.LiquidationScenario.Full0x\n            || _scenario == ILiquidationHelper.LiquidationScenario.Full0xWithChange;\n    }\n}\n"
    },
    "contracts/liquidation/LiquidationHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"./magicians/interfaces/IMagician.sol\";\nimport \"../SiloLens.sol\";\nimport \"../interfaces/ISiloFactory.sol\";\nimport \"../interfaces/IPriceProviderV2.sol\";\nimport \"../interfaces/ISwapper.sol\";\nimport \"../interfaces/ISiloRepository.sol\";\nimport \"../interfaces/IPriceProvidersRepository.sol\";\nimport \"../interfaces/IWrappedNativeToken.sol\";\nimport \"../priceProviders/chainlinkV3/ChainlinkV3PriceProvider.sol\";\n\nimport \"../lib/Ping.sol\";\nimport \"../lib/RevertBytes.sol\";\nimport \"./ZeroExSwap.sol\";\nimport \"./lib/LiquidationScenarioDetector.sol\";\nimport \"./LiquidationRepay.sol\";\n\n/// @notice LiquidationHelper IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\n/// see https://github.com/silo-finance/liquidation#readme for details how liquidation process should look like\ncontract LiquidationHelper is ILiquidationHelper, IFlashLiquidationReceiver, ZeroExSwap, LiquidationRepay, Ownable {\n    using RevertBytes for bytes;\n    using SafeERC20 for IERC20;\n    using Address for address payable;\n    using LiquidationScenarioDetector for LiquidationScenario;\n\n    struct MagicianConfig {\n        address asset;\n        IMagician magician;\n    }\n\n    struct SwapperConfig {\n        IPriceProvider provider;\n        ISwapper swapper;\n    }\n\n    uint256 immutable private _BASE_TX_COST; // solhint-disable-line var-name-mixedcase\n    ISiloRepository public immutable SILO_REPOSITORY; // solhint-disable-line var-name-mixedcase\n    IPriceProvidersRepository public immutable PRICE_PROVIDERS_REPOSITORY; // solhint-disable-line var-name-mixedcase\n    SiloLens public immutable LENS; // solhint-disable-line var-name-mixedcase\n    IERC20 public immutable QUOTE_TOKEN; // solhint-disable-line var-name-mixedcase\n\n    /// @dev token receiver will get all rewards from liquidation, does not matter who will execute tx\n    address payable public immutable TOKENS_RECEIVER; // solhint-disable-line var-name-mixedcase\n\n    ChainlinkV3PriceProvider public immutable CHAINLINK_PRICE_PROVIDER; // solhint-disable-line var-name-mixedcase\n\n    mapping(IPriceProvider => ISwapper) public swappers;\n    // asset => magician\n    mapping(address => IMagician) public magicians;\n\n    error InvalidSiloLens();\n    error InvalidSiloRepository();\n    error LiquidationNotProfitable(uint256 inTheRed);\n    error NotSilo();\n    error PriceProviderNotFound();\n    error FallbackPriceProviderNotSet();\n    error SwapperNotFound();\n    error MagicianNotFound();\n    error SwapAmountInFailed();\n    error SwapAmountOutFailed();\n    error UsersMustMatchSilos();\n    error InvalidChainlinkProviders();\n    error InvalidMagicianConfig();\n    error InvalidSwapperConfig();\n    error InvalidTowardsAssetConvertion();\n    error InvalidScenario();\n    error Max0xSwapsIs2();\n\n    event SwapperConfigured(IPriceProvider provider, ISwapper swapper);\n    event MagicianConfigured(address asset, IMagician magician);\n\n    /// @dev event emitted on user liquidation\n    /// @param silo Silo where liquidation happen\n    /// @param user User that been liquidated\n    /// @param earned amount of ETH earned (excluding gas cost)\n    /// @param estimatedEarnings for LiquidationScenario.Full0xWithChange `earned` amount is estimated,\n    /// because tokens were not sold for ETH inside transaction\n    event LiquidationExecuted(address indexed silo, address indexed user, uint256 earned, bool estimatedEarnings);\n\n    constructor (\n        address _repository,\n        address _chainlinkPriceProvider,\n        address _lens,\n        address _exchangeProxy,\n        MagicianConfig[] memory _magicians,\n        SwapperConfig[] memory _swappers,\n        uint256 _baseCost,\n        address payable _tokensReceiver\n    ) ZeroExSwap(_exchangeProxy) {\n        if (!Ping.pong(SiloLens(_lens).lensPing)) revert InvalidSiloLens();\n\n        if (!Ping.pong(ISiloRepository(_repository).siloRepositoryPing)) {\n            revert InvalidSiloRepository();\n        }\n\n        SILO_REPOSITORY = ISiloRepository(_repository);\n        LENS = SiloLens(_lens);\n\n        // configure swappers\n        _configureSwappers(_swappers);\n        // configure magicians\n        _configureMagicians(_magicians);\n\n        PRICE_PROVIDERS_REPOSITORY = ISiloRepository(_repository).priceProvidersRepository();\n\n        CHAINLINK_PRICE_PROVIDER = ChainlinkV3PriceProvider(_chainlinkPriceProvider);\n\n        QUOTE_TOKEN = IERC20(PRICE_PROVIDERS_REPOSITORY.quoteToken());\n        _BASE_TX_COST = _baseCost;\n\n        TOKENS_RECEIVER = _tokensReceiver;\n    }\n\n    receive() external payable {}\n\n    function executeLiquidation(\n        address _user,\n        ISilo _silo,\n        LiquidationScenario _scenario,\n        SwapInput0x[] calldata _swapsInputs0x\n    ) external {\n        if (_swapsInputs0x.length > 2) revert Max0xSwapsIs2();\n\n        uint256 gasStart = gasleft();\n        address[] memory users = new address[](1);\n        users[0] = _user;\n\n        _silo.flashLiquidate(users, abi.encode(gasStart, _scenario, _swapsInputs0x));\n    }\n\n    function setSwappers(SwapperConfig[] calldata _swappers) external onlyOwner {\n        _configureSwappers(_swappers);\n    }\n\n    function setMagicians(MagicianConfig[] calldata _magicians) external onlyOwner {\n        _configureMagicians(_magicians);\n    }\n\n    /// @notice this is working example of how to perform liquidation, this method will be called by Silo\n    /// Keep in mind, that this helper might NOT choose the best swap option.\n    /// For best results (highest earnings) you probably want to implement your own callback and maybe use some\n    /// dex aggregators.\n    /// @dev after liquidation we always send remaining tokens so contract should never has any leftover\n    function siloLiquidationCallback(\n        address _user,\n        address[] calldata _assets,\n        uint256[] calldata _receivedCollaterals,\n        uint256[] calldata _shareAmountsToRepaid,\n        bytes calldata _flashReceiverData\n    ) external override {\n        if (!SILO_REPOSITORY.isSilo(msg.sender)) revert NotSilo();\n\n        address payable executor = TOKENS_RECEIVER;\n\n        (\n            uint256 gasStart,\n            LiquidationScenario scenario,\n            SwapInput0x[] memory swapInputs\n        ) = abi.decode(_flashReceiverData, (uint256, LiquidationScenario, SwapInput0x[]));\n\n        if (swapInputs.length != 0) {\n            _execute0x(swapInputs);\n        }\n\n        uint256 earned = _siloLiquidationCallbackExecution(\n            scenario,\n            _user,\n            _assets,\n            _receivedCollaterals,\n            _shareAmountsToRepaid\n        );\n\n        // I needed to move some part of execution from from `_siloLiquidationCallbackExecution`,\n        // because of \"stack too deep\" error\n        bool estimatedEarnings = scenario.isFull0x() || scenario.isFull0xWithChange();\n        bool checkForProfit = scenario.calculateEarnings();\n\n        if (estimatedEarnings) {\n            earned = _estimateEarningsAndTransferChange(_assets, _shareAmountsToRepaid, executor, checkForProfit);\n        } else {\n            _transferNative(executor, earned);\n        }\n\n        emit LiquidationExecuted(msg.sender, _user, earned, estimatedEarnings);\n\n        // do not check for profitability when forcing\n        if (checkForProfit) {\n            ensureTxIsProfitable(gasStart, earned);\n        }\n    }\n\n    /// @dev This method should be used to made decision about `Full0x` vs `Full0xWithChange` liquidation scenario.\n    /// @return TRUE, if asset liquidation is supported internally, otherwise FALSE\n    function liquidationSupported(address _asset) external view returns (bool) {\n        if (_asset == address(QUOTE_TOKEN)) return true;\n        if (address(magicians[_asset]) != address(0)) return true;\n\n        try this.findPriceProvider(_asset) returns (IPriceProvider) {\n            return true;\n        } catch (bytes memory) {\n            // we do not care about reason\n        }\n\n        return false;\n    }\n\n    function checkSolvency(address[] calldata _users, ISilo[] calldata _silos) external view returns (bool[] memory) {\n        if (_users.length != _silos.length) revert UsersMustMatchSilos();\n\n        bool[] memory solvency = new bool[](_users.length);\n\n        for (uint256 i; i < _users.length;) {\n            solvency[i] = _silos[i].isSolvent(_users[i]);\n            // we will never have that many users to overflow\n            unchecked { i++; }\n        }\n\n        return solvency;\n    }\n\n    function checkDebt(address[] calldata _users, ISilo[] calldata _silos) external view returns (bool[] memory) {\n        bool[] memory hasDebt = new bool[](_users.length);\n\n        for (uint256 i; i < _users.length;) {\n            hasDebt[i] = LENS.inDebt(_silos[i], _users[i]);\n            // we will never have that many users to overflow\n            unchecked { i++; }\n        }\n\n        return hasDebt;\n    }\n\n    function ensureTxIsProfitable(uint256 _gasStart, uint256 _earnedEth) public view returns (uint256 txFee) {\n        unchecked {\n            // gas calculation will not overflow because values are never that high\n            // `gasStart` is external value, but it value that we initiating and Silo contract passing it to us\n            uint256 gasSpent = _gasStart - gasleft() + _BASE_TX_COST;\n            txFee = tx.gasprice * gasSpent;\n\n            if (txFee > _earnedEth) {\n                // it will not underflow because we check above\n                revert LiquidationNotProfitable(txFee - _earnedEth);\n            }\n        }\n    }\n\n    function findPriceProvider(address _asset) public view returns (IPriceProvider priceProvider) {\n        priceProvider = PRICE_PROVIDERS_REPOSITORY.priceProviders(_asset);\n\n        if (address(priceProvider) == address(0)) revert PriceProviderNotFound();\n\n        // check for backwards compatibility with chainlink provider\n        if (priceProvider == CHAINLINK_PRICE_PROVIDER) {\n            priceProvider = CHAINLINK_PRICE_PROVIDER.getFallbackProvider(_asset);\n            if (address(priceProvider) == address(0)) revert FallbackPriceProviderNotSet();\n            return priceProvider;\n        }\n\n        // only IPriceProviderV2 has `IPriceProviderV2()`\n        try IPriceProviderV2(address(priceProvider)).offChainProvider() returns (bool isOffChainProvider) {\n            if (isOffChainProvider) {\n                priceProvider = IPriceProviderV2(address(priceProvider)).getFallbackProvider(_asset);\n                if (address(priceProvider) == address(0)) revert FallbackPriceProviderNotSet();\n            }\n        } catch (bytes memory) {}\n    }\n\n    function _execute0x(SwapInput0x[] memory _swapInputs) internal {\n        for (uint256 i; i < _swapInputs.length;) {\n            fillQuote(_swapInputs[i].sellToken, _swapInputs[i].allowanceTarget, _swapInputs[i].swapCallData);\n            // we can not have that much data in array to overflow\n            unchecked { i++; }\n        }\n    }\n\n    function _siloLiquidationCallbackExecution(\n        LiquidationScenario _scenario,\n        address _user,\n        address[] calldata _assets,\n        uint256[] calldata _receivedCollaterals,\n        uint256[] calldata _shareAmountsToRepaid\n    ) internal returns (uint256 earned) {\n        if (_scenario.isFull0x() || _scenario.isFull0xWithChange()) {\n            // we should have repay tokens ready to go\n            _repay(ISilo(msg.sender), _user, _assets, _shareAmountsToRepaid);\n            // change that left after repay will be send to `TOKENS_RECEIVER` by `_estimateEarningsAndTransferChange`\n            return 0;\n        }\n\n        if (_scenario.isInternal()) {\n            return _runInternalScenario(\n                _user,\n                _assets,\n                _receivedCollaterals,\n                _shareAmountsToRepaid\n            );\n        }\n\n        if (_scenario.isCollateral0x()) {\n            return _runCollateral0xScenario(\n                _user,\n                _assets,\n                _shareAmountsToRepaid\n            );\n        }\n\n        revert InvalidScenario();\n    }\n\n    function _runCollateral0xScenario(\n        address _user,\n        address[] calldata _assets,\n        uint256[] calldata _shareAmountsToRepaid\n    ) internal returns (uint256 earned) {\n        // we have WETH, we need to deal with swap WETH -> repay asset internally\n        _swapWrappedNativeForRepayAssets(_assets, _shareAmountsToRepaid);\n\n        _repay(ISilo(msg.sender), _user, _assets, _shareAmountsToRepaid);\n\n        earned = QUOTE_TOKEN.balanceOf(address(this));\n    }\n\n    function _runInternalScenario(\n        address _user,\n        address[] calldata _assets,\n        uint256[] calldata _receivedCollaterals,\n        uint256[] calldata _shareAmountsToRepaid\n    ) internal returns (uint256 earned) {\n        uint256 quoteAmountFromCollaterals = _swapAllForQuote(_assets, _receivedCollaterals);\n        uint256 quoteSpentOnRepay = _swapWrappedNativeForRepayAssets(_assets, _shareAmountsToRepaid);\n\n        _repay(ISilo(msg.sender), _user, _assets, _shareAmountsToRepaid);\n        earned = quoteAmountFromCollaterals - quoteSpentOnRepay;\n    }\n\n    function _estimateEarningsAndTransferChange(\n        address[] calldata _assets,\n        uint256[] calldata _shareAmountsToRepaid,\n        address payable _liquidator,\n        bool _returnEarnedAmount\n    ) internal returns (uint256 earned) {\n        // change that left after repay will be send to `_liquidator`\n        for (uint256 i = 0; i < _assets.length;) {\n            if (_shareAmountsToRepaid[i] != 0) {\n                uint256 amount = IERC20(_assets[i]).balanceOf(address(this));\n\n                if (_assets[i] == address(QUOTE_TOKEN)) {\n                    if (_returnEarnedAmount) {\n                        // balance will not overflow\n                        unchecked { earned += amount; }\n                    }\n\n                    _transferNative(_liquidator, amount);\n                } else {\n                    if (_returnEarnedAmount) {\n                        // we processing numbers that Silo created, if Silo did not over/under flow, we will not as well\n                        unchecked { earned += amount * PRICE_PROVIDERS_REPOSITORY.getPrice(_assets[i]) / 1e18; }\n                    }\n\n                    IERC20(_assets[i]).transfer(_liquidator, amount);\n                }\n            }\n\n            // we will never have that many assets to overflow\n            unchecked { i++; }\n        }\n    }\n\n    function _swapAllForQuote(\n        address[] calldata _assets,\n        uint256[] calldata _receivedCollaterals\n    ) internal returns (uint256 quoteAmount) {\n        // swap all for quote token\n\n        unchecked {\n            // we will not overflow with `i` in a lifetime\n            for (uint256 i = 0; i < _assets.length; i++) {\n                // if silo was able to handle solvency calculations, then we can handle quoteAmount without safe math\n                quoteAmount += _swapForQuote(_assets[i], _receivedCollaterals[i]);\n            }\n        }\n    }\n\n    function _swapWrappedNativeForRepayAssets(\n        address[] calldata _assets,\n        uint256[] calldata _shareAmountsToRepaid\n    ) internal returns (uint256 quoteSpendOnRepay) {\n        for (uint256 i = 0; i < _assets.length;) {\n            if (_shareAmountsToRepaid[i] != 0) {\n                // if silo was able to handle solvency calculations, then we can handle amounts without safe math here\n                unchecked {\n                    quoteSpendOnRepay += _swapForAsset(_assets[i], _shareAmountsToRepaid[i]);\n                }\n            }\n\n            // we will never have that many assets to overflow\n            unchecked { i++; }\n        }\n    }\n\n    /// @notice We assume that quoteToken is wrapped native token\n    function _transferNative(address payable _to, uint256 _amount) internal {\n        IWrappedNativeToken(address(QUOTE_TOKEN)).withdraw(_amount);\n        _to.sendValue(_amount);\n    }\n\n    /// @dev it swaps asset token for quote\n    /// @param _asset address\n    /// @param _amount exact amount of asset to swap\n    /// @return amount of quote token\n    function _swapForQuote(address _asset, uint256 _amount) internal returns (uint256) {\n        address quoteToken = address(QUOTE_TOKEN);\n\n        if (_amount == 0 || _asset == quoteToken) return _amount;\n\n        address magician = address(magicians[_asset]);\n\n        if (magician != address(0)) {\n            bytes memory result = _safeDelegateCall(\n                magician,\n                abi.encodeCall(IMagician.towardsNative, (_asset, _amount)),\n                \"towardsNativeFailed\"\n            );\n\n            (address tokenOut, uint256 amountOut) = abi.decode(result, (address, uint256));\n\n            return _swapForQuote(tokenOut, amountOut);\n        }\n\n        (IPriceProvider provider, ISwapper swapper) = _resolveProviderAndSwapper(_asset);\n\n        // no need for safe approval, because we always using 100%\n        // Low level call needed to support non-standard `ERC20.approve` eg like `USDT.approve`\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success,) = _asset.call(abi.encodeCall(IERC20.approve, (swapper.spenderToApprove(), _amount)));\n        if (!success) revert ApprovalFailed();\n\n        bytes memory callData = abi.encodeCall(ISwapper.swapAmountIn, (\n            _asset, quoteToken, _amount, address(provider), _asset\n        ));\n\n        bytes memory data = _safeDelegateCall(address(swapper), callData, \"swapAmountIn\");\n\n        return abi.decode(data, (uint256));\n    }\n\n    /// @dev it swaps quote token for asset\n    /// @param _asset address\n    /// @param _amount exact amount OUT, what we want to receive\n    /// @return amount of quote token used for swap\n    function _swapForAsset(address _asset, uint256 _amount) internal returns (uint256) {\n        address quoteToken = address(QUOTE_TOKEN);\n\n        if (_amount == 0 || quoteToken == _asset) return _amount;\n\n        address magician = address(magicians[_asset]);\n\n        if (magician != address(0)) {\n            bytes memory result = _safeDelegateCall(\n                magician,\n                abi.encodeCall(IMagician.towardsAsset, (_asset, _amount)),\n                \"towardsAssetFailed\"\n            );\n\n            (address tokenOut, uint256 amountOut) = abi.decode(result, (address, uint256));\n\n            // towardsAsset should convert to `_asset`\n            if (tokenOut != _asset) revert InvalidTowardsAssetConvertion();\n\n            return amountOut;\n        }\n\n        (IPriceProvider provider, ISwapper swapper) = _resolveProviderAndSwapper(_asset);\n\n        address spender = swapper.spenderToApprove();\n\n        IERC20(quoteToken).approve(spender, type(uint256).max);\n\n        bytes memory callData = abi.encodeCall(ISwapper.swapAmountOut, (\n            quoteToken, _asset, _amount, address(provider), _asset\n        ));\n\n        bytes memory data = _safeDelegateCall(address(swapper), callData, \"SwapAmountOutFailed\");\n\n        IERC20(quoteToken).approve(spender, 0);\n\n        return abi.decode(data, (uint256));\n    }\n\n    function _resolveProviderAndSwapper(address _asset) internal view returns (IPriceProvider, ISwapper) {\n        IPriceProvider priceProvider = findPriceProvider(_asset);\n\n        ISwapper swapper = _resolveSwapper(priceProvider);\n\n        return (priceProvider, swapper);\n    }\n\n    function _resolveSwapper(IPriceProvider priceProvider) internal view returns (ISwapper) {\n        ISwapper swapper = swappers[priceProvider];\n\n        if (address(swapper) == address(0)) {\n            revert SwapperNotFound();\n        }\n\n        return swapper;\n    }\n\n    function _safeDelegateCall(\n        address _target,\n        bytes memory _callData,\n        string memory _mgs\n    )\n        internal\n        returns (bytes memory data)\n    {\n        bool success;\n        // solhint-disable-next-line avoid-low-level-calls\n        (success, data) = address(_target).delegatecall(_callData);\n        if (!success || data.length == 0) data.revertBytes(_mgs);\n    }\n\n    function _configureSwappers(SwapperConfig[] memory _swappers) internal {\n        for (uint256 i = 0; i < _swappers.length; i++) {\n            IPriceProvider provider = _swappers[i].provider;\n            ISwapper swapper = _swappers[i].swapper;\n\n            if (address(provider) == address(0) || address(swapper) == address(0)) {\n                revert InvalidSwapperConfig();\n            }\n\n            swappers[provider] = swapper;\n\n            emit SwapperConfigured(provider, swapper);\n        }\n    }\n\n    function _configureMagicians(MagicianConfig[] memory _magicians) internal {\n        for (uint256 i = 0; i < _magicians.length; i++) {\n            address asset = _magicians[i].asset;\n            IMagician magician = _magicians[i].magician;\n\n            if (asset == address(0) || address(magician) == address(0)) {\n                revert InvalidMagicianConfig();\n            }\n\n            magicians[asset] = magician;\n\n            emit MagicianConfigured(asset, magician);\n        }\n    }\n}\n"
    },
    "contracts/liquidation/LiquidationRepay.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../interfaces/ISilo.sol\";\n\n/// @notice LiquidationHelper IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\n/// see https://github.com/silo-finance/liquidation#readme for details how liquidation process should look like\nabstract contract LiquidationRepay {\n\n    error RepayFailed();\n    error RepayApprovalFailed();\n\n    function _repay(\n        ISilo _silo,\n        address _user,\n        address[] calldata _assets,\n        uint256[] calldata _shareAmountsToRepaid\n    ) internal virtual {\n        for (uint256 i = 0; i < _assets.length;) {\n            if (_shareAmountsToRepaid[i] != 0) {\n                _repayAsset(_silo, _user, _assets[i], _shareAmountsToRepaid[i]);\n            }\n\n            // we will never have that many assets to overflow\n            unchecked { i++; }\n        }\n    }\n\n    function _repayAsset(\n        ISilo _silo,\n        address _user,\n        address _asset,\n        uint256 _shareAmountToRepaid\n    ) internal virtual {\n        // Low level call needed to support non-standard `ERC20.approve` eg like `USDT.approve`\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, ) = _asset.call(abi.encodeCall(IERC20.approve, (address(_silo), _shareAmountToRepaid)));\n        if (!success) revert RepayApprovalFailed();\n\n        _silo.repayFor(_asset, _user, _shareAmountToRepaid);\n\n        // DEFLATIONARY TOKENS ARE NOT SUPPORTED\n        // we are not using lower limits for swaps so we may not get enough tokens to do full repay\n        // our assumption here is that `_shareAmountsToRepaid[i]` is total amount to repay the full debt\n        // if after repay user has no debt in this asset, the swap is acceptable\n        if (_silo.assetStorage(_asset).debtToken.balanceOf(_user) != 0) {\n            revert RepayFailed();\n        }\n    }\n}\n"
    },
    "contracts/liquidation/magicians/_common/libraries/CalculateAmountIn256Lib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"../../interfaces/ICurvePoolLike256.sol\";\n\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\nlibrary CalculateAmountIn256Lib {\n    struct InputWithNormalization {\n        uint256 amountRequired;\n        uint256 one;\n        address pool;\n        uint256 i;\n        uint256 j;\n        uint256 iDecimals;\n        uint256 jDecimals;\n    }\n\n    error FailedNormalization();\n\n    function amountIn256(\n        uint256 _amountRequired,\n        uint256 _one, // One coin based on the coin decimals\n        address _pool,\n        uint256 _i,\n        uint256 _j\n    )\n        internal\n        view\n        returns (uint256 amountIn, uint256 amountOut)\n    {\n        ICurvePoolLike256 curvePool = ICurvePoolLike256(_pool);\n        uint256 rate = curvePool.get_dy(_i, _j, _one);\n\n        uint256 multiplied = _one * _amountRequired;\n        // We have safe math while doing `one * _amountRequired`. Division should be fine.\n        unchecked { amountIn = multiplied / rate; }\n\n        // `get_dy` is an increasing function.\n        // It should take ~ 1 - 6 iterations to `amountOut >= _amountRequired`.\n        while (true) {\n            amountOut = curvePool.get_dy(_i, _j, amountIn);\n\n            if (amountOut >= _amountRequired) {\n                return (amountIn, amountOut);\n            }\n\n            amountIn = _calcAmountIn(\n                amountIn,\n                _one,\n                rate,\n                _amountRequired,\n                amountOut\n            );\n        }\n    }\n\n    function amountIn256WithNormalization(InputWithNormalization memory _input)\n        internal\n        view\n        returns (uint256 amountIn, uint256 amountOut)\n    {\n        ICurvePoolLike256 curvePool = ICurvePoolLike256(_input.pool);\n        uint256 dy = curvePool.get_dy(_input.i, _input.j, _input.one);\n        // We do normalization of the rate as we will recive from the `get_dy` a value with `_jDecimals`\n        uint256 rate = normalizeWithDecimals(dy, _input.iDecimals, _input.jDecimals);\n        // Normalize `_input.amountRequired` to `_iDecimals` as we will use it\n        // for calculation of the `amountIn` value of the `_tokenIn`\n        uint256 amountRequired = normalizeWithDecimals(_input.amountRequired, _input.iDecimals, _input.jDecimals);\n        uint256 multiplied = _input.one * amountRequired;\n        // Zero value for amountIn is unacceptable.\n        assert(multiplied >= rate); // Otherwise, we may get zero.\n        // We have safe math while doing `one * amountRequired`. Division should be fine.\n        unchecked { amountIn = multiplied / rate; }\n\n        // `get_dy` is an increasing function.\n        // It should take ~ 1 - 6 iterations to `amountOut >= amountRequired`.\n        while (true) {\n            amountOut = curvePool.get_dy(_input.i, _input.j, amountIn);\n            uint256 amountOutNormalized = normalizeWithDecimals(amountOut, _input.iDecimals, _input.jDecimals);\n\n            if (amountOutNormalized >= amountRequired) {\n                return (amountIn, amountOut);\n            }\n\n            amountIn = _calcAmountIn(\n                amountIn,\n                _input.one,\n                rate,\n                amountRequired,\n                amountOutNormalized\n            );\n        }\n    }\n\n    /// @dev Adjusts the given value to have different decimals\n    function normalizeWithDecimals(\n        uint256 _value,\n        uint256 _toDecimals,\n        uint256 _fromDecimals\n    )\n        internal\n        pure\n        returns (uint256)\n    {\n        if (_toDecimals == _fromDecimals) {\n            return _value;\n        } else if (_toDecimals < _fromDecimals) {\n            uint256 devideOn;\n            // It can be unchecked because of the condition `_toDecimals < _fromDecimals`.\n            // We trust to `_fromDecimals` and `_toDecimals` they should not have large numbers.\n            unchecked { devideOn = 10 ** (_fromDecimals - _toDecimals); }\n            // Zero value after normalization is unacceptable.\n            if (_value < devideOn) revert FailedNormalization();\n            // Condition above make it safe\n            unchecked { return _value / devideOn; }\n        } else {\n            uint256 decimalsDiff;\n            // Because of the condition `_toDecimals < _fromDecimals` above,\n            // we are safe as it guarantees that `_toDecimals` is > `_fromDecimals`\n            unchecked { decimalsDiff = 10 ** (_toDecimals - _fromDecimals); }\n\n            return _value * decimalsDiff;\n        }\n    }\n\n    function _calcAmountIn(\n        uint256 _amountIn,\n        uint256 _one,\n        uint256 _rate,\n        uint256 _requiredAmountOut,\n        uint256 _amountOutNormalized\n    )\n        private\n        pure\n        returns (uint256)\n    {\n        uint256 diff;\n        // Because of the condition `amountOutNormalized >= _requiredAmountOut` in a calling function,\n        // safe math is not required here.\n        unchecked { diff = _requiredAmountOut - _amountOutNormalized; }\n        // We may be stuck in a situation where a difference between\n        // a `_requiredAmountOut` and `amountOutNormalized`\n        // will be small and we will need to perform more steps.\n        // This expression helps to escape the almost infinite loop.\n        if (diff < 1e3) {\n            // If the `amountIn` value is high the `get_dy` function will revert first\n            unchecked { _amountIn += 1e3; }\n        } else {\n            // `one * diff` is safe as `diff` will be lower then the `_requiredAmountOut`\n            // for which we have safe math while doing `ONE_... * _requiredAmountOut` in a calling function.\n            unchecked { _amountIn += (_one * diff) / _rate; }\n        }\n\n        return _amountIn;\n    }\n}\n"
    },
    "contracts/liquidation/magicians/_common/libraries/CrvEthCurvePoolLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../../interfaces/ICurvePoolLike256WithReturn.sol\";\n\n/// @dev Curve pool exchange\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\nlibrary CrvEthCurvePoolLib {\n    uint256 constant public WETH_INDEX = 0;\n    uint256 constant public CRV_INDEX = 1;\n\n    uint256 constant public UNKNOWN_AMOUNT = 1;\n\n    function crvToWethViaCurve(uint256 _amount, address _pool, IERC20 _crv) internal returns (uint256 receivedWeth) {\n        _crv.approve(_pool, _amount);\n\n        receivedWeth = ICurvePoolLike256WithReturn(_pool).exchange(\n            CRV_INDEX,\n            WETH_INDEX,\n            _amount,\n            UNKNOWN_AMOUNT\n        );\n    }\n\n    function wethToCrvViaCurve(uint256 _amount, address _pool, IERC20 _weth) internal returns (uint256 receivedCrv) {\n        _weth.approve(_pool, _amount);\n\n        receivedCrv = ICurvePoolLike256WithReturn(_pool).exchange(\n            WETH_INDEX,\n            CRV_INDEX,\n            _amount,\n            UNKNOWN_AMOUNT\n        );\n    }\n}\n"
    },
    "contracts/liquidation/magicians/_common/libraries/CrvEthTriCrvPoolLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../../interfaces/ICurvePoolLike256WithReturn.sol\";\n\n/// @dev Curve pool exchange\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\nlibrary CrvEthTriCrvPoolLib {\n    uint256 constant public WETH_INDEX = 1;\n    uint256 constant public CRV_INDEX = 2;\n\n    uint256 constant public UNKNOWN_AMOUNT = 1;\n\n    function crvToWethViaTriCrv(uint256 _amount, address _pool, IERC20 _crv) internal returns (uint256 receivedWeth) {\n        _crv.approve(_pool, _amount);\n\n        receivedWeth = ICurvePoolLike256WithReturn(_pool).exchange(\n            CRV_INDEX,\n            WETH_INDEX,\n            _amount,\n            UNKNOWN_AMOUNT\n        );\n    }\n\n    function wethToCrvViaTriCrv(uint256 _amount, address _pool, IERC20 _weth) internal returns (uint256 receivedCrv) {\n        _weth.approve(_pool, _amount);\n\n        receivedCrv = ICurvePoolLike256WithReturn(_pool).exchange(\n            WETH_INDEX,\n            CRV_INDEX,\n            _amount,\n            UNKNOWN_AMOUNT\n        );\n    }\n}\n"
    },
    "contracts/liquidation/magicians/_common/libraries/CrvUSDToWethViaTriCrvPoolLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../../interfaces/ICurvePoolLike256WithReturn.sol\";\n\n/// @dev Curve pool exchange\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\nlibrary CrvUSDToWethViaTriCrvPoolLib {\n    uint256 constant public WETH_INDEX = 1;\n    uint256 constant public CRV_USD_INDEX = 0;\n\n    uint256 constant public UNKNOWN_AMOUNT = 1;\n\n    function crvUsdToWethViaTriCrv(\n        uint256 _amount,\n        address _pool,\n        IERC20 _crvUsd\n    )\n        internal\n        returns (uint256 receivedWeth)\n    {\n        _crvUsd.approve(_pool, _amount);\n\n        receivedWeth = ICurvePoolLike256WithReturn(_pool).exchange(\n            CRV_USD_INDEX,\n            WETH_INDEX,\n            _amount,\n            UNKNOWN_AMOUNT\n        );\n    }\n\n    function wethToCrvUsdViaTriCrv(\n        uint256 _amount,\n        address _pool,\n        IERC20 _weth\n    )\n        internal\n        returns (uint256 receivedCrv)\n    {\n        _weth.approve(_pool, _amount);\n\n        receivedCrv = ICurvePoolLike256WithReturn(_pool).exchange(\n            WETH_INDEX,\n            CRV_USD_INDEX,\n            _amount,\n            UNKNOWN_AMOUNT\n        );\n    }\n}\n"
    },
    "contracts/liquidation/magicians/_common/libraries/FraxUsdcPoolLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../../interfaces/ICurvePoolLike128WithReturn.sol\";\n\n/// @dev Curve pool exchange\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\nlibrary FraxUsdcPoolLib {\n    int128 constant public FRAX_INDEX = 0;\n    int128 constant public USDC_INDEX = 1;\n\n    uint256 constant public UNKNOWN_AMOUNT = 1;\n\n    function fraxToUsdcViaCurve(uint256 _amount, address _pool, IERC20 _frax) internal returns (uint256) {\n        _frax.approve(_pool, _amount);\n\n        return ICurvePoolLike128WithReturn(_pool).exchange(\n            FRAX_INDEX,\n            USDC_INDEX,\n            _amount,\n            UNKNOWN_AMOUNT\n        );\n    }\n\n    function usdcToFraxViaCurve(uint256 _amount, address _pool, IERC20 _usdc) internal returns (uint256) {\n        _usdc.approve(_pool, _amount);\n\n        return ICurvePoolLike128WithReturn(_pool).exchange(\n            USDC_INDEX,\n            FRAX_INDEX,\n            _amount,\n            UNKNOWN_AMOUNT\n        );\n    }\n}\n"
    },
    "contracts/liquidation/magicians/_common/libraries/LusdUsdtAsUnderlying.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../../interfaces/ICurvePoolLike128WithReturn.sol\";\n\n/// @dev Curve pool exchange\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\nlibrary LusdUsdtAsUnderlying {\n    /// @dev Index value for the coin (curve LUSD/3CRV pool)\n    int128 public constant LUSD_INDEX_LUSD3CRV_POOL = 0;\n    /// @dev Index value for the USDT as an underlying asset (curve LUSD/3CRV pool)\n    int128 constant public USDT_INDEX = 3;\n\n    uint256 constant public UNKNOWN_AMOUNT = 1;\n\n    function lusdToUsdtViaCurve(uint256 _amount, address _pool, IERC20 _lusd) internal returns (uint256) {\n        _lusd.approve(_pool, _amount);\n\n        return ICurvePoolLike128WithReturn(_pool).exchange_underlying(\n            LUSD_INDEX_LUSD3CRV_POOL,\n            USDT_INDEX,\n            _amount,\n            UNKNOWN_AMOUNT\n        );\n    }\n}\n"
    },
    "contracts/liquidation/magicians/_common/libraries/SdaiFraxPoolLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../../interfaces/ICurvePoolLike128WithReturn.sol\";\n\n/// @dev Curve pool exchange\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\nlibrary SdaiFraxPoolLib {\n    int128 constant public FRAX_INDEX = 0;\n    int128 constant public SDAI_INDEX = 1;\n\n    uint256 constant public UNKNOWN_AMOUNT = 1;\n\n    function sdaiToFraxViaCurve(uint256 _amount, address _pool, IERC20 _sDAI) internal returns (uint256 receivedWeth) {\n        _sDAI.approve(_pool, _amount);\n\n        receivedWeth = ICurvePoolLike128WithReturn(_pool).exchange(\n            SDAI_INDEX,\n            FRAX_INDEX,\n            _amount,\n            UNKNOWN_AMOUNT\n        );\n    }\n\n    function fraxToSdaiViaCurve(uint256 _amount, address _pool, IERC20 _frax) internal returns (uint256 receivedCrv) {\n        _frax.approve(_pool, _amount);\n\n        receivedCrv = ICurvePoolLike128WithReturn(_pool).exchange(\n            FRAX_INDEX,\n            SDAI_INDEX,\n            _amount,\n            UNKNOWN_AMOUNT\n        );\n    }\n}\n"
    },
    "contracts/liquidation/magicians/_common/libraries/SdaiSusdePoolLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../../interfaces/ICurvePoolLike128WithReturn.sol\";\n\n/// @dev Curve pool exchange\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\nlibrary SdaiSusdePoolLib {\n    int128 constant public SDAI_INDEX = 0;\n    int128 constant public SUSDE_INDEX = 1;\n\n    uint256 constant public UNKNOWN_AMOUNT = 1;\n\n    function susdeToSdaiViaCurve(uint256 _amount, address _pool, IERC20 _sUSDe) internal returns (uint256 receivedWeth) {\n        _sUSDe.approve(_pool, _amount);\n\n        receivedWeth = ICurvePoolLike128WithReturn(_pool).exchange(\n            SUSDE_INDEX,\n            SDAI_INDEX,\n            _amount,\n            UNKNOWN_AMOUNT\n        );\n    }\n\n    function sdaiToSusdeViaCurve(uint256 _amount, address _pool, IERC20 _sDAI) internal returns (uint256 receivedCrv) {\n        _sDAI.approve(_pool, _amount);\n\n        receivedCrv = ICurvePoolLike128WithReturn(_pool).exchange(\n            SDAI_INDEX,\n            SUSDE_INDEX,\n            _amount,\n            UNKNOWN_AMOUNT\n        );\n    }\n}\n"
    },
    "contracts/liquidation/magicians/_common/libraries/UsdcCrvUsdcPoolLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../../interfaces/ICurvePoolLike128WithReturn.sol\";\n\n/// @dev Curve pool exchange\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\nlibrary UsdcCrvUsdcPoolLib {\n    int128 constant public USDC_INDEX = 0;\n    int128 constant public CRV_USD_INDEX = 1;\n\n    uint256 constant public UNKNOWN_AMOUNT = 1;\n\n    function usdcToCrvUsdViaCurve(uint256 _amount, address _pool, IERC20 _usdc) internal returns (uint256) {\n        _usdc.approve(_pool, _amount);\n\n        return ICurvePoolLike128WithReturn(_pool).exchange(\n            USDC_INDEX,\n            CRV_USD_INDEX,\n            _amount,\n            UNKNOWN_AMOUNT\n        );\n    }\n\n    function crvUsdToUsdcViaCurve(uint256 _amount, address _pool, IERC20 _crvUsd) internal returns (uint256) {\n        _crvUsd.approve(_pool, _amount);\n\n        return ICurvePoolLike128WithReturn(_pool).exchange(\n            CRV_USD_INDEX,\n            USDC_INDEX,\n            _amount,\n            UNKNOWN_AMOUNT\n        );\n    }\n}\n"
    },
    "contracts/liquidation/magicians/_common/libraries/UsdcUsdt3poolLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"../../interfaces/ICurvePoolLike128.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/// @dev Curve pool exchange\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\nlibrary UsdcUsdt3poolLib {\n    using SafeERC20 for IERC20;\n\n    int128 constant public USDC_INDEX = 1;\n    int128 constant public USDT_INDEX = 2;\n\n    uint256 constant public UNKNOWN_AMOUNT = 1;\n\n    function usdcToUsdtVia3Pool(\n        uint256 _amount,\n        address _pool,\n        IERC20 _usdc,\n        IERC20 _usdt\n    )\n        internal\n        returns (uint256 _received)\n    {\n        _usdc.approve(_pool, _amount);\n\n        uint256 balanceBefore = _usdt.balanceOf(address(this));\n\n        ICurvePoolLike128(_pool).exchange(\n            USDC_INDEX,\n            USDT_INDEX,\n            _amount,\n            UNKNOWN_AMOUNT\n        );\n\n        uint256 balanceAfter = _usdt.balanceOf(address(this));\n\n        // The `balanceAfter` can't be less than the `balanceBefore` after the exchange\n        unchecked { _received = balanceAfter - balanceBefore; }\n    }\n}\n"
    },
    "contracts/liquidation/magicians/_common/libraries/UsdtCrvUsdPoolLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../../interfaces/ICurvePoolLike128WithReturn.sol\";\n\n/// @dev Curve pool exchange\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\nlibrary UsdtCrvUsdPoolLib {\n    using SafeERC20 for IERC20;\n\n    int128 constant public USDT_INDEX = 0;\n    int128 constant public CRV_USD_INDEX = 1;\n\n    uint256 constant public UNKNOWN_AMOUNT = 1;\n\n    function crvUsdToUsdt(uint256 _amount, address _pool, IERC20 _crvUSD) internal returns (uint256 receivedUsdt) {\n        _crvUSD.approve(_pool, _amount);\n\n        receivedUsdt = ICurvePoolLike128WithReturn(_pool).exchange(\n            CRV_USD_INDEX,\n            USDT_INDEX,\n            _amount,\n            UNKNOWN_AMOUNT\n        );\n    }\n\n    function usdtToCrvUsd(uint256 _amount, address _pool, IERC20 _usdt) internal returns (uint256 receivedCrvUSD) {\n        _usdt.safeApprove(_pool, _amount);\n\n        receivedCrvUSD = ICurvePoolLike128WithReturn(_pool).exchange(\n            USDT_INDEX,\n            CRV_USD_INDEX,\n            _amount,\n            UNKNOWN_AMOUNT\n        );\n    }\n}\n"
    },
    "contracts/liquidation/magicians/_common/libraries/UsdtWethTricrypto2Lib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"../../interfaces/ICurvePoolLike256.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/// @dev Curve pool exchange\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\nlibrary UsdtWethTricrypto2Lib {\n    using SafeERC20 for IERC20;\n\n    uint256 constant public USDT_INDEX = 0;\n    uint256 constant public WETH_INDEX = 2;\n\n    uint256 constant public USDT_DECIMALS = 6;\n    uint256 constant public WETH_DECIMALS = 18;\n\n    uint256 constant public UNKNOWN_AMOUNT = 1;\n\n    function usdtToWethTricrypto2(\n        uint256 _amount,\n        address _pool,\n        IERC20 _usdt,\n        IERC20 _weth\n    )\n        internal\n        returns (uint256 _received)\n    {\n        _usdt.safeApprove(_pool, _amount);\n\n        uint256 balanceBefore = _weth.balanceOf(address(this));\n\n        ICurvePoolLike256(_pool).exchange(\n            USDT_INDEX,\n            WETH_INDEX,\n            _amount,\n            UNKNOWN_AMOUNT\n        );\n\n        uint256 balanceAfter = _weth.balanceOf(address(this));\n\n        // The `balanceAfter` can't be less than the `balanceBefore` after the exchange\n        unchecked { _received = balanceAfter - balanceBefore; }\n    }\n\n    function wethToUsdtTricrypto2(\n        uint256 _amount,\n        address _pool,\n        IERC20 _usdt,\n        IERC20 _weth\n    )\n        internal\n        returns (uint256 _received)\n    {\n        _weth.approve(_pool, _amount);\n\n        uint256 balanceBefore = _usdt.balanceOf(address(this));\n\n        ICurvePoolLike256(_pool).exchange(\n            WETH_INDEX,\n            USDT_INDEX,\n            _amount,\n            UNKNOWN_AMOUNT\n        );\n\n        uint256 balanceAfter = _usdt.balanceOf(address(this));\n\n        // The `balanceAfter` can't be less than the `balanceBefore` after the exchange\n        unchecked { _received = balanceAfter - balanceBefore; }\n    }\n}\n"
    },
    "contracts/liquidation/magicians/_common/STETHBaseMagician.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../interfaces/IWstETHLike.sol\";\nimport \"../interfaces/IMagician.sol\";\nimport \"../interfaces/ICurvePoolLike.sol\";\n\n/// @dev stETH Magician\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\nabstract contract STETHBaseMagician is IMagician {\n    address public constant STETH = 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84;\n    address public constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    IWstETHLike public constant WSTETH = IWstETHLike(0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0);\n    ICurvePoolLike public constant CURVE_POOL = ICurvePoolLike(0xDC24316b9AE028F1497c275EB9192a3Ea0f67022);\n\n    /// @dev Index value for the coin to send (curve stETh/ETH pool)\n    // solhint-disable-next-line use-forbidden-name\n    int128 public constant STETH_INDEX = 1; // stETH\n    /// @dev Index value of the coin to recieve\n    // solhint-disable-next-line use-forbidden-name\n    int128 public constant ETH_INDEX = 0; // ETH\n\n    /// @notice Calculate the required ETH amount to get the expected number of stETH from the Curve pool.\n    /// @dev Present a precision error up to 2e11 (0.002$ if ETH price is 10 000$) in favor of `requiredETH`,\n    /// so we will buy a little bit more stETH than needed. Which is fine.\n    /// @param _stETHAmountRequired A number of the stETH that we want to get from the Curve pool\n    /// @return requiredETH A number of the ETH to buy `_stETHAmountRequired`\n    function _calcRequiredETH(uint256 _stETHAmountRequired)\n        internal\n        view\n        returns (uint256 requiredETH, uint256 stETHOutput)\n    {\n        uint256 one = 1e18; // One coin stETH or ETH, has 18 decimals\n        uint256 rate = CURVE_POOL.get_dy(ETH_INDEX, STETH_INDEX, one);\n        uint256 multiplied = one * _stETHAmountRequired;\n        \n        // We have safe math while doing `one * _stETHAmountRequired`. Division should be fine.\n        unchecked { requiredETH = multiplied / rate; }\n\n        // `get_dy` is an increasing function.\n        // It should take ~ 1 - 6 iterations to `stETHOutput >= _stETHAmountRequired`.\n        while (true) {\n            stETHOutput = CURVE_POOL.get_dy(ETH_INDEX, STETH_INDEX, requiredETH);\n\n            if (stETHOutput >= _stETHAmountRequired) {\n                return (requiredETH, stETHOutput);\n            }\n\n            uint256 diff;\n            // Because of the condition `stETHOutput >= _stETHAmountRequired`, safe math is not required here.\n            unchecked { diff = _stETHAmountRequired - stETHOutput; }\n            \n            // We may be stuck with a situation where a difference between a `_stETHAmountRequired` and `stETHOutput`\n            // will be small and we will need to perform more steps.\n            // This expression helps to escape the almost infinite loop.\n            if (diff < 1e3) {\n                // if `requiredETH` value will be high the `get_dy` function will revert first\n                unchecked { requiredETH += 1e3; }\n                continue;\n            }\n\n            // `one * diff` is safe as `diff` will be lower\n            // than `_stETHAmountRequired` for which we have safe math while doing `one * _stETHAmountRequired`.\n            unchecked { requiredETH += (one * diff) / rate; }\n        }\n    }\n}\n"
    },
    "contracts/liquidation/magicians/ConvexSiloWrapperMagician.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"../../interfaces/IConvexSiloWrapper.sol\";\nimport \"./interfaces/IMagician.sol\";\n\n/// @dev ConvexSiloWrapperMagician Magician for unwrapping `ConvexSiloWrapper` tokens to\n///     Curve LP tokens.\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\ncontract ConvexSiloWrapperMagician is IMagician {\n    /// @dev revert when towardsAsset is called, because `ConvexSiloWrapper` is collateralOnly.\n    ///     Liquidations of that collateral will not happen, because it can not be borrowed.\n    error Unsupported();\n\n    /// @dev revert when the asset is not ConvexSiloWrapper token.\n    error InvalidAsset();\n\n    /// @inheritdoc IMagician\n    function towardsNative(address _asset, uint256 _amount)\n        external\n        virtual\n        returns (address tokenOut, uint256 amountOut)\n    {\n        tokenOut = address(IConvexSiloWrapper(_asset).underlyingToken());\n        amountOut = _amount;\n        IConvexSiloWrapper(_asset).withdrawAndUnwrap(_amount);\n    }\n\n    /// @inheritdoc IMagician\n    function towardsAsset(address, uint256) external virtual returns (address, uint256) {\n        revert Unsupported();\n    }\n}\n"
    },
    "contracts/liquidation/magicians/crvUSD/CrvUSDViaTriCrvMagician.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../interfaces/IMagician.sol\";\nimport \"../_common/libraries/CrvUSDToWethViaTriCrvPoolLib.sol\";\n\ninterface ICrvPoolLike {\n    // solhint-disable func-name-mixedcase\n    function get_dx(uint256 i, uint256 j, uint256 dy) external view returns (uint256);\n    function get_dy(uint256 i, uint256 j, uint256 dx) external view returns (uint256);\n}\n\n/// @dev crvUSD Magician\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\nabstract contract CrvUSDViaTriCrvMagician is IMagician {\n    using CrvUSDToWethViaTriCrvPoolLib for uint256;\n\n    error InvalidAsset();\n    error InvalidCalculationResult();\n\n    // solhint-disable var-name-mixedcase\n    address immutable public TRI_CRV_POOL;\n\n    IERC20 immutable public WETH;\n    IERC20 immutable public CRV_USD;\n    // solhint-enable var-name-mixedcase\n\n    constructor(\n        address _triCrvPool,\n        address _weth,\n        address _crvUsd\n    ) {\n        TRI_CRV_POOL = _triCrvPool;\n        WETH = IERC20(_weth);\n        CRV_USD = IERC20(_crvUsd);\n    }\n\n    /// @inheritdoc IMagician\n    function towardsNative(address _asset, uint256 _crvUsdToSell)\n        external\n        virtual\n        returns (address tokenOut, uint256 amountOut)\n    {\n        // crvUSD -> WETH\n        if (_asset != address(CRV_USD)) revert InvalidAsset();\n\n        amountOut = _crvUsdToSell.crvUsdToWethViaTriCrv(TRI_CRV_POOL, CRV_USD);\n\n        tokenOut = address(WETH);\n    }\n\n    /// @inheritdoc IMagician\n    function towardsAsset(address _asset, uint256 _crvUsdToBuy)\n        external\n        virtual\n        returns (address tokenOut, uint256 wethIn)\n    {\n        // WETH -> crvUSD\n        if (_asset != address(CRV_USD)) revert InvalidAsset();\n\n        wethIn = _getDx(_crvUsdToBuy);\n\n        uint256 expectedCrvUsd = ICrvPoolLike(TRI_CRV_POOL).get_dy(\n            CrvUSDToWethViaTriCrvPoolLib.WETH_INDEX,\n            CrvUSDToWethViaTriCrvPoolLib.CRV_USD_INDEX,\n            wethIn\n        );\n\n        // get_dx returns such a WETH amount that when we will do an exchange,\n        // we receive ~0.0001% less than we need for the liquidation. It is dust,\n        // the liquidation will fail as we need to repay the exact amount.\n        // To compensate for this, we will increase WETH a little bit.\n        // It is fine if we will buy ~0.0001% more.\n        if (expectedCrvUsd < _crvUsdToBuy) {\n            uint256 oneCrvUsd = 1e18;\n\n            uint256 wethForOneCrv = ICrvPoolLike(TRI_CRV_POOL).get_dy(\n                CrvUSDToWethViaTriCrvPoolLib.CRV_USD_INDEX,\n                CrvUSDToWethViaTriCrvPoolLib.WETH_INDEX,\n                oneCrvUsd\n            );\n\n            // it is impossible that we will need to spend ETH close to uint256 max\n            unchecked { wethIn += wethForOneCrv / 1e3; }\n        }\n\n        wethIn.wethToCrvUsdViaTriCrv(TRI_CRV_POOL, WETH);\n\n        tokenOut = address(CRV_USD);\n    }\n\n    function _getDx(uint256 _crvToBuy) internal view returns (uint256 wethIn) {\n        return ICrvPoolLike(TRI_CRV_POOL).get_dx(\n            CrvUSDToWethViaTriCrvPoolLib.WETH_INDEX,\n            CrvUSDToWethViaTriCrvPoolLib.CRV_USD_INDEX,\n            _crvToBuy\n        );\n    }\n}\n"
    },
    "contracts/liquidation/magicians/crvUSD/CrvUSDViaTriCrvMagicianETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./CrvUSDViaTriCrvMagician.sol\";\n\n/// @dev crvUSD Magician\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\ncontract CrvUSDViaTriCrvMagicianETH is CrvUSDViaTriCrvMagician {\n    constructor() CrvUSDViaTriCrvMagician(\n        0x4eBdF703948ddCEA3B11f675B4D1Fba9d2414A14, // TRI_CRV_POOL\n        0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2, // WETH\n        0xf939E0A03FB07F59A73314E73794Be0E57ac1b4E  // CRV_USD\n    ) {}\n}\n"
    },
    "contracts/liquidation/magicians/CrvUSDMagician.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./interfaces/IMagician.sol\";\nimport \"./_common/libraries/UsdtCrvUsdPoolLib.sol\";\nimport \"./_common/libraries/UsdtWethTricrypto2Lib.sol\";\nimport \"./_common/libraries/CalculateAmountIn256Lib.sol\";\n\ninterface ICrvUSDPoolLike {\n    // solhint-disable func-name-mixedcase\n    function get_dx(int128 i, int128 j, uint256 dy) external view returns (uint256);\n}\n\n/// @dev crvUSD Magician\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\nabstract contract CrvUSDMagician is IMagician {\n    using UsdtCrvUsdPoolLib for uint256;\n    using UsdtWethTricrypto2Lib for uint256;\n    using CalculateAmountIn256Lib for uint256;\n\n    error InvalidAsset();\n    error InvalidCalculationResult();\n\n    // solhint-disable var-name-mixedcase\n    address immutable public TRICRYPTO_2_POOL;\n    address immutable public CRV_USD_USDT_POOL;\n\n    IERC20 immutable public WETH;\n    IERC20 immutable public USDT;\n    IERC20 immutable public CRV_USD;\n    // solhint-enable var-name-mixedcase\n\n    constructor(\n        address _tricrypto2Pool,\n        address _crvUsdPool,\n        address _weth,\n        address _usdt,\n        address _crvUsd\n    ) {\n        TRICRYPTO_2_POOL = _tricrypto2Pool;\n        CRV_USD_USDT_POOL = _crvUsdPool;\n        WETH = IERC20(_weth);\n        USDT = IERC20(_usdt);\n        CRV_USD = IERC20(_crvUsd);\n    }\n\n    /// @inheritdoc IMagician\n    function towardsNative(address _asset, uint256 _crvUsdToSell)\n        external\n        virtual\n        returns (address tokenOut, uint256 amountOut)\n    {\n        // crvUSD -> WETH\n        if (_asset != address(CRV_USD)) revert InvalidAsset();\n\n        amountOut = _crvUsdToSell.crvUsdToUsdt(CRV_USD_USDT_POOL, CRV_USD)\n            .usdtToWethTricrypto2(TRICRYPTO_2_POOL, USDT, WETH);\n\n        tokenOut = address(WETH);\n    }\n\n    /// @inheritdoc IMagician\n    function towardsAsset(address _asset, uint256 _crvUsdToBuy)\n        external\n        virtual\n        returns (address tokenOut, uint256 wehtIn)\n    {\n        // WETH -> crvUSD\n        if (_asset != address(CRV_USD)) revert InvalidAsset();\n\n        uint256 usdtIn = ICrvUSDPoolLike(CRV_USD_USDT_POOL).get_dx(\n            UsdtCrvUsdPoolLib.USDT_INDEX,\n            UsdtCrvUsdPoolLib.CRV_USD_INDEX,\n            _crvUsdToBuy\n        );\n\n        uint256 usdtOut;\n        (wehtIn, usdtOut) = _calcRequiredWETH(usdtIn);\n\n        if (usdtOut < usdtIn) revert InvalidCalculationResult();\n\n        wehtIn.wethToUsdtTricrypto2(TRICRYPTO_2_POOL, USDT, WETH)\n            .usdtToCrvUsd(CRV_USD_USDT_POOL, USDT);\n\n        tokenOut = address(CRV_USD);\n    }\n\n    function _calcRequiredWETH(uint256 usdtIn) internal virtual view returns (uint256 wehtIn, uint256 usdtOut) {\n        uint256 oneWETH = 1e18;\n\n        CalculateAmountIn256Lib.InputWithNormalization memory input =\n            CalculateAmountIn256Lib.InputWithNormalization({\n                amountRequired: usdtIn,\n                one: oneWETH,\n                pool: TRICRYPTO_2_POOL,\n                i: UsdtWethTricrypto2Lib.WETH_INDEX,\n                j: UsdtWethTricrypto2Lib.USDT_INDEX,\n                iDecimals: UsdtWethTricrypto2Lib.WETH_DECIMALS,\n                jDecimals: UsdtWethTricrypto2Lib.USDT_DECIMALS\n            });\n\n        return CalculateAmountIn256Lib.amountIn256WithNormalization(input);\n    }\n}\n"
    },
    "contracts/liquidation/magicians/CrvUSDMagicianETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./CrvUSDMagician.sol\";\n\n/// @dev crvUSD Magician\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\ncontract CrvUSDMagicianETH is CrvUSDMagician {\n    constructor() CrvUSDMagician(\n        0xD51a44d3FaE010294C616388b506AcdA1bfAAE46, // TRICRYPTO_2_POOL\n        0x390f3595bCa2Df7d23783dFd126427CCeb997BF4, // CRV_USD_USDT_POOL\n        0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2, // WETH\n        0xdAC17F958D2ee523a2206206994597C13D831ec7, // USDT\n        0xf939E0A03FB07F59A73314E73794Be0E57ac1b4E  // CRV_USD\n    ) {}\n}\n"
    },
    "contracts/liquidation/magicians/crvViaTriCrv/CrvViaTriCrvMagician.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../_common/libraries/CrvEthTriCrvPoolLib.sol\";\nimport \"../interfaces/IMagician.sol\";\n\ninterface ICrvPoolLike {\n    // solhint-disable func-name-mixedcase\n    function get_dx(uint256 i, uint256 j, uint256 dy) external view returns (uint256);\n    function get_dy(uint256 i, uint256 j, uint256 dx) external view returns (uint256);\n}\n\n/// @dev CRV Magician\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\nabstract contract CrvViaTriCrvMagician is IMagician {\n    using CrvEthTriCrvPoolLib for uint256;\n\n    // solhint-disable var-name-mixedcase\n    address immutable public TRI_CRV_POOL;\n\n    IERC20 immutable public WETH;\n    IERC20 immutable public CRV;\n    // solhint-enable var-name-mixedcase\n\n    error InvalidAsset();\n\n    constructor(\n        address _triCrvPool,\n        address _weth,\n        address _crv\n    ) {\n        TRI_CRV_POOL = _triCrvPool;\n        WETH = IERC20(_weth);\n        CRV = IERC20(_crv);\n    }\n\n    /// @inheritdoc IMagician\n    function towardsNative(address _asset, uint256 _crvToSell)\n        external\n        virtual\n        returns (address tokenOut, uint256 amountOut)\n    {\n        // CRV -> WETH\n        if (_asset != address(CRV)) revert InvalidAsset();\n\n        amountOut = _crvToSell.crvToWethViaTriCrv(TRI_CRV_POOL, CRV);\n\n        tokenOut = address(WETH);\n    }\n\n    /// @inheritdoc IMagician\n    function towardsAsset(address _asset, uint256 _crvToBuy)\n        external\n        virtual\n        returns (address tokenOut, uint256 wethIn)\n    {\n        // WETH -> CRV\n        if (_asset != address(CRV)) revert InvalidAsset();\n\n        wethIn = _getDx(_crvToBuy);\n\n        uint256 expectedCrv = ICrvPoolLike(TRI_CRV_POOL).get_dy(\n            CrvEthTriCrvPoolLib.WETH_INDEX,\n            CrvEthTriCrvPoolLib.CRV_INDEX,\n            wethIn\n        );\n\n        // get_dx returns such a WETH amount that when we will do an exchange,\n        // we receive ~0.0001% less than we need for the liquidation. It is dust,\n        // the liquidation will fail as we need to repay the exact amount.\n        // To compensate for this, we will increase WETH a little bit.\n        // It is fine if we will buy ~0.0001% more.\n        if (expectedCrv < _crvToBuy) {\n            uint256 oneCrv = 1e18;\n\n            uint256 wethForOneCrv = ICrvPoolLike(TRI_CRV_POOL).get_dy(\n                CrvEthTriCrvPoolLib.CRV_INDEX,\n                CrvEthTriCrvPoolLib.WETH_INDEX,\n                oneCrv\n            );\n\n            // it is impossible that we will need to spend ETH close to uint256 max\n            unchecked { wethIn += wethForOneCrv / 1e3; }\n        }\n\n        wethIn.wethToCrvViaTriCrv(TRI_CRV_POOL, WETH);\n\n        tokenOut = address(CRV);\n    }\n\n    function _getDx(uint256 _crvToBuy) internal view returns (uint256 wethIn) {\n        return ICrvPoolLike(TRI_CRV_POOL).get_dx(\n            CrvEthTriCrvPoolLib.WETH_INDEX,\n            CrvEthTriCrvPoolLib.CRV_INDEX,\n            _crvToBuy\n        );\n    }\n}\n"
    },
    "contracts/liquidation/magicians/crvViaTriCrv/CrvViaTriCrvMagicianETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./CrvViaTriCrvMagician.sol\";\n\n/// @dev CRV Magician\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\ncontract CrvViaTriCrvMagicianETH is CrvViaTriCrvMagician {\n    constructor() CrvViaTriCrvMagician(\n        0x4eBdF703948ddCEA3B11f675B4D1Fba9d2414A14, // TRI_CRV_POOL\n        0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2, // WETH\n        0xD533a949740bb3306d119CC777fa900bA034cd52  // CRV\n    ) {}\n}\n"
    },
    "contracts/liquidation/magicians/curveLPTokens/CurveLPTokensMagician.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"../interfaces/ICurvePoolLike.sol\";\nimport \"../interfaces/ICurveLPTokensPriceProviderLike.sol\";\nimport \"../interfaces/IMagician.sol\";\nimport \"../../../lib/Ping.sol\";\nimport \"../../../interfaces/IPriceProvidersRepository.sol\";\nimport \"../../../interfaces/IPriceProvider.sol\";\nimport \"../../../priceProviders/curveLPTokens/interfaces/ICurveLPTokensDetailsFetchersRepository.sol\";\nimport \"../../../priceProviders/curveLPTokens/_common/CurveLPTokensDataTypes.sol\";\nimport \"../../../priceProviders/IERC20LikeV2.sol\";\n\n/// @dev Curve LP Tokens unwrapping\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\nabstract contract CurveLPTokensMagician is IMagician {\n    /// @dev Detail of the pool underlying coin required for the liquidation\n    struct PoolCoinDetails {\n        address coin;\n        uint8 index; // an index of the coin in the pool\n    }\n\n    /// @dev Max number of coins in the Curve protocol\n    int128 constant public MAX_COINS = 8;\n\n    /// @notice Curve LP Tokens details fetchers repository\n    // solhint-disable-next-line var-name-mixedcase\n    ICurveLPTokensDetailsFetchersRepository public immutable FETCHERS_REPO;\n    /// @dev Price providers repository quote token\n    // solhint-disable-next-line var-name-mixedcase\n    address public immutable QUOTE_TOKEN;\n\n    // Curve LP Token => coin and an index\n    mapping(address => PoolCoinDetails) public poolCoins;\n    // Curve LP Token => pool\n    mapping(address => address) public pools;\n\n    /// @dev Revert if we are not able to get LP Token pool details from the price provider\n    error InvalidOrNotSupportedLPToken();\n    /// @dev Revert on a `swapAmountOut` call as it in unsupported \n    error Unsupported();\n    /// @dev Revert on a false sanity check with `Ping` library\n    error InvalidFetchersRepository();\n    /// @dev Revert if we are not able to get the pool coins by provided curve LP token\n    error InvalidCurvePriceProviderLPTokenPair();\n\n    event Cached(address pool, address coin);\n\n    constructor(\n        ICurveLPTokensDetailsFetchersRepository _fetcherRepository,\n        IPriceProvidersRepository _priceProvidersRepository\n    ) {\n        if (!Ping.pong(_fetcherRepository.curveLPTokensFetchersRepositoryPing)) {\n            revert InvalidFetchersRepository();\n        }\n\n        FETCHERS_REPO = _fetcherRepository;\n        QUOTE_TOKEN = _priceProvidersRepository.quoteToken();\n    }\n\n    /// @dev As Curve LP Tokens can be collateral-only assets we skip the implementation of this function\n    function towardsAsset(address, uint256) external pure returns (address, uint256) {\n        revert Unsupported();\n    }\n\n    function _getCurvePoolUnderlyingCoin(address[] memory _coins) internal virtual view returns (address, uint256) {\n        if (_coins.length == 0) revert InvalidCurvePriceProviderLPTokenPair();\n\n        // if one of the pool underlying coins is the same as quote token\n        // we must return it. The operation will be similar to swap.\n        // Otherwise we need to unwrap LP token, so we return _coins[0] and an index 0\n        for (uint256 i; i < _coins.length;) {\n            if (QUOTE_TOKEN == _coins[i]) {\n                return (QUOTE_TOKEN, i);\n            }\n\n            // Because of the condition, `i < coins.length` overflow is impossible\n            unchecked { i++; }\n        }\n\n        uint256 zeroIndex = 0;\n        return (_coins[0], zeroIndex);\n    }\n\n    function _getPoolAndCoin(address _asset) internal virtual returns (address pool, address coin) {\n        pool = pools[_asset];\n\n        if (pool != address(0)) {\n            return (pool, poolCoins[_asset].coin);\n        }\n\n        bytes memory data; // We'll use it as an `input` and `return` data\n        LPTokenDetails memory poolDetails;\n\n        (poolDetails, data) = FETCHERS_REPO.getLPTokenDetails(_asset, data);\n\n        if (poolDetails.pool.addr == address(0) || poolDetails.coins.length == 0) {\n            revert InvalidOrNotSupportedLPToken();\n        }\n        \n        uint256 index;\n        pool = poolDetails.pool.addr;\n        (coin, index) = _getCurvePoolUnderlyingCoin(poolDetails.coins);\n\n        pools[_asset] = pool;\n        poolCoins[_asset] = PoolCoinDetails({ coin: coin, index: uint8(index)});\n        \n        emit Cached(pool, coin);\n    }\n}\n"
    },
    "contracts/liquidation/magicians/curveLPTokens/CurveLPTokensMagician128.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./CurveLPTokensMagician.sol\";\nimport \"../interfaces/ICurvePoolExchange128.sol\";\nimport \"../interfaces/ICurveLPTokensPriceProviderLike.sol\";\nimport \"../../../interfaces/IPriceProvidersRepository.sol\";\n\n/// @dev Curve LP Tokens unwrapping\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\ncontract CurveLPTokensMagician128 is CurveLPTokensMagician {\n    constructor(\n        ICurveLPTokensDetailsFetchersRepository _fetchersRepository,\n        IPriceProvidersRepository _priceProvidersRepository\n    )\n        CurveLPTokensMagician(\n            _fetchersRepository,\n            _priceProvidersRepository\n        )\n    {\n        // initial setup is done in CurveLPTokensMagician, nothing to do here\n    }\n\n    function towardsNative(\n        address _asset,\n        uint256 _amount\n    )\n        external\n        virtual\n        returns (address tokenOut, uint256 amountOut)\n    {\n        (tokenOut, amountOut, ) = _towardsNative(_asset, _amount);\n    }\n\n    function _towardsNative(\n        address _asset,\n        uint256 _amount\n    )\n        internal\n        virtual\n        returns (address tokenOut, uint256 amountOut, address poolAddress)\n    {\n        (poolAddress, tokenOut) = _getPoolAndCoin(_asset);\n\n        ICurvePoolExchange128 pool = ICurvePoolExchange128(poolAddress);\n\n        int128 i = _getCoinIndex(_asset);\n        uint256 amountToWithdraw = pool.calc_withdraw_one_coin(_amount, i);\n\n        uint256 swapperBalBefore = IERC20LikeV2(tokenOut).balanceOf(address(this));\n\n        // some versions of the Curve pools like 3Crv (0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7)\n        // do not have a return value in the `remove_liquidity_one_coin` function\n        // because of this we are calculating `amountOut`\n        pool.remove_liquidity_one_coin(_amount, i, amountToWithdraw);\n\n        uint256 swapperBalAfter = IERC20LikeV2(tokenOut).balanceOf(address(this));\n\n        // Balance after withdrawal can't be less than it was before\n        unchecked { amountOut = swapperBalAfter - swapperBalBefore; }\n    }\n\n    function _getCoinIndex(address _asset) internal virtual view returns (int128 index) {\n        uint8 coinIndex = poolCoins[_asset].index;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { index := coinIndex }\n    }\n}\n"
    },
    "contracts/liquidation/magicians/curveLPTokens/CurveLPTokensMagician256.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./CurveLPTokensMagician.sol\";\nimport \"../interfaces/ICurvePoolExchange256.sol\";\nimport \"../interfaces/ICurveLPTokensPriceProviderLike.sol\";\nimport \"../../../interfaces/IPriceProvidersRepository.sol\";\n\n/// @dev Curve LP Tokens unwrapping\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\ncontract CurveLPTokensMagician256 is CurveLPTokensMagician {\n    constructor(\n        ICurveLPTokensDetailsFetchersRepository _fetchersRepository,\n        IPriceProvidersRepository _priceProvidersRepository\n    )\n        CurveLPTokensMagician(\n            _fetchersRepository,\n            _priceProvidersRepository\n        )\n    {\n        // initial setup is done in CurveLPTokensMagician, nothing to do here\n    }\n\n    function towardsNative(\n        address _asset,\n        uint256 _amount\n    )\n        external\n        virtual\n        returns (address tokenOut, uint256 amountOut)\n    {\n        address poolAddress;\n        (poolAddress, tokenOut) = _getPoolAndCoin(_asset);\n\n        ICurvePoolExchange256 pool = ICurvePoolExchange256(poolAddress);\n\n        uint256 i = uint256(poolCoins[_asset].index);\n        uint256 amountToWithdraw = pool.calc_withdraw_one_coin(_amount, i);\n\n        uint256 swapperBalBefore = IERC20LikeV2(tokenOut).balanceOf(address(this));\n\n        // some versions of the Curve pools like 3Crv (0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7)\n        // do not have a return value in the `remove_liquidity_one_coin` function\n        // because of this we are calculating `amountOut`\n        pool.remove_liquidity_one_coin(_amount, i, amountToWithdraw);\n\n        uint256 swapperBalAfter = IERC20LikeV2(tokenOut).balanceOf(address(this));\n\n        // Balance after withdrawal can't be less than it was before\n        unchecked { amountOut = swapperBalAfter - swapperBalBefore; }\n    }\n}\n"
    },
    "contracts/liquidation/magicians/curveLPTokens/eth/CurveLPTokensMagicianETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"../../interfaces/ICurvePoolLike.sol\";\nimport \"../../interfaces/ICurveLPTokensPriceProviderLike.sol\";\nimport \"../../../../interfaces/IPriceProvidersRepository.sol\";\nimport \"../../../../priceProviders/curveLPTokens/interfaces/ICurveLPTokensDetailsFetchersRepository.sol\";\n\nimport \"../CurveLPTokensMagician.sol\";\nimport \"../../interfaces/IWETH9Like.sol\";\n\n/// @dev Curve LP Tokens unwrapping\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\nabstract contract CurveLPTokensMagicianETH is CurveLPTokensMagician {\n    address public immutable NULL_ADDRESS; // solhint-disable-line var-name-mixedcase\n    address public immutable WETH; // solhint-disable-line var-name-mixedcase\n\n    constructor(\n        ICurveLPTokensDetailsFetchersRepository _fetcherRepository,\n        IPriceProvidersRepository _priceProvidersRepository,\n        address _weth,\n        address _nullAddress\n    )\n        CurveLPTokensMagician(_fetcherRepository, _priceProvidersRepository)\n    {\n        WETH = _weth;\n        NULL_ADDRESS = _nullAddress;\n    }\n\n    /// @notice Reviews a `tokenOut`. If it is the `NULL_ADDRESS`, wraps ETH\n    /// @param _tokenOut A token that the `_asset` in the `towardsNative` function was converted\n    /// @param _withdrawn amount of the `_tokenOut` that we received\n    /// @return tokenOut a token that we received\n    function _reviewTokenOut(\n        address _tokenOut,\n        uint256 _withdrawn\n    )\n        internal\n        virtual\n        returns (address tokenOut)\n    {\n        // `tokenOut` should change only in the case with the `NULL_ADDRESS`\n        tokenOut = _tokenOut;\n\n        if (tokenOut == NULL_ADDRESS || (tokenOut == WETH && address(this).balance == _withdrawn)) {\n            // Wrap ETH\n            IWETH9Like(WETH).deposit{value: _withdrawn}();\n            tokenOut = WETH;\n        }\n    }\n\n    function _getCurvePoolUnderlyingCoin(address[] memory _coins) internal override view returns (address, uint256) {\n        if (_coins.length == 0) revert InvalidCurvePriceProviderLPTokenPair();\n\n        // if one of the pool underlying coins is the same as quote token or a null address\n        // we must return it. The operation will be similar to swap.\n        // Otherwise we need to unwrap LP token, so we return _coins[0] and an index 0\n        for (uint256 i; i < _coins.length;) {\n            if (QUOTE_TOKEN == _coins[i]) {\n                return (QUOTE_TOKEN, i);\n            }\n\n            if (NULL_ADDRESS == _coins[i]) {\n                return (NULL_ADDRESS, i);\n            }\n\n            // Because of the condition, `i < coins.length` overflow is impossible\n            unchecked { i++; }\n        }\n\n        uint256 zeroIndex = 0;\n        return (_coins[0], zeroIndex);\n    }\n}\n"
    },
    "contracts/liquidation/magicians/curveLPTokens/eth/CurveLPTokensMagicianETH128.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./CurveLPTokensMagicianETH.sol\";\nimport \"../../interfaces/ICurvePoolExchange128.sol\";\n\n/// @dev Curve LP Tokens unwrapping\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\ncontract CurveLPTokensMagicianETH128 is CurveLPTokensMagicianETH {\n    constructor(\n        ICurveLPTokensDetailsFetchersRepository _fetchersRepository,\n        IPriceProvidersRepository _priceProvidersRepository,\n        address _weth,\n        address _nullAddress\n    )\n        CurveLPTokensMagicianETH(\n            _fetchersRepository,\n            _priceProvidersRepository,\n            _weth,\n            _nullAddress\n        )\n    {\n        // initial setup is done in CurveLPTokensMagicianETH and CurveLPTokensMagician, nothing to do here\n    }\n\n    function towardsNative(\n        address _asset,\n        uint256 _amount\n    )\n        external\n        override\n        returns (address tokenOut, uint256 amountOut)\n    {\n        address poolAddress;\n        (poolAddress, tokenOut) = _getPoolAndCoin(_asset);\n\n        IERC20LikeV2 token = tokenOut == NULL_ADDRESS ? IERC20LikeV2(WETH) : IERC20LikeV2(tokenOut);\n\n        ICurvePoolExchange128 pool = ICurvePoolExchange128(poolAddress);\n\n        int128 i = _getCoinIndex(_asset);\n        uint256 amountToWithdraw = pool.calc_withdraw_one_coin(_amount, i);\n\n        uint256 swapperBalBefore = token.balanceOf(address(this));\n\n        // some versions of the Curve pools like 3Crv (0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7)\n        // do not have a return value in the `remove_liquidity_one_coin` function\n        // because of this we are calculating `amountOut`\n        pool.remove_liquidity_one_coin(_amount, i, amountToWithdraw);\n\n        tokenOut = _reviewTokenOut(tokenOut, amountToWithdraw);\n\n        uint256 swapperBalAfter = token.balanceOf(address(this));\n\n        // Balance after withdrawal can't be less than it was before\n        unchecked { amountOut = swapperBalAfter - swapperBalBefore; }\n    }\n\n    function _getCoinIndex(address _asset) internal virtual view returns (int128 index) {\n        uint8 coinIndex = poolCoins[_asset].index;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { index := coinIndex }\n    }\n}\n"
    },
    "contracts/liquidation/magicians/curveLPTokens/eth/CurveLPTokensMagicianETH256.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./CurveLPTokensMagicianETH.sol\";\nimport \"../../interfaces/ICurvePoolExchange256.sol\";\nimport \"../../interfaces/IWETH9Like.sol\";\n\n/// @dev Curve LP Tokens unwrapping\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\ncontract CurveLPTokensMagicianETH256 is CurveLPTokensMagicianETH {\n    constructor(\n        ICurveLPTokensDetailsFetchersRepository _fetchersRepository,\n        IPriceProvidersRepository _priceProvidersRepository,\n        address _weth,\n        address _nullAddress\n    )\n        CurveLPTokensMagicianETH(\n            _fetchersRepository,\n            _priceProvidersRepository,\n            _weth,\n            _nullAddress\n        )\n    {\n        // initial setup is done in CurveLPTokensMagicianETH and CurveLPTokensMagician, nothing to do here\n    }\n\n    function towardsNative(\n        address _asset,\n        uint256 _amount\n    )\n        external\n        override\n        returns (address tokenOut, uint256 amountOut)\n    {\n        address poolAddress;\n        (poolAddress, tokenOut) = _getPoolAndCoin(_asset);\n\n        IERC20LikeV2 token = tokenOut == NULL_ADDRESS ? IERC20LikeV2(WETH) : IERC20LikeV2(tokenOut);\n\n        ICurvePoolExchange256 pool = ICurvePoolExchange256(poolAddress);\n\n        uint256 i = uint256(poolCoins[_asset].index);\n        uint256 amountToWithdraw = pool.calc_withdraw_one_coin(_amount, i);\n\n        uint256 swapperBalBefore = token.balanceOf(address(this));\n\n        // some versions of the Curve pools like 3Crv (0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7)\n        // do not have a return value in the `remove_liquidity_one_coin` function\n        // because of this we are calculating `amountOut`\n        pool.remove_liquidity_one_coin(_amount, i, amountToWithdraw);\n\n        tokenOut = _reviewTokenOut(tokenOut, amountToWithdraw);\n\n        uint256 swapperBalAfter = token.balanceOf(address(this));\n\n        // Balance after withdrawal can't be less than it was before\n        unchecked { amountOut = swapperBalAfter - swapperBalBefore; }\n    }\n}\n"
    },
    "contracts/liquidation/magicians/curveLPTokens/pools/CrvUsdUsdcMagician.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../../_common/libraries/UsdcUsdt3poolLib.sol\";\nimport \"../../_common/libraries/UsdtWethTricrypto2Lib.sol\";\nimport \"../../interfaces/IMagician.sol\";\nimport \"../../interfaces/ICurvePoolLike128WithReturn.sol\";\n\n/// @dev Curve LP Tokens unwrapping\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\ncontract CrvUsdUsdcMagician is IMagician {\n    using UsdcUsdt3poolLib for uint256;\n    using UsdtWethTricrypto2Lib for uint256;\n\n    /// @dev Index value for the coin (curve CRV_USD/USDC pool)\n    int128 public constant USDC_INDEX_CRV_USD_USDC_POOL = 0;\n\n    uint256 constant public UNKNOWN_AMOUNT = 1;\n\n    // solhint-disable var-name-mixedcase\n    ICurvePoolLike128WithReturn public immutable CRV_USD_USDC_POOL;\n    address public immutable CRV3_POOL;\n    address public immutable TRICTYPTO_2_POOL;\n\n    IERC20 public immutable USDC;\n    IERC20 public immutable USDT;\n    IERC20 public immutable WETH;\n    // solhint-enable var-name-mixedcase\n\n    /// @dev Revert on a `towardsAsset` call as it in unsupported \n    error Unsupported();\n    /// @dev Revert in the constructor if provided an empty address\n    error EmptyAddress();\n\n    // solhint-disable-next-line code-complexity\n    constructor(\n        address _crvUsdUsdcPool,\n        address _crv3Pool,\n        address _tricrypto2,\n        address _usdc,\n        address _usdt,\n        address _weth\n    ) {\n        if (_crvUsdUsdcPool == address(0)) revert EmptyAddress();\n        if (_crv3Pool == address(0)) revert EmptyAddress();\n        if (_tricrypto2 == address(0)) revert EmptyAddress();\n        if (_usdc == address(0)) revert EmptyAddress();\n        if (_usdt == address(0)) revert EmptyAddress();\n        if (_weth == address(0)) revert EmptyAddress();\n\n        CRV_USD_USDC_POOL = ICurvePoolLike128WithReturn(_crvUsdUsdcPool);\n        CRV3_POOL = _crv3Pool;\n        TRICTYPTO_2_POOL = _tricrypto2;\n\n        USDC = IERC20(_usdc);\n        USDT = IERC20(_usdt);\n        WETH = IERC20(_weth);\n    }\n\n    /// @dev As Curve LP Tokens can be collateral-only assets we skip the implementation of this function\n    function towardsAsset(address, uint256) external virtual pure returns (address, uint256) {\n        revert Unsupported();\n    }\n\n    /// @inheritdoc IMagician\n    function towardsNative(\n        address,\n        uint256 _amount\n    )\n        external\n        virtual\n        returns (address tokenOut, uint256 amountOut)\n    {\n        tokenOut = address(WETH);\n\n        amountOut = CRV_USD_USDC_POOL\n            .remove_liquidity_one_coin(\n                _amount,\n                USDC_INDEX_CRV_USD_USDC_POOL,\n                UNKNOWN_AMOUNT\n            )\n            .usdcToUsdtVia3Pool(address(CRV3_POOL), USDC, USDT)\n            .usdtToWethTricrypto2(TRICTYPTO_2_POOL, USDT, WETH);\n    }\n}\n"
    },
    "contracts/liquidation/magicians/curveLPTokens/pools/FraxCurveMagician.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../CurveLPTokensMagician128.sol\";\nimport \"../../_common/libraries/FraxUsdcPoolLib.sol\";\nimport \"../../_common/libraries/UsdcUsdt3poolLib.sol\";\nimport \"../../_common/libraries/UsdtWethTricrypto2Lib.sol\";\n\n/// @dev Curve LP Tokens unwrapping\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\ncontract FraxCurveMagician is CurveLPTokensMagician128 {\n    using FraxUsdcPoolLib for uint256;\n    using UsdcUsdt3poolLib for uint256;\n    using UsdtWethTricrypto2Lib for uint256;\n\n    // solhint-disable var-name-mixedcase\n    address public immutable CRV_3_POOL;\n    address public immutable TRICTYPTO_2_POOL;\n\n    IERC20 public immutable USDC;\n    IERC20 public immutable USDT;\n    IERC20 public immutable WETH;\n    IERC20 public immutable FRAX;\n    // solhint-enable var-name-mixedcase\n\n    error EmptyAddress();\n\n    constructor(\n        ICurveLPTokensDetailsFetchersRepository _fetchersRepository,\n        IPriceProvidersRepository _priceProvidersRepository,\n        address _crv3Pool,\n        address _tricrypto2,\n        address _usdc,\n        address _usdt,\n        address _weth,\n        address _frax\n    )\n        CurveLPTokensMagician128(\n            _fetchersRepository,\n            _priceProvidersRepository\n        )\n    {\n        if (_crv3Pool == address(0)) revert EmptyAddress();\n        if (_tricrypto2 == address(0)) revert EmptyAddress();\n        if (_usdc == address(0)) revert EmptyAddress();\n        if (_usdt == address(0)) revert EmptyAddress();\n        if (_weth == address(0)) revert EmptyAddress();\n        if (_frax == address(0)) revert EmptyAddress();\n\n        CRV_3_POOL = _crv3Pool;\n        TRICTYPTO_2_POOL = _tricrypto2;\n\n        USDC = IERC20(_usdc);\n        USDT = IERC20(_usdt);\n        WETH = IERC20(_weth);\n        FRAX = IERC20(_frax);\n    }\n\n    function towardsNative(\n        address _asset,\n        uint256 _amount\n    )\n        external\n        override\n        returns (address tokenOut, uint256 amountOut)\n    {\n        (, uint256 fraxAmount, address poolAddress) = _towardsNative(_asset, _amount);\n\n        tokenOut = address(WETH);\n\n        amountOut = fraxAmount\n            .fraxToUsdcViaCurve(poolAddress, FRAX)\n            .usdcToUsdtVia3Pool(CRV_3_POOL, USDC, USDT)\n            .usdtToWethTricrypto2(TRICTYPTO_2_POOL, USDT, WETH);\n    }\n}\n"
    },
    "contracts/liquidation/magicians/curveLPTokens/pools/Lusd3CrvMagician.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../../_common/libraries/LusdUsdtAsUnderlying.sol\";\nimport \"../../_common/libraries/UsdtWethTricrypto2Lib.sol\";\nimport \"../../interfaces/IMagician.sol\";\n\n/// @dev Curve LP Tokens unwrapping\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\ncontract Lusd3CrvMagician is IMagician {\n    using LusdUsdtAsUnderlying for uint256;\n    using UsdtWethTricrypto2Lib for uint256;\n\n    /// @dev Index value for the coin (curve LUSD/3CRV pool)\n    int128 public constant LUSD_INDEX_LUSD3CRV_POOL = 0;\n    /// @dev Index value for the coin (curve LUSD/3CRV pool)\n    int128 public constant CRV3LP_INDEX_LUSD3CRV_POOL = 1;\n\n    uint256 constant public UNKNOWN_AMOUNT = 1;\n\n    // solhint-disable var-name-mixedcase\n    ICurvePoolLike128WithReturn public immutable LUSD_3CRV_POOL;\n    address public immutable CRV3_POOL;\n    address public immutable TRICTYPTO_2_POOL;\n\n    IERC20 public immutable CRV_3_LP;\n    IERC20 public immutable LUSD;\n    IERC20 public immutable USDT;\n    IERC20 public immutable WETH;\n    // solhint-enable var-name-mixedcase\n\n    /// @dev Revert on a `towardsAsset` call as it in unsupported \n    error Unsupported();\n    /// @dev Revert in the constructor if provided an empty address\n    error EmptyAddress();\n\n    // solhint-disable-next-line code-complexity\n    constructor(\n        address _lusd3CrvPool,\n        address _crv3Pool,\n        address _tricrypto2,\n        address _lusd,\n        address _usdt,\n        address _weth,\n        address _crv3Lp\n    ) {\n        if (_lusd3CrvPool == address(0)) revert EmptyAddress();\n        if (_crv3Pool == address(0)) revert EmptyAddress();\n        if (_tricrypto2 == address(0)) revert EmptyAddress();\n        if (_lusd == address(0)) revert EmptyAddress();\n        if (_usdt == address(0)) revert EmptyAddress();\n        if (_weth == address(0)) revert EmptyAddress();\n        if (_crv3Lp == address(0)) revert EmptyAddress();\n\n        LUSD_3CRV_POOL = ICurvePoolLike128WithReturn(_lusd3CrvPool);\n        CRV3_POOL = _crv3Pool;\n        TRICTYPTO_2_POOL = _tricrypto2;\n\n        LUSD = IERC20(_lusd);\n        USDT = IERC20(_usdt);\n        WETH = IERC20(_weth);\n        CRV_3_LP = IERC20(_crv3Lp);\n    }\n\n    /// @dev As Curve LP Tokens can be collateral-only assets we skip the implementation of this function\n    function towardsAsset(address, uint256) external virtual pure returns (address, uint256) {\n        revert Unsupported();\n    }\n\n    /// @inheritdoc IMagician\n    function towardsNative(\n        address,\n        uint256 _amount\n    )\n        external\n        virtual\n        returns (address tokenOut, uint256 amountOut)\n    {\n        tokenOut = address(WETH);\n\n        amountOut = LUSD_3CRV_POOL\n            .remove_liquidity_one_coin(\n                _amount,\n                LUSD_INDEX_LUSD3CRV_POOL,\n                UNKNOWN_AMOUNT\n            )\n            .lusdToUsdtViaCurve(address(LUSD_3CRV_POOL), LUSD)\n            .usdtToWethTricrypto2(TRICTYPTO_2_POOL, USDT, WETH);\n    }\n}\n"
    },
    "contracts/liquidation/magicians/GOHMMagician.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./interfaces/IMagician.sol\";\nimport \"./interfaces/IOlympusStakingV3Like.sol\";\nimport \"./interfaces/IGOHMLikeV2.sol\";\nimport \"./interfaces/IBalancerVaultLike.sol\";\n\n/// @dev gOHM Magician\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\ncontract GOHMMagician is IMagician {\n    /// @dev Value for gOHM -> OHMv2 balances calculation\n    uint256 public constant TWO_EXTRA_WEIS = (1 wei) + (1 wei);\n\n    /// @dev Argument for Olympus Staking `stake()`. Mint gOHM tokens instantly on stake.\n    bool public constant OLYMPUS_STAKING_CLAIM = true;\n\n    /// @dev Argument for Olympus Staking `stake()` or `unstake()`. Receive gOHM tokens instead of rebasing sOHM.\n    bool public constant OLYMPUS_STAKING_REBASING = false;\n\n    /// @dev Argument for Olympus Staking `unstake()`. Do not trigger rebase() of OHM tokens, save gas.\n    bool public constant OLYMPUS_STAKING_TRIGGER = false;\n\n    /// @dev Limit for OHMv2 swap.\n    uint256 public constant SWAP_AMOUNT_OUT_LIMIT = type(uint256).max;\n\n    /// @dev Limit for OHMv2 swap.\n    uint256 public constant SWAP_AMOUNT_IN_LIMIT = 1;\n\n    /// @dev Required for OHMv2 swap.\n    // solhint-disable-next-line var-name-mixedcase\n    IBalancerVaultLike public immutable BALANCER_VAULT;\n\n    /// @dev OHMv2 pool that is used for swap.\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 public immutable BALANCER_OHM_POOL;\n\n    /// @dev The address of quote token.\n    // solhint-disable-next-line var-name-mixedcase\n    address public immutable QUOTE;\n\n    /// @dev 10 ** (gOHM decimals), constant and equal to 10**18.\n    // solhint-disable-next-line var-name-mixedcase\n    uint256 public immutable TEN_POW_GOHM_DECIMALS;\n\n    /// @dev Original token, OHMv2.\n    // solhint-disable-next-line var-name-mixedcase\n    address public immutable OHM;\n\n    /// @dev Wrapper for rebasing sOHM token.\n    // solhint-disable-next-line var-name-mixedcase\n    IGOHMLikeV2 public immutable GOHM;\n\n    /// @dev Olympus staking contract for OHMv2 <-> gOHM wrapping and unwrapping.\n    // solhint-disable-next-line var-name-mixedcase\n    IOlympusStakingV3Like public immutable OLYMPUS_STAKING_V3;\n\n    error InvalidAsset();\n    error InvalidBalancerPool();\n\n    constructor(\n        address _quote,\n        IOlympusStakingV3Like _olympusStakingV3,\n        IBalancerVaultLike _balancerVault,\n        bytes32 _balancerOhmPool\n    ) {\n        QUOTE = _quote;\n\n        GOHM = IGOHMLikeV2(_olympusStakingV3.gOHM());\n        TEN_POW_GOHM_DECIMALS = 10 ** GOHM.decimals();\n        OHM = _olympusStakingV3.OHM();\n\n        OLYMPUS_STAKING_V3 = _olympusStakingV3;\n        BALANCER_VAULT = _balancerVault;\n        BALANCER_OHM_POOL = _balancerOhmPool;\n\n        if (!verifyPoolAndVault(_balancerVault, _balancerOhmPool)) revert InvalidBalancerPool();\n    }\n\n    /// @inheritdoc IMagician\n    function towardsNative(address _asset, uint256 _amount) external returns (address, uint256) {\n        if (_asset != address(GOHM)) revert InvalidAsset();\n\n        GOHM.approve(address(OLYMPUS_STAKING_V3), _amount);\n\n        uint256 ohmAmount = OLYMPUS_STAKING_V3.unstake(\n            address(this),\n                _amount,\n                OLYMPUS_STAKING_TRIGGER,\n                OLYMPUS_STAKING_REBASING\n        );\n\n        return (QUOTE, _swapOHMForQuote(ohmAmount));\n    }\n\n    /// @inheritdoc IMagician\n    function towardsAsset(address _asset, uint256 _amount) external returns (address, uint256) {\n        if (_asset != address(GOHM)) revert InvalidAsset();\n\n        uint256 ohmAmount = ohmBalanceFrom(_amount);\n        uint256 quoteSpent = _swapQuoteForOHM(ohmAmount);\n\n        IERC20(OHM).approve(address(OLYMPUS_STAKING_V3), ohmAmount);\n        OLYMPUS_STAKING_V3.stake(address(this), ohmAmount, OLYMPUS_STAKING_REBASING, OLYMPUS_STAKING_CLAIM);\n\n        return (address(GOHM), quoteSpent);\n    }\n\n    /// @dev calculate gOHM -> OHMv2 amounts.\n    ///     Our goal is to calculate right amount of OHM that will give us `_gOhmAmount` when we stake it.\n    ///     2 extra weis added to make sure that we will not receive less than `_gOhmAmount`.\n    ///     First `1 wei` explanation:\n    ///     We can lose up to one wei on step of OHM -> gOHM inside OlympusStaking.stake():\n    ///     OHM -> gOHM formula: `ohmAmount * (10**18) / (index);`.\n    ///     The operation of `/(index)` can cause the lost of [0..index-1] from `ohmAmount * (10**18)`.\n    ///     If we add 1 wei to `ohmAmount`, `(ohmAmount + 1 wei) * (10**18) > ohmAmount * (10**18) - (index - 1)`.\n    ///     Index has 9 basis points, it will work until it will not increase 10**18.\n    ///     Second `1 wei` explanation:\n    ///     We can lose up to one wei on step of gOHM -> OHM calculation below.\n    ///     gOHM -> OHM formula: `(gOhmAmount * index) / (10**18)`.\n    ///     The operation of `/ (10**18)` can cause the lost of [0..10**18 - 1] from `(gOhmAmount * index)`.\n    ///     Let's add extra wei to gOHM -> OHM formula.\n    ///     Then on gOHM -> OHM calculations, worst case scenario:\n    ///     ((gOhmAmount * index) / (10**18) + 1) * (10**18) / (index) >=\n    ///     = (gOhmAmount * index - (10**18 - 1) + 10**18) / index =\n    ///     = (gOhmAmount * index + 1) / index >= gOhmAmount\n    /// @param _gOhmAmount input amount of gOHM\n    /// @return ohmAmount equal amount in OHMv2\n    function ohmBalanceFrom(uint256 _gOhmAmount) public view returns (uint256 ohmAmount) {\n        ohmAmount = _gOhmAmount * GOHM.index();\n\n        // we can safely divide by 10 ** 18 and add 2\n        unchecked {\n            ohmAmount = ohmAmount / TEN_POW_GOHM_DECIMALS + TWO_EXTRA_WEIS;\n        }\n    }\n\n    /// @dev verify the Balancer pool and the vault. Sanity check for vault address is a call of getPoolTokens(_poolId).\n    ///     Pool is valid if it has OHMv2 and quote tokens.\n    /// @param _balancerVault address of the Balancer vault\n    /// @param _poolId pool id\n    /// @return true if the pool is valid for the swap\n    function verifyPoolAndVault(IBalancerVaultLike _balancerVault, bytes32 _poolId) public view returns (bool) {\n        (address[] memory tokens,,) = IBalancerVaultLike(_balancerVault).getPoolTokens(_poolId);\n        bool isQuote;\n        bool isOhm;\n\n        for (uint256 i; i < tokens.length && !(isOhm && isQuote);) {\n            if (!isOhm && tokens[i] == OHM) {\n                isOhm = true;\n            } else if (!isQuote && tokens[i] == QUOTE) {\n                isQuote = true;\n            }\n\n            unchecked {\n                i++;\n            }\n        }\n\n        return isQuote && isOhm;\n    }\n\n    /// @dev it swaps OHMv2 for quote token\n    /// @param _ohmAmount exact amountIn of OHMv2 token\n    /// @return quoteReceived amount of quote token received\n    function _swapOHMForQuote(uint256 _ohmAmount) internal returns (uint256 quoteReceived) {\n        IERC20(OHM).approve(address(BALANCER_VAULT), _ohmAmount);\n        quoteReceived = _swapAmountIn(OHM, QUOTE, _ohmAmount, BALANCER_OHM_POOL);\n    }\n\n    /// @dev it swaps quote token for OHMv2\n    /// @param _ohmAmount exact amountOut of OHMv2\n    /// @return quoteSpent amount of quote token spent\n    function _swapQuoteForOHM(uint256 _ohmAmount) internal returns (uint256 quoteSpent) {\n        IERC20(QUOTE).approve(address(BALANCER_VAULT), SWAP_AMOUNT_OUT_LIMIT);\n        quoteSpent = _swapAmountOut(QUOTE, OHM, _ohmAmount, BALANCER_OHM_POOL);\n    }\n\n    /// @dev it swaps _tokenIn for _tokenOut\n    /// @param _tokenIn address of the tokenIn\n    /// @param _tokenOut address of the tokenOut\n    /// @param _amountOut amount of the tokenOut to receive\n    /// @param _poolId balancer pool id\n    /// @return amount of _tokenIn spent\n    function _swapAmountOut(\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _amountOut,\n        bytes32 _poolId\n    ) internal returns (uint256) {\n        IBalancerVaultLike.SingleSwap memory singleSwap = IBalancerVaultLike.SingleSwap(\n            _poolId, IBalancerVaultLike.SwapKind.GIVEN_OUT, address(_tokenIn), address(_tokenOut), _amountOut, \"\"\n        );\n\n        IBalancerVaultLike.FundManagement memory funds = IBalancerVaultLike.FundManagement(\n            address(this), false, payable(address(this)), false\n        );\n\n        return BALANCER_VAULT.swap(singleSwap, funds, SWAP_AMOUNT_OUT_LIMIT, block.timestamp);\n    }\n\n    /// @dev it swaps _tokenIn for _tokenOut\n    /// @param _tokenIn address of the tokenIn\n    /// @param _tokenOut address of the tokenOut\n    /// @param _amountIn amount of the tokenIn to spend\n    /// @param _poolId balancer pool id\n    /// @return amount of _tokenOut received\n    function _swapAmountIn(\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _amountIn,\n        bytes32 _poolId\n    ) internal returns (uint256) {\n        IBalancerVaultLike.SingleSwap memory singleSwap = IBalancerVaultLike.SingleSwap(\n            _poolId, IBalancerVaultLike.SwapKind.GIVEN_IN, address(_tokenIn), address(_tokenOut), _amountIn, \"\"\n        );\n\n        IBalancerVaultLike.FundManagement memory funds = IBalancerVaultLike.FundManagement(\n            address(this), false, payable(address(this)), false\n        );\n\n        return BALANCER_VAULT.swap(singleSwap, funds, SWAP_AMOUNT_IN_LIMIT, block.timestamp);\n    }\n}\n"
    },
    "contracts/liquidation/magicians/interfaces/IBalancerVaultLike.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\ninterface IBalancerVaultLike {\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\n\n    struct SingleSwap {\n        bytes32 poolId;\n        SwapKind kind;\n        address assetIn;\n        address assetOut;\n        uint256 amount;\n        bytes userData;\n    }\n\n    struct FundManagement {\n        address sender;\n        bool fromInternalBalance;\n        address payable recipient;\n        bool toInternalBalance;\n    }\n\n    function swap(\n        SingleSwap memory singleSwap,\n        FundManagement memory funds,\n        uint256 limit,\n        uint256 deadline\n    ) external payable returns (uint256);\n\n    function getPoolTokens(bytes32 poolId)\n        external\n        view\n        returns (\n            address[] memory tokens,\n            uint256[] memory balances,\n            uint256 lastChangeBlock\n        );\n}\n"
    },
    "contracts/liquidation/magicians/interfaces/ICurveLPTokensPriceProviderLike.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"../../../interfaces/IPriceProvider.sol\";\nimport \"../../../priceProviders/curveLPTokens/_common/CurveLPTokensDataTypes.sol\";\n\ninterface ICurveLPTokensPriceProviderLike is IPriceProvider {\n    function lpTokenPool(address _lpToken) external view returns (Pool memory);\n    function getCoins(address _lpToken) external view returns (PoolCoin[] memory);\n}\n"
    },
    "contracts/liquidation/magicians/interfaces/ICurveMetaPoolLike.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\ninterface ICurveMetaPoolLike {\n    // solhint-disable-next-line func-name-mixedcase\n    function exchange_underlying(int128 i, int128 j, uint256 dx, uint256 minDy) external returns (uint256);\n    // solhint-disable-next-line func-name-mixedcase\n    function get_dy_underlying(int128 i, int128 j, uint256 dx) external view returns (uint256);\n}\n"
    },
    "contracts/liquidation/magicians/interfaces/ICurvePoolExchange128.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./ICurvePoolLike128.sol\";\n\ninterface ICurvePoolExchange128 is ICurvePoolLike128 {\n    // solhint-disable-next-line func-name-mixedcase\n    function remove_liquidity_one_coin(uint256 _tokenAmount, int128 i, uint256 _minAmount) external;\n    // solhint-disable-next-line func-name-mixedcase\n    function calc_withdraw_one_coin(uint256 _tokenAmount, int128 i) external view returns (uint256);\n}\n"
    },
    "contracts/liquidation/magicians/interfaces/ICurvePoolExchange256.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./ICurvePoolLike256.sol\";\n\ninterface ICurvePoolExchange256 is ICurvePoolLike256 {\n    // solhint-disable-next-line func-name-mixedcase\n    function remove_liquidity_one_coin(uint256 _tokenAmount, uint256 i, uint256 _minAmount) external;\n    // solhint-disable-next-line func-name-mixedcase\n    function calc_withdraw_one_coin(uint256 _tokenAmount, uint256 i) external view returns (uint256);\n}\n"
    },
    "contracts/liquidation/magicians/interfaces/ICurvePoolLike.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\n/// @dev A simplified version of the Curve Pool interface with methods\n/// that are required for the SETH Magician.\ninterface ICurvePoolLike {\n    function exchange(int128 i, int128 j, uint256 dx, uint256 minDy) external payable returns (uint256);\n    function coins(uint256 i) external view returns (address);\n    // solhint-disable-next-line func-name-mixedcase\n    function get_dy(int128 i, int128 j, uint256 dx) external view returns (uint256);\n}\n"
    },
    "contracts/liquidation/magicians/interfaces/ICurvePoolLike128.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\ninterface ICurvePoolLike128 {\n    // solhint-disable-next-line func-name-mixedcase\n    function exchange(int128 i, int128 j, uint256 dx, uint256 minDy) external;\n    // solhint-disable-next-line func-name-mixedcase\n    function get_dy(int128 i, int128 j, uint256 dx) external view returns (uint256);\n}\n"
    },
    "contracts/liquidation/magicians/interfaces/ICurvePoolLike128WithReturn.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\ninterface ICurvePoolLike128WithReturn {\n    // solhint-disable func-name-mixedcase\n    function exchange(int128 i, int128 j, uint256 dx, uint256 minDy) external returns (uint256);\n    function remove_liquidity_one_coin(uint256 amount, int128 i, uint256 minDy) external returns (uint256);\n    function exchange_underlying(int128 _i, int128 _j, uint256 _dx, uint256 _minDy) external returns (uint256);\n    function get_dy(int128 i, int128 j, uint256 dx) external view returns (uint256);\n    // solhint-enable func-name-mixedcase\n}\n"
    },
    "contracts/liquidation/magicians/interfaces/ICurvePoolLike256.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\ninterface ICurvePoolLike256 {\n    // solhint-disable-next-line func-name-mixedcase\n    function exchange(uint256 i, uint256 j, uint256 dx, uint256 minDy) external;\n    // solhint-disable-next-line func-name-mixedcase\n    function get_dy(uint256 i, uint256 j, uint256 dx) external view returns (uint256);\n}\n"
    },
    "contracts/liquidation/magicians/interfaces/ICurvePoolLike256WithReturn.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\ninterface ICurvePoolLike256WithReturn {\n    // solhint-disable func-name-mixedcase\n    function exchange(uint256 i, uint256 j, uint256 dx, uint256 minDy) external returns (uint256);\n    function get_dy(uint256 i, uint256 j, uint256 dx) external view returns (uint256);\n    // solhint-enable func-name-mixedcase\n}\n"
    },
    "contracts/liquidation/magicians/interfaces/IGOHMLikeV2.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IGOHMLikeV2 is IERC20 {\n    function index() external view returns (uint256);\n    function decimals() external view returns (uint256);\n}\n"
    },
    "contracts/liquidation/magicians/interfaces/IMagician.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9.0;\n\n/// @notice Extension for the Liquidation helper to support such operations as unwrapping\ninterface IMagician {\n    /// @notice Operates to unwrap an `_asset`\n    /// @param _asset Asset to be unwrapped\n    /// @param _amount Amount of the `_asset`\n    /// @return tokenOut A token that the `_asset` has been converted to\n    /// @return amountOut Amount of the `tokenOut` that we received\n    function towardsNative(address _asset, uint256 _amount) external returns (address tokenOut, uint256 amountOut);\n\n    /// @notice Performs operation opposit to `towardsNative`\n    /// @param _asset Asset to be wrapped\n    /// @param _amount Amount of the `_asset`\n    /// @return tokenOut A token that the `_asset` has been converted to\n    /// @return amountOut Amount of the quote token that we spent to get `_amoun` of the `_asset`\n    function towardsAsset(address _asset, uint256 _amount) external returns (address tokenOut, uint256 amountOut);\n}\n"
    },
    "contracts/liquidation/magicians/interfaces/IOlympusStakingV3Like.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\n/// @dev A simplified version of the Olympus staking V3 interface with methods\n/// that are required for the gOHM magician contract.\ninterface IOlympusStakingV3Like {\n    function unstake(\n        address _to,\n        uint256 _amount,\n        bool _trigger,\n        bool _rebasing\n    ) external returns (uint256 amount_);\n\n    function stake(\n        address _to,\n        uint256 _amount,\n        bool _rebasing,\n        bool _claim\n    ) external returns (uint256);\n\n    // solhint-disable-next-line func-name-mixedcase\n    function OHM() external view returns (address);\n    function gOHM() external view returns (address);\n}\n"
    },
    "contracts/liquidation/magicians/interfaces/ISTETHLike2.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\n/// @dev A simplified version of the stETH\ninterface ISTETHLike2 {\n    function getPooledEthByShares(uint256 _wstAmount) external view returns (uint256);\n    function getSharesByPooledEth(uint256 _ethAmount) external view returns (uint256);\n}\n"
    },
    "contracts/liquidation/magicians/interfaces/IWETH9Like.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\n/// @dev A simplified version of the WETH\ninterface IWETH9Like {\n    function deposit() external payable;\n    function withdraw(uint256 _amount) external;\n}\n"
    },
    "contracts/liquidation/magicians/interfaces/IWstETHLike.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\ninterface IWstETHLike {\n    function unwrap(uint256 _wstETHAmount) external returns (uint256 stETHAmount);\n    function wrap(uint256 _stETHAmount) external returns (uint256 wstETHAmount);\n    function getWstETHByStETH(uint256 _stETHAmount) external view returns (uint256);\n}\n"
    },
    "contracts/liquidation/magicians/OHMMagician.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./interfaces/IMagician.sol\";\nimport \"./interfaces/IOlympusStakingV3Like.sol\";\nimport \"./interfaces/IGOHMLikeV2.sol\";\nimport \"./interfaces/IBalancerVaultLike.sol\";\n\n/// @dev OHM Magician\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\n/// we made it because current Uni pool is empty\n/// it could be base for `GOHMMagician` but `GOHMMagician` is already deployed\ncontract OHMMagician is IMagician {\n    /// @dev Limit for OHMv2 swap.\n    uint256 public constant SWAP_AMOUNT_OUT_LIMIT = type(uint256).max;\n\n    /// @dev Limit for OHMv2 swap.\n    uint256 public constant SWAP_AMOUNT_IN_LIMIT = 1;\n\n    /// @dev Required for OHMv2 swap.\n    // solhint-disable-next-line var-name-mixedcase\n    IBalancerVaultLike public immutable BALANCER_VAULT;\n\n    /// @dev OHMv2 pool that is used for swap.\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 public immutable BALANCER_OHM_POOL;\n\n    /// @dev The address of quote token.\n    // solhint-disable-next-line var-name-mixedcase\n    address public immutable QUOTE;\n\n    /// @dev Original token, OHMv2.\n    // solhint-disable-next-line var-name-mixedcase\n    address public immutable OHM;\n\n    error InvalidAsset();\n    error InvalidBalancerPool();\n\n    constructor(\n        address _quote,\n        IOlympusStakingV3Like _olympusStakingV3,\n        IBalancerVaultLike _balancerVault,\n        bytes32 _balancerOhmPool\n    ) {\n        QUOTE = _quote;\n\n        OHM = _olympusStakingV3.OHM();\n\n        BALANCER_VAULT = _balancerVault;\n        BALANCER_OHM_POOL = _balancerOhmPool;\n\n        if (!verifyPoolAndVault(_balancerVault, _balancerOhmPool)) revert InvalidBalancerPool();\n    }\n\n    /// @inheritdoc IMagician\n    function towardsNative(address _asset, uint256 _amount) external returns (address asset, uint256 amount) {\n        if (_asset != address(OHM)) revert InvalidAsset();\n\n        return (QUOTE, _swapOHMForQuote(_amount));\n    }\n\n    /// @inheritdoc IMagician\n    function towardsAsset(address _asset, uint256 _amount) external returns (address asset, uint256 quoteSpent) {\n        if (_asset != address(OHM)) revert InvalidAsset();\n\n        return (address(OHM), _swapQuoteForOHM(_amount));\n    }\n\n    /// @dev verify the Balancer pool and the vault. Sanity check for vault address is a call of getPoolTokens(_poolId).\n    ///     Pool is valid if it has OHMv2 and quote tokens.\n    /// @param _balancerVault address of the Balancer vault\n    /// @param _poolId pool id\n    /// @return true if the pool is valid for the swap\n    function verifyPoolAndVault(IBalancerVaultLike _balancerVault, bytes32 _poolId) public view returns (bool) {\n        (address[] memory tokens,,) = IBalancerVaultLike(_balancerVault).getPoolTokens(_poolId);\n        bool isQuote;\n        bool isOhm;\n\n        for (uint256 i; i < tokens.length && !(isOhm && isQuote);) {\n            if (!isOhm && tokens[i] == OHM) {\n                isOhm = true;\n            } else if (!isQuote && tokens[i] == QUOTE) {\n                isQuote = true;\n            }\n\n            unchecked {\n                i++;\n            }\n        }\n\n        return isQuote && isOhm;\n    }\n\n    /// @dev it swaps OHMv2 for quote token\n    /// @param _ohmAmount exact amountIn of OHMv2 token\n    /// @return quoteReceived amount of quote token received\n    function _swapOHMForQuote(uint256 _ohmAmount) internal returns (uint256 quoteReceived) {\n        IERC20(OHM).approve(address(BALANCER_VAULT), _ohmAmount);\n        quoteReceived = _swapAmountIn(OHM, QUOTE, _ohmAmount, BALANCER_OHM_POOL);\n    }\n\n    /// @dev it swaps quote token for OHMv2\n    /// @param _ohmAmount exact amountOut of OHMv2\n    /// @return quoteSpent amount of quote token spent\n    function _swapQuoteForOHM(uint256 _ohmAmount) internal returns (uint256 quoteSpent) {\n        IERC20(QUOTE).approve(address(BALANCER_VAULT), SWAP_AMOUNT_OUT_LIMIT);\n        quoteSpent = _swapAmountOut(QUOTE, OHM, _ohmAmount, BALANCER_OHM_POOL);\n    }\n\n    /// @dev it swaps _tokenIn for _tokenOut\n    /// @param _tokenIn address of the tokenIn\n    /// @param _tokenOut address of the tokenOut\n    /// @param _amountOut amount of the tokenOut to receive\n    /// @param _poolId balancer pool id\n    /// @return amount of _tokenIn spent\n    function _swapAmountOut(\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _amountOut,\n        bytes32 _poolId\n    ) internal returns (uint256) {\n        IBalancerVaultLike.SingleSwap memory singleSwap = IBalancerVaultLike.SingleSwap(\n            _poolId, IBalancerVaultLike.SwapKind.GIVEN_OUT, address(_tokenIn), address(_tokenOut), _amountOut, \"\"\n        );\n\n        IBalancerVaultLike.FundManagement memory funds = IBalancerVaultLike.FundManagement(\n            address(this), false, payable(address(this)), false\n        );\n\n        return BALANCER_VAULT.swap(singleSwap, funds, SWAP_AMOUNT_OUT_LIMIT, block.timestamp);\n    }\n\n    /// @dev it swaps _tokenIn for _tokenOut\n    /// @param _tokenIn address of the tokenIn\n    /// @param _tokenOut address of the tokenOut\n    /// @param _amountIn amount of the tokenIn to spend\n    /// @param _poolId balancer pool id\n    /// @return amount of _tokenOut received\n    function _swapAmountIn(\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _amountIn,\n        bytes32 _poolId\n    ) internal returns (uint256) {\n        IBalancerVaultLike.SingleSwap memory singleSwap = IBalancerVaultLike.SingleSwap(\n            _poolId, IBalancerVaultLike.SwapKind.GIVEN_IN, address(_tokenIn), address(_tokenOut), _amountIn, \"\"\n        );\n\n        IBalancerVaultLike.FundManagement memory funds = IBalancerVaultLike.FundManagement(\n            address(this), false, payable(address(this)), false\n        );\n\n        return BALANCER_VAULT.swap(singleSwap, funds, SWAP_AMOUNT_IN_LIMIT, block.timestamp);\n    }\n}\n"
    },
    "contracts/liquidation/magicians/STETHMagician.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./interfaces/IWETH9Like.sol\";\nimport \"./_common/STETHBaseMagician.sol\";\n\n/// @dev stETH Magician\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\ncontract STETHMagician is STETHBaseMagician {\n    error InvalidAsset();\n\n    /// @inheritdoc IMagician\n    function towardsNative(address _asset, uint256 _amount) external returns (address tokenOut, uint256 amountOut) {\n        if (_asset != address(STETH)) {\n            revert InvalidAsset();\n        }\n\n        IERC20(STETH).approve(address(CURVE_POOL), _amount);\n\n        tokenOut = WETH;\n        uint256 minAmountOut = 1;\n        amountOut = CURVE_POOL.exchange(STETH_INDEX, ETH_INDEX, _amount, minAmountOut);\n\n        // Wrap ETH\n        IWETH9Like(WETH).deposit{value: amountOut}();\n    }\n\n    /// @inheritdoc IMagician\n    function towardsAsset(address _asset, uint256 _amount) external returns (address tokenOut, uint256 amountOut) {\n        if (_asset != STETH) {\n            revert InvalidAsset();\n        }\n\n        // calculate a price stETH -> ETH \n        (uint256 requiredETH, uint256 expectedStEthAmount) = _calcRequiredETH(_amount);\n\n        // Un wrap required amount of ETH (WETH -> ETH)\n        IWETH9Like(WETH).withdraw(requiredETH);\n\n        // exchange ETH -> stETH\n        CURVE_POOL.exchange{value: requiredETH}(\n            ETH_INDEX,\n            STETH_INDEX,\n            requiredETH,\n            expectedStEthAmount\n        );\n\n        return (STETH, requiredETH);\n    }\n}\n"
    },
    "contracts/liquidation/magicians/sUSDe/SUSDeViaCurveMaigicianEth.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../interfaces/IMagician.sol\";\nimport \"../_common/libraries/FraxUsdcPoolLib.sol\";\nimport \"../_common/libraries/SdaiFraxPoolLib.sol\";\nimport \"../_common/libraries/SdaiSusdePoolLib.sol\";\nimport \"../_common/libraries/UsdcCrvUsdcPoolLib.sol\";\nimport \"../_common/libraries/CrvUSDToWethViaTriCrvPoolLib.sol\";\n\n/// @dev sUSDe Magician\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\ncontract SUSDeViaCurveMaigicianEth is IMagician {\n    using FraxUsdcPoolLib for uint256;\n    using SdaiFraxPoolLib for uint256;\n    using SdaiSusdePoolLib for uint256;\n    using UsdcCrvUsdcPoolLib for uint256;\n    using CrvUSDToWethViaTriCrvPoolLib for uint256;\n\n    IERC20 public constant SUSDE = IERC20(0x9D39A5DE30e57443BfF2A8307A4256c8797A3497);\n    IERC20 public constant SDAI = IERC20(0x83F20F44975D03b1b09e64809B757c47f942BEeA);\n    IERC20 public constant FRAX = IERC20(0x853d955aCEf822Db058eb8505911ED77F175b99e);\n    IERC20 public constant USDC = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\n    IERC20 public constant CRV_USD = IERC20(0xf939E0A03FB07F59A73314E73794Be0E57ac1b4E);\n\n    address public constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n\n    address public constant SDAI_FRAX_POOL = 0xcE6431D21E3fb1036CE9973a3312368ED96F5CE7;\n    address public constant USDC_CRV_USD_POOOL = 0x4DEcE678ceceb27446b35C672dC7d61F30bAD69E;\n    address public constant FRX_USDC_POOL = 0xDcEF968d416a41Cdac0ED8702fAC8128A64241A2;\n    address public constant SDAI_SUSDE_POOL = 0x167478921b907422F8E88B43C4Af2B8BEa278d3A;\n    address public constant TRI_CRV_POOL = 0x4eBdF703948ddCEA3B11f675B4D1Fba9d2414A14;\n\n    error Unsupported();\n\n    /// @inheritdoc IMagician\n    function towardsNative(\n        address _asset,\n        uint256 _amount\n    )\n        external\n        virtual\n        returns (address tokenOut, uint256 amountOut)\n    {\n        if (_asset != address(SUSDE)) revert Unsupported();\n\n        tokenOut = address(WETH);\n\n        amountOut;\n\n        {\n            amountOut = _amount\n                .susdeToSdaiViaCurve(SDAI_SUSDE_POOL, SUSDE)\n                .sdaiToFraxViaCurve(SDAI_FRAX_POOL, SDAI)\n                .fraxToUsdcViaCurve(FRX_USDC_POOL, FRAX)\n                .usdcToCrvUsdViaCurve(USDC_CRV_USD_POOOL, USDC);\n        }\n\n        amountOut = amountOut.crvUsdToWethViaTriCrv(TRI_CRV_POOL, CRV_USD);\n    }\n\n    /// @dev As Curve LP Tokens can be collateral-only assets we skip the implementation of this function\n    function towardsAsset(address, uint256) external virtual pure returns (address, uint256) {\n        revert Unsupported();\n    }\n}\n"
    },
    "contracts/liquidation/magicians/WSTETHMagician.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./_common/STETHBaseMagician.sol\";\nimport \"./interfaces/IWETH9Like.sol\";\nimport \"./interfaces/ISTETHLike2.sol\";\n\n/// @dev wstETH Magician\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\ncontract WSTETHMagician is STETHBaseMagician {\n    /// @dev Revert if `towardsNative` or `towardsAsset` has been executed for an asset other than `wstETH`\n    error InvalidAsset();\n\n    /// @inheritdoc IMagician\n    function towardsNative(address _asset, uint256 _amount) external returns (address tokenOut, uint256 amountOut) {\n        if (_asset != address(WSTETH)) {\n            revert InvalidAsset();\n        }\n\n        uint256 stETHAmount = WSTETH.unwrap(_amount);\n\n        return (STETH, stETHAmount);\n    }\n\n    /// @inheritdoc IMagician\n    function towardsAsset(address _asset, uint256 _amount) external returns (address tokenOut, uint256 amountOut) {\n        if (_asset != address(WSTETH)) {\n            revert InvalidAsset();\n        }\n\n        // calculate a price wstETH -> stETH\n        uint256 stETHAmountRequired;\n        // We have to add 1 wei to get the exact amount of stETH that we need,\n        // as we lost it in the `getPooledEthByShares` function because of the solidity precision error on the division\n        unchecked { stETHAmountRequired = ISTETHLike2(STETH).getPooledEthByShares(_amount) + 1 wei; }\n\n        // calculate a price stETH -> ETH \n        (uint256 requiredETH, uint256 expectedStEthAmount) = _calcRequiredETH(stETHAmountRequired);\n\n        // Un wrap required amount of ETH (WETH -> ETH)\n        IWETH9Like(WETH).withdraw(requiredETH);\n\n        // exchange ETH -> stETH\n        uint256 stETHReceived = CURVE_POOL.exchange{value: requiredETH}(\n            ETH_INDEX,\n            STETH_INDEX,\n            requiredETH,\n            expectedStEthAmount\n        );\n\n        IERC20(STETH).approve(address(WSTETH), stETHReceived);\n\n        // Wrap stETH -> wstETH\n        WSTETH.wrap(stETHReceived);\n\n        return (address(WSTETH), requiredETH);\n    }\n}\n"
    },
    "contracts/liquidation/ManualLiquidation.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../interfaces/ISiloRepository.sol\";\nimport \"./interface/ILiquidationHelper.sol\";\n\nimport \"../lib/Ping.sol\";\nimport \"./LiquidationRepay.sol\";\n\n\n/// @notice LiquidationHelper IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\n/// see https://github.com/silo-finance/liquidation#readme for details how liquidation process should look like\ncontract ManualLiquidation is ILiquidationHelper, IFlashLiquidationReceiver, LiquidationRepay {\n\n    ISiloRepository public immutable SILO_REPOSITORY; // solhint-disable-line var-name-mixedcase\n\n    error InvalidSiloRepository();\n    error NotSilo();\n    error UsersMustMatchSilos();\n\n    /// @dev event emitted on user liquidation\n    /// @param silo Silo where liquidation happen\n    /// @param user User that been liquidated\n    event LiquidationExecuted(address indexed silo, address indexed user);\n\n\n    constructor (address _repository) {\n        if (!Ping.pong(ISiloRepository(_repository).siloRepositoryPing)) {\n            revert InvalidSiloRepository();\n        }\n\n        SILO_REPOSITORY = ISiloRepository(_repository);\n    }\n\n    receive() external payable {}\n\n    function executeLiquidation(address _user, ISilo _silo) external {\n        address[] memory users = new address[](1);\n        users[0] = _user;\n\n        _silo.flashLiquidate(users, abi.encode(msg.sender));\n    }\n\n    /// @notice this is working example of how to perform manual liquidation, this method will be called by Silo.\n    /// Assets for repay will be transferred from tx executor, so there must be allowance set.\n    /// After repay all collaterals wil be transfer to tx executor.\n    /// @dev after liquidation we always send remaining tokens so contract should never has any leftover\n    function siloLiquidationCallback(\n        address _user,\n        address[] calldata _assets,\n        uint256[] calldata _receivedCollaterals,\n        uint256[] calldata _shareAmountsToRepaid,\n        bytes calldata _flashReceiverData\n    ) external override {\n        if (!SILO_REPOSITORY.isSilo(msg.sender)) revert NotSilo();\n\n        address payable executor = abi.decode(_flashReceiverData, (address));\n\n        _pullAssetsForRepay(_assets, _shareAmountsToRepaid, executor);\n\n        _repay(ISilo(msg.sender), _user, _assets, _shareAmountsToRepaid);\n\n        _transferChange(_assets, _receivedCollaterals, executor);\n\n        emit LiquidationExecuted(msg.sender, _user);\n    }\n\n    function _transferChange(\n        address[] calldata _assets,\n        uint256[] calldata _receivedCollaterals,\n        address _executor\n    ) internal {\n        // change that left after repay will be send to `_liquidator`\n        for (uint256 i = 0; i < _assets.length;) {\n            if (_receivedCollaterals[i] != 0) {\n                // shareAmountsToRepaid will go entirely to Silo, so no need to transfer\n                // we need to handle receivedCollaterals only\n                IERC20(_assets[i]).transfer(_executor, _receivedCollaterals[i]);\n            }\n\n            // we will never have that many assets to overflow\n            unchecked { i++; }\n        }\n    }\n\n    function _pullAssetsForRepay(\n        address[] calldata _assets,\n        uint256[] calldata _shareAmountsToRepaid,\n        address _executor\n    ) internal {\n        for (uint256 i = 0; i < _assets.length;) {\n            if (_shareAmountsToRepaid[i] != 0) {\n                IERC20(_assets[i]).transferFrom(_executor, address(this), _shareAmountsToRepaid[i]);\n            }\n\n            // we will never have that many assets to overflow\n            unchecked { i++; }\n        }\n    }\n}\n"
    },
    "contracts/liquidation/SiloLiquidationLens.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"../interfaces/ISilo.sol\";\nimport \"../lib/SolvencyV2.sol\";\nimport \"../lib/EasyMathV2.sol\";\nimport \"../lib/Ping.sol\";\n\n/// @title SiloLiquidationLens\n/// @custom:security-contact security@silo.finance\ncontract SiloLiquidationLens {\n    using EasyMathV2 for uint256;\n\n    ISiloRepository immutable public siloRepository;\n\n    error InvalidSiloRepository();\n\n    constructor (ISiloRepository _siloRepo) {\n        if (!Ping.pong(_siloRepo.siloRepositoryPing)) revert InvalidSiloRepository();\n\n        siloRepository = _siloRepo;\n    }\n\n    /// @dev view method of ISilo.flashLiquidate\n    /// @param _silo Silo address from which to read data\n    /// @param _users array of users for witch we want to get liquidation data\n    /// @return assets array of all processed assets (collateral + debt, including removed)\n    /// @return receivedCollaterals receivedCollaterals[userId][assetId] => amount\n    /// amounts of collaterals send to `_flashReceiver`\n    /// @return shareAmountsToRepay shareAmountsToRepaid[userId][assetId] => amount\n    /// required amounts of debt to be repaid\n    function flashLiquidateView(ISilo _silo, address[] memory _users)\n        external\n        view\n        returns (\n            address[] memory assets,\n            uint256[][] memory receivedCollaterals,\n            uint256[][] memory shareAmountsToRepay\n        )\n    {\n        assets = _silo.getAssets();\n        uint256 usersLength = _users.length;\n        receivedCollaterals = new uint256[][](usersLength);\n        shareAmountsToRepay = new uint256[][](usersLength);\n\n        for (uint256 i = 0; i < usersLength; i++) {\n            (receivedCollaterals[i], shareAmountsToRepay[i]) = _userLiquidationView(_silo, assets, _users[i]);\n        }\n    }\n\n    /// @dev gets interest rates model object\n    /// @param _silo Silo address from which to read data\n    /// @param _asset asset for which to calculate interest rate\n    /// @return IInterestRateModel interest rates model object\n    function getModel(ISilo _silo, address _asset) public view returns (IInterestRateModel) {\n        return IInterestRateModel(siloRepository.getInterestRateModel(address(_silo), _asset));\n    }\n\n    function _userLiquidationView(ISilo _silo, address[] memory _assets, address _user)\n        internal\n        view\n        returns (uint256[] memory receivedCollaterals, uint256[] memory shareAmountsToRepay)\n    {\n        // gracefully fail if _user is solvent\n        if (_silo.isSolvent(_user)) {\n            uint256[] memory empty = new uint256[](_assets.length);\n            return (empty, empty);\n        }\n\n        (receivedCollaterals, shareAmountsToRepay) = _flashUserLiquidationView(_silo, _assets, _user);\n    }\n\n    function _flashUserLiquidationView(ISilo _silo, address[] memory _allSiloAssets, address _borrower)\n        internal\n        view\n        returns (uint256[] memory receivedCollaterals, uint256[] memory amountsToRepay)\n    {\n        uint256 assetsLength = _allSiloAssets.length;\n        receivedCollaterals = new uint256[](assetsLength);\n        amountsToRepay = new uint256[](assetsLength);\n\n        uint256 protocolLiquidationFee = siloRepository.protocolLiquidationFee();\n\n        for (uint256 i = 0; i < assetsLength; i++) {\n            ISilo.AssetStorage memory _state = _silo.assetStorage(_allSiloAssets[i]);\n            ISilo.AssetInterestData memory _assetInterestData = _silo.interestData(_allSiloAssets[i]);\n\n            _accrueInterestView(_silo, _state, _assetInterestData, _allSiloAssets[i]);\n            // we do not allow for partial repayment on liquidation, that's why max\n            (amountsToRepay[i],) = _calculateDebtAmountAndShare(_state, _borrower);\n\n            uint256 withdrawnOnlyAmount = _calculateWithdrawAssetAmount(\n                _state.collateralOnlyDeposits,\n                _state.collateralOnlyToken,\n                _borrower,\n                protocolLiquidationFee,\n                _assetInterestData.protocolFees\n            );\n\n            uint256 withdrawnAmount = _calculateWithdrawAssetAmount(\n                _state.totalDeposits,\n                _state.collateralToken,\n                _borrower,\n                protocolLiquidationFee,\n                _assetInterestData.protocolFees\n            );\n\n            receivedCollaterals[i] = withdrawnOnlyAmount + withdrawnAmount;\n        }\n    }\n\n    function _accrueInterestView(\n        ISilo _silo,\n        ISilo.AssetStorage memory _state,\n        ISilo.AssetInterestData memory _assetInterestData,\n        address _asset\n    )\n        internal\n        view\n    {\n        uint256 lastTimestamp = _assetInterestData.interestRateTimestamp;\n\n        // This is the first time, so we can return early and save some gas\n        if (lastTimestamp == 0) {\n            _assetInterestData.interestRateTimestamp = uint64(block.timestamp);\n            return;\n        }\n\n        // Interest has already been accrued this block\n        if (lastTimestamp == block.timestamp) {\n            return;\n        }\n\n        uint256 rcomp = getModel(_silo, _asset).getCompoundInterestRate(address(_silo), _asset, block.timestamp);\n        uint256 protocolShareFee = siloRepository.protocolShareFee();\n\n        uint256 totalBorrowAmountCached = _state.totalBorrowAmount;\n\n        uint256 totalInterest = totalBorrowAmountCached * rcomp / SolvencyV2._PRECISION_DECIMALS;\n        uint256 protocolShare = totalInterest * protocolShareFee / SolvencyV2._PRECISION_DECIMALS;\n        uint256 depositorsShare = totalInterest - protocolShare;\n\n        // update contract state\n        _state.totalBorrowAmount = totalBorrowAmountCached + totalInterest;\n        _state.totalDeposits = _state.totalDeposits + depositorsShare;\n        _assetInterestData.protocolFees = _assetInterestData.protocolFees + protocolShare;\n        _assetInterestData.interestRateTimestamp = uint64(block.timestamp);\n    }\n\n    function _calculateDebtAmountAndShare(ISilo.AssetStorage memory _assetStorage, address _borrower)\n        internal\n        view\n        returns (uint256 amount, uint256 repayShare)\n    {\n        repayShare = _assetStorage.debtToken.balanceOf(_borrower);\n        uint256 debtTokenTotalSupply = _assetStorage.debtToken.totalSupply();\n        uint256 totalBorrowed = _assetStorage.totalBorrowAmount;\n        amount = repayShare.toAmountRoundUp(totalBorrowed, debtTokenTotalSupply);\n    }\n\n    function _calculateWithdrawAssetAmount(\n        uint256 _assetTotalDeposits,\n        IShareToken _shareToken,\n        address _depositor,\n        uint256 _protocolLiquidationFee,\n        uint256 _protocolFees\n    )\n        internal\n        view\n        returns (uint256 withdrawnAmount)\n    {\n        uint256 burnedShare = _shareToken.balanceOf(_depositor);\n        withdrawnAmount = burnedShare.toAmount(_assetTotalDeposits, _shareToken.totalSupply());\n\n        if (withdrawnAmount == 0) return 0;\n\n        if (_protocolLiquidationFee != 0) {\n            withdrawnAmount = _applyLiquidationFee(withdrawnAmount, _protocolLiquidationFee, _protocolFees);\n        }\n    }\n\n    function _applyLiquidationFee(\n        uint256 _amount,\n        uint256 _protocolLiquidationFee,\n        uint256 _protocolFees\n    )\n        internal\n        pure\n        returns (uint256 change)\n    {\n        uint256 liquidationFeeAmount;\n\n        (liquidationFeeAmount,) = SolvencyV2.calculateLiquidationFee(_protocolFees, _amount, _protocolLiquidationFee);\n\n        unchecked {\n            // if fees will not be higher than 100% this will not underflow, this is responsibility of siloRepository\n            // in case we do underflow, we can expect liquidator reject tx because of too little change\n            change = _amount - liquidationFeeAmount;\n        }\n    }\n}\n"
    },
    "contracts/liquidation/UniswapV3SwapV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\npragma abicoder v2;\n\nimport \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\";\nimport \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\";\nimport \"../interfaces/ISwapper.sol\";\nimport \"../interfaces/IPriceProvider.sol\";\n\nstruct PricePath {\n    IUniswapV3Pool pool;\n    // if target/interim token is token0, then TRUE\n    bool token0IsInterim;\n}\n\n/// @dev UniswapV3Swap IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\n///         NOTE THAT SWAP DONE BY THIS CONTRACT MIGHT NOT BE OPTIMISED, WE ARE NOT USING SLIPPAGE AND YOU CAN LOSE\n///         MONEY BY USING IT.\ncontract UniswapV3SwapV2 is ISwapper {\n    bytes4 constant private _POOLS_SELECTOR = bytes4(keccak256(\"pools(address)\"));\n\n    ISwapRouter public immutable router;\n\n    error RouterIsZero();\n    error PoolNotSet();\n\n    constructor (address _router) {\n        if (_router == address(0)) revert RouterIsZero();\n\n        router = ISwapRouter(_router);\n    }\n\n    /// @inheritdoc ISwapper\n    function swapAmountIn(\n        address,\n        address,\n        uint256 _amount,\n        address _priceProvider,\n        address _siloAsset\n    ) external override returns (uint256 amountOut) {\n        PricePath[] memory pricePath = fetchPricePath(_priceProvider, _siloAsset);\n        bytes memory path = createPath(pricePath);\n        return _swapAmountIn(path, _amount);\n    }\n\n    /// @inheritdoc ISwapper\n    function swapAmountOut(\n        address,\n        address,\n        uint256 _amountOut,\n        address _priceProvider,\n        address _siloAsset\n    ) external override returns (uint256 amountIn) {\n        PricePath[] memory pricePath = fetchPricePath(_priceProvider, _siloAsset);\n        bytes memory path = createPath(pricePath);\n        return _swapAmountOut(path, _amountOut);\n    }\n\n    /// @inheritdoc ISwapper\n    function spenderToApprove() external view override returns (address) {\n        return address(router);\n    }\n\n    /// @dev It will fetch price path for `_asset`, see UniswapV3PriceProvider.PricePath\n    function fetchPricePath(address _priceProvider, address _asset)\n        public\n        view\n        returns (PricePath[] memory pricePath)\n    {\n        bytes memory callData = abi.encodeWithSelector(_POOLS_SELECTOR, _asset);\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory data) = _priceProvider.staticcall(callData);\n        if (!success) revert PoolNotSet();\n\n        pricePath = abi.decode(data, (PricePath[]));\n    }\n\n    /// @param _pricePath asset price path, see UniswapV3PriceProvider.PricePath\n    /// @return path The path is a sequence of (tokenAddress - fee - tokenAddress), which are the variables needed to\n    /// compute each pool contract address in our sequence of swaps. The multihop swap router code will automatically\n    /// find the correct pool with these variables, and execute the swap needed within each pool in our sequence.\n    /// see https://docs.uniswap.org/protocol/guides/swaps/multihop-swaps#input-parameters\n    function createPath(PricePath[] memory _pricePath)\n        public\n        view\n        returns (bytes memory path)\n    {\n        uint256 i;\n\n        while (i < _pricePath.length) {\n            (address token0, address token1) = (_pricePath[i].pool.token0(), _pricePath[i].pool.token1());\n            (address from, address target) = _pricePath[i].token0IsInterim ? (token1, token0) : (token0, token1);\n\n            if (i == _pricePath.length - 1) {\n                path = abi.encodePacked(path, from, _pricePath[i].pool.fee(), target);\n            } else {\n                path = abi.encodePacked(path, from, _pricePath[i].pool.fee());\n            }\n\n            unchecked {\n                // we will not overflow because we stop at i == _pricePath.length\n                i++;\n            }\n        }\n    }\n\n    function _swapAmountIn(bytes memory _path, uint256 _amountIn) internal returns (uint256 amountOut) {\n        ISwapRouter.ExactInputParams memory params =\n            ISwapRouter.ExactInputParams({\n            path: _path,\n            recipient: address(this),\n            deadline: block.timestamp,\n            amountIn: _amountIn,\n            amountOutMinimum: 1\n        });\n\n        return router.exactInput(params);\n    }\n\n    function _swapAmountOut(bytes memory _path, uint256 _amountOut) internal returns (uint256 amountOut) {\n        ISwapRouter.ExactOutputParams memory params = ISwapRouter.ExactOutputParams({\n            path: _path,\n            recipient: address(this),\n            deadline: block.timestamp,\n            amountOut: _amountOut,\n            amountInMaximum: type(uint256).max\n        });\n\n        return router.exactOutput(params);\n    }\n}\n"
    },
    "contracts/liquidation/ZeroExSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../lib/RevertBytes.sol\";\n\n/// @dev Based on demo contract that swaps its ERC20 balance for another ERC20.\n/// demo source: https://github.com/0xProject/0x-api-starter-guide-code/blob/master/contracts/SimpleTokenSwap.sol\ncontract ZeroExSwap {\n    using RevertBytes for bytes;\n\n    /// @param sellToken The `sellTokenAddress` field from the API response.\n    /// @param buyToken The `buyTokenAddress` field from the API response.\n    /// @param allowanceTarget The `allowanceTarget` field from the API response.\n    /// @param swapCallData The `data` field from the API response.\n    struct SwapInput0x {\n        address sellToken;\n        address allowanceTarget;\n        bytes swapCallData;\n    }\n\n    /// @dev 0x ExchangeProxy address.\n    /// See https://docs.0x.org/developer-resources/contract-addresses\n    /// The `to` field from the API response, but at the same time,\n    /// TODO: maybe unit test that will check, if it does not changed?\n    // solhint-disable-next-line var-name-mixedcase\n    address public immutable EXCHANGE_PROXY;\n\n    event BoughtTokens(address sellToken, address buyToken, uint256 boughtAmount);\n\n    error AddressZero();\n    error TargetNotExchangeProxy();\n    error ApprovalFailed();\n\n    constructor(address _exchangeProxy) {\n        if (_exchangeProxy == address(0)) revert AddressZero();\n\n        EXCHANGE_PROXY = _exchangeProxy;\n    }\n\n    /// @dev Swaps ERC20->ERC20 tokens held by this contract using a 0x-API quote.\n    /// Must attach ETH equal to the `value` field from the API response.\n    /// @param _sellToken The `sellTokenAddress` field from the API response.\n    /// @param _spender The `allowanceTarget` field from the API response.\n    /// @param _swapCallData The `data` field from the API response.\n    function fillQuote(address _sellToken, address _spender, bytes memory _swapCallData) public {\n        IERC20(_sellToken).approve(_spender, type(uint256).max);\n\n        // Call the encoded swap function call on the contract at `swapTarget`\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory data) = EXCHANGE_PROXY.call(_swapCallData);\n        if (!success) data.revertBytes(\"SWAP_CALL_FAILED\");\n\n        IERC20(_sellToken).approve(_spender, 0);\n    }\n}\n"
    },
    "contracts/mock/CurveReentrancyTest.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../priceProviders/curveLPTokens/peggedAssetsPools/CurveReentrancyCheck.sol\";\n\n// solhint-disable func-name-mixedcase\n// solhint-disable func-param-name-mixedcase\n// solhint-disable var-name-mixedcase\n\n// STETH pool interface with functions required for a test\ninterface ICurveSTETHPool {\n    function add_liquidity(uint256[2] calldata _amounts, uint256 min_mint_amount) external payable returns (uint256);\n\n    function remove_liquidity(\n        uint256 _amount,\n        uint256[2] calldata _amounts\n    )\n        external\n        payable\n        returns (uint256[2] memory);\n\n    function remove_liquidity_one_coin(uint256 _tokenAmount, int128 i, uint256 _minAmount) external;\n    function withdraw_admin_fees() external;\n}\n\ncontract CurveReentrancyTest {\n    CurveReentrancyCheck public provider;\n\n    IERC20 public token = IERC20(0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84); // stETH\n    ICurveSTETHPool public pool = ICurveSTETHPool(0xDC24316b9AE028F1497c275EB9192a3Ea0f67022); // ETH/stETH pool\n\n    error ExpectedToBeNotLockedButItIsLocked();\n\n    event PoolIsLockedOnReceive(bool status);\n\n    // Expect to be called while withdrawing liquidity from the stETH pool\n    receive() external payable {\n        bool poolIsLocked = provider.isLocked(address(pool));\n        emit PoolIsLockedOnReceive(poolIsLocked);\n    }\n\n    fallback() external payable {\n        revert(\"It should not execute in this test\");\n    }\n\n    /// @notice Execute a reentrancy test\n    function exec(address _provider, uint256 _amountToken) public payable {\n        provider = CurveReentrancyCheck(_provider);\n\n        // add liquidity\n        token.approve(address(pool), _amountToken);\n\n        uint[2] memory amounts = [msg.value, _amountToken];\n\n        uint256 lps = pool.add_liquidity{value : msg.value}(amounts, 0);\n\n        // remove liquidity\n\n        // view function test\n        bool poolIsLocked = CurveReentrancyCheck(_provider).isLocked(address(pool));\n\n        if (poolIsLocked) revert ExpectedToBeNotLockedButItIsLocked();\n\n        // execute function other than in the `isLocked` fn (`remove_liquidity`) but with the `lock`\n\n        uint256 lpsRedeem = lps * 10 / 100; // 10 % redeem\n\n        // expect a call on the ether transfer to the CurveReentrancyTest.receive() fn\n        pool.remove_liquidity_one_coin(lpsRedeem, 0, 0); // expect the pool is locked\n    }\n}\n\n// solhint-enable func-name-mixedcase\n// solhint-enable func-param-name-mixedcase\n// solhint-enable var-name-mixedcase\n"
    },
    "contracts/mock/Forwarder.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"../interfaces/IFlashLiquidationReceiver.sol\";\nimport \"../interfaces/ISilo.sol\";\nimport \"../interfaces/IShareToken.sol\";\n\n/// @dev this is MOCK contract - DO NOT USE IT!\ncontract Forwarder {\n    address public debtToken;\n\n    receive() external payable {\n        // we accept ETH so the liquidation callback works\n    }\n\n    function siloLiquidationCallback(\n        IFlashLiquidationReceiver _destination,\n        address _user,\n        address[] calldata _assets,\n        uint256[] calldata _receivedCollaterals,\n        uint256[] calldata _shareAmountsToRepaid,\n        bytes memory _flashReceiverData\n    ) external {\n        _destination.siloLiquidationCallback(\n            _user,\n            _assets,\n            _receivedCollaterals,\n            _shareAmountsToRepaid,\n            _flashReceiverData\n        );\n    }\n\n    function setDebtToken(address _debtToken) external {\n        debtToken = _debtToken;\n    }\n\n    function assetStorage(address) external view returns (ISilo.AssetStorage memory siloAssetStorage) {\n        siloAssetStorage.debtToken = IShareToken(debtToken);\n    }\n\n    function repayFor(address, address, uint256 _amount)\n        external\n        pure\n        returns (uint256 repaidAmount, uint256 burnedShare)\n    {\n        return (_amount, _amount);\n    }\n}\n"
    },
    "contracts/mock/ICurvePoolPeggedAssetsLike.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\ninterface ICurvePoolPeggedAssetsLike {\n  // solhint-disable func-name-mixedcase\n  // solhint-disable func-param-name-mixedcase\n  // solhint-disable var-name-mixedcase\n  function exchange(int128 _i, int128 _j, uint256 _dx, uint256 _min_dy) external;\n  function add_liquidity(uint256[2] memory _amounts, uint256 _min_mint_amount) external;\n  function get_virtual_price() external view returns (uint256);\n  function calc_withdraw_one_coin(uint256 _lpTokenAmount, int128 _coinIndex) external view returns (uint256);\n  // solhint-enable func-name-mixedcase\n  // solhint-enable func-param-name-mixedcase\n  // solhint-enable var-name-mixedcase\n}\n"
    },
    "contracts/mock/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/// @dev this is MOCK contract - DO NOT USE IT!\ncontract MockERC20 is ERC20 {\n    constructor() ERC20(\"mock ERC20\", \"mock ERC20\") {\n    }\n\n    function mint(address _holder, uint256 _amount) external {\n        _mint(_holder, _amount);\n    }\n\n    function burn(address _holder, uint256 amount) public {\n        _burn(_holder, amount);\n    }\n\n    /// @dev our goal is not test ERC20, so let's make our life a bit easier\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override {\n        if (from == address(0) || to == address(0)) return;\n\n        _approve(from, to, amount);\n    }\n\n}\n"
    },
    "contracts/mock/MockLiquidationHelper.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"../SiloLens.sol\";\nimport \"../interfaces/ISiloRepository.sol\";\n\n/// @dev this is MOCK contract - DO NOT USE IT!\ncontract MockLiquidationHelper is IFlashLiquidationReceiver {\n    struct SwapInput0x {\n        address sellToken;\n        address buyToken;\n        bytes swapCallData;\n    }\n\n    enum LiquidationScenario { Internal, Collateral0x, Full0x, Full0xWithChange }\n\n    ISiloRepository public immutable siloRepository;\n    SiloLens public immutable lens;\n\n    constructor (address _repository, address _lens) {\n        siloRepository = ISiloRepository(_repository);\n        lens = SiloLens(_lens);\n    }\n\n    function executeLiquidation(\n        address _user,\n        ISilo _silo,\n        LiquidationScenario _scenario,\n        SwapInput0x[] calldata _swapsInputs0x\n    ) external {\n        address[] memory users = new address[](1);\n        users[0] = _user;\n\n        _silo.flashLiquidate(users, abi.encode(0x0, _scenario, _swapsInputs0x));\n    }\n\n    /// @dev this is working example of how to perform liquidation, this method will be called by Silo\n    ///         Keep in mind, that this helper might NOT choose the best swap option.\n    ///         For best results (highest earnings) you probably want to implement your own callback and maybe use some\n    ///         dex aggregators.\n    function siloLiquidationCallback(\n        address _user,\n        address[] calldata _assets,\n        uint256[] calldata,\n        uint256[] calldata _shareAmountsToRepaid,\n        bytes memory\n    ) external override {\n        // repay\n        for (uint256 i = 0; i < _assets.length; i++) {\n            if (_shareAmountsToRepaid[i] == 0) continue;\n\n            ISilo(msg.sender).repayFor(_assets[i], _user, _shareAmountsToRepaid[i]);\n        }\n    }\n}\n"
    },
    "contracts/mock/MockPriceFetchersRepository.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"../PriceProvidersRepository.sol\";\nimport \"../interfaces/IPriceProvider.sol\";\n\n/// @dev this is MOCK contract - DO NOT USE IT!\ncontract MockPriceProvidersRepository is PriceProvidersRepository {\n    mapping(address => uint256) public prices;\n\n    constructor(address _quoteToken, address _factory) PriceProvidersRepository(_quoteToken, _factory) {\n    }\n\n    function setPriceProviderForAsset(address _asset, IPriceProvider _provider) external override {\n        require(\n            Ping.pong(_provider.priceProviderPing),\n                \"ProvidersRepository: not an provider\"\n        );\n\n        priceProviders[_asset] = _provider;\n    }\n\n    function setPrice(address _asset, uint256 _price) public {\n        prices[_asset] = _price;\n    }\n\n    function getPrice(address _asset) public view override returns (uint256) {\n        return prices[_asset];\n    }\n}\n"
    },
    "contracts/mock/PayableMagicianWrapperMock.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"../liquidation/magicians/interfaces/IMagician.sol\";\nimport \"../lib/RevertBytes.sol\";\n\ncontract PayableMagicianWrapperMock is IMagician {\n    using RevertBytes for bytes;\n\n    address public magician;\n\n    error EmptyAddress();\n\n    constructor(address _magician) {\n        if (_magician == address(0)) revert EmptyAddress();\n\n        magician = _magician;\n    }\n\n    receive() external payable {\n        // we accept ETH for `towardsNative` function that may convert an `_asset` into ETH\n    }\n\n    /// @inheritdoc IMagician\n    function towardsNative(address _asset, uint256 _amount) external returns (address tokenOut, uint256 amountOut) {\n        bytes memory result = _sefeDelegateCall(\n            magician,\n            abi.encodeCall(IMagician.towardsNative, (_asset, _amount)),\n            \"towardsNativeFailed\"\n        );\n\n        (tokenOut, amountOut) = abi.decode(result, (address, uint256));\n    }\n\n    /// @inheritdoc IMagician\n    function towardsAsset(address _asset, uint256 _amount) external returns (address tokenOut, uint256 amountOut) {\n        bytes memory result = _sefeDelegateCall(\n            magician,\n            abi.encodeCall(IMagician.towardsAsset, (_asset, _amount)),\n            \"towardsAssetFailed\"\n        );\n\n        (tokenOut, amountOut) = abi.decode(result, (address, uint256));\n    }\n\n    function _sefeDelegateCall(\n        address _target,\n        bytes memory _callData,\n        string memory _mgs\n    )\n        internal\n        returns (bytes memory data)\n    {\n        bool success;\n        // solhint-disable-next-line avoid-low-level-calls\n        (success, data) = address(_target).delegatecall(_callData);\n        if (!success || data.length == 0) data.revertBytes(_mgs);\n    }\n}\n"
    },
    "contracts/mock/SimpleLiquidator.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"../interfaces/ISilo.sol\";\n\ncontract SimpleLiquidator {\n    error LiquidationAmountTooSmall(uint256);\n\n    function executeLiquidation(address _user, ISilo _silo) external {\n        address[] memory users = new address[](1);\n        users[0] = _user;\n        _silo.flashLiquidate(users, \"\");\n    }\n\n    function siloLiquidationCallback(\n        address _user,\n        address[] calldata _assets,\n        uint256[] calldata /* _receivedCollaterals */,\n        uint256[] calldata _shareAmountsToRepay,\n        bytes memory /* _flashReceiverData */\n    ) external {\n        ISilo silo = ISilo(msg.sender);\n\n        for (uint256 i = 0; i < _assets.length; i++) {\n            if (_shareAmountsToRepay[i] == 0) continue;\n\n            IERC20 asset = IERC20(_assets[i]);\n            uint256 amount = _shareAmountsToRepay[i];\n\n            // solhint-disable-next-line\n            try asset.transferFrom(tx.origin, address(this), amount) {\n            } catch {\n                revert LiquidationAmountTooSmall(amount);\n            }\n\n            asset.approve(address(silo), amount);\n            silo.repayFor(_assets[i], _user, amount);\n        }\n    }\n}\n"
    },
    "contracts/mock/SwapRouterMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\ncontract SwapRouterMock {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut) {}\n}\n"
    },
    "contracts/mock/TestEasyMath.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"../lib/EasyMathV2.sol\";\n\n/// @dev this is MOCK contract - DO NOT USE IT!\ncontract TestEasyMath {\n    function toShare(uint256 amount, uint256 totalAmount, uint256 totalShares) external pure returns (uint256) {\n        return EasyMathV2.toShare(amount, totalAmount, totalShares);\n    }\n\n    function toShareRoundUp(uint256 amount, uint256 totalAmount, uint256 totalShares) external pure returns (uint256) {\n        return EasyMathV2.toShareRoundUp(amount, totalAmount, totalShares);\n    }\n\n    function toAmount(uint256 share, uint256 totalAmount, uint256 totalShares) external pure returns (uint256) {\n        return EasyMathV2.toAmount(share, totalAmount, totalShares);\n    }\n\n    function toAmountRoundUp(uint256 share, uint256 totalAmount, uint256 totalShares) external pure returns (uint256) {\n        return EasyMathV2.toAmountRoundUp(share, totalAmount, totalShares);\n    }\n}\n"
    },
    "contracts/mock/TestTokenHelper.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"../lib/TokenHelper.sol\";\n\ninterface ERC20Bytes32Symbol {\n    function symbol() external view returns(bytes32);\n}\n\n/// @dev this is MOCK contract - DO NOT USE IT!\ncontract TestTokenHelper {\n    function symbol(address _token) external view returns (string memory) {\n        return TokenHelper.symbol(_token);\n    }\n}\n"
    },
    "contracts/mock/UniswapV3SwapTester.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../lib/RevertBytes.sol\";\nimport \"../interfaces/ISwapper.sol\";\n\n/// @dev it imitates how `LiquidationHelper` uses Swapper\ncontract UniswapV3SwapTester {\n    using RevertBytes for bytes;\n\n    bytes4 constant private _SWAP_AMOUNT_IN_SELECTOR =\n        bytes4(keccak256(\"swapAmountIn(address,address,uint256,address,address)\"));\n\n    bytes4 constant private _SWAP_AMOUNT_OUT_SELECTOR =\n        bytes4(keccak256(\"swapAmountOut(address,address,uint256,address,address)\"));\n\n    IERC20 public immutable quoteToken;\n\n    constructor (IERC20 _quoteToken) {\n        quoteToken = _quoteToken;\n    }\n\n    /// @param _tokenIn for UniswapV3SwapV2 can be address(0) because it is not in use\n    /// @param _tokenOut for UniswapV3SwapV2 can be address(0) because it is not in use\n    function swapForQuote(\n        address _tokenIn,\n        address _tokenOut,\n        address _asset,\n        uint256 _amount,\n        ISwapper _swapper,\n        address _priceProvider\n    )\n        external\n        returns (uint256)\n    {\n        if (_amount == 0 || _asset == address(quoteToken)) revert (\"invalid test case\");\n\n        bytes memory callData = abi.encodeWithSelector(\n            _SWAP_AMOUNT_IN_SELECTOR,\n            _tokenIn,\n            _tokenOut,\n            _amount,\n            _priceProvider,\n            _asset\n        );\n\n        // no need for safe approval, because we always using 100%\n        IERC20(_asset).approve(_swapper.spenderToApprove(), _amount);\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory data) = address(_swapper).delegatecall(callData);\n        if (!success) data.revertBytes(\"swapForQuoteFailed\");\n\n        return abi.decode(data, (uint256));\n    }\n\n    /// @param _tokenIn for UniswapV3SwapV2 can be address(0) because it is not in use\n    /// @param _tokenOut for UniswapV3SwapV2 can be address(0) because it is not in use\n    function swapForAsset(\n        address _tokenIn,\n        address _tokenOut,\n        address _asset,\n        uint256 _amountOut,\n        ISwapper _swapper,\n        address _priceProvider\n    )\n        external\n        returns (uint256)\n    {\n        if (_amountOut == 0 || address(quoteToken) == _asset) revert (\"invalid test case\");\n\n        bytes memory callData = abi.encodeWithSelector(\n            _SWAP_AMOUNT_OUT_SELECTOR,\n            _tokenIn,\n            _tokenOut,\n            _amountOut,\n            _priceProvider,\n            _asset\n        );\n\n        address spender = _swapper.spenderToApprove();\n        IERC20(quoteToken).approve(spender, type(uint256).max);\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory data) = address(_swapper).delegatecall(callData);\n        if (!success) data.revertBytes(\"swapForAssetFailed\");\n\n        return abi.decode(data, (uint256));\n    }\n}\n"
    },
    "contracts/priceProviders/_common/PriceProviderPing.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"../../interfaces/IPriceProvider.sol\";\n\n/// @title Price Provider ping feature\nabstract contract PriceProviderPing is IPriceProvider {\n    /// @inheritdoc IPriceProvider\n    function priceProviderPing() external pure returns (bytes4) {\n        return this.priceProviderPing.selector;\n    }\n}\n"
    },
    "contracts/priceProviders/_common/PriceProvidersRepositoryManager.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"../../lib/Ping.sol\";\nimport \"../../interfaces/IPriceProvidersRepository.sol\";\n\n/// @title Price Providers Repository manager\nabstract contract PriceProvidersRepositoryManager  {\n    /// @dev Price Providers Repository\n    IPriceProvidersRepository internal immutable _priceProvidersRepository;\n\n    /// @dev Revert if `msg.sender` is not Price Providers Repository manager\n    error OnlyManager();\n    /// @dev Revert on a false sanity check with `Ping` library\n    error InvalidPriceProviderRepository();\n\n    /// @dev Permissions verification modifier.\n    /// Functions execution with this modifier will be allowed only for the Price Providers Repository manager\n    modifier onlyManager() {\n        if (_priceProvidersRepository.manager() != msg.sender) revert OnlyManager();\n        _;\n    }\n\n    /// @param _repository address of the Price Providers Repository\n    constructor(IPriceProvidersRepository _repository) {\n        if (!Ping.pong(_repository.priceProvidersRepositoryPing)) {\n            revert InvalidPriceProviderRepository();\n        }\n\n        _priceProvidersRepository = _repository;\n    }\n}\n"
    },
    "contracts/priceProviders/_common/PriceProvidersRepositoryQuoteToken.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"./PriceProvidersRepositoryManager.sol\";\nimport \"../../interfaces/IPriceProvider.sol\";\n\n/// @title Price providers repository quote token\nabstract contract PriceProvidersRepositoryQuoteToken is PriceProvidersRepositoryManager, IPriceProvider {\n    /// @inheritdoc IPriceProvider\n    function quoteToken() external view returns (address) {\n        return _priceProvidersRepository.quoteToken();\n    }\n}\n"
    },
    "contracts/priceProviders/chainlinkV3/ChainlinkV3PriceProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nimport \"../PriceProvider.sol\";\nimport \"../IERC20LikeV2.sol\";\n\ncontract ChainlinkV3PriceProvider is PriceProvider {\n    using SafeMath for uint256;\n\n    struct AssetData {\n        // Time threshold to invalidate stale prices\n        uint256 heartbeat;\n        // If true, we bypass the aggregator and consult the fallback provider directly\n        bool forceFallback;\n        // If true, the aggregator returns price in USD, so we need to convert to QUOTE\n        bool convertToQuote;\n        // Chainlink aggregator proxy\n        AggregatorV3Interface aggregator;\n        // Provider used if the aggregator's price is invalid or if it became disabled\n        IPriceProvider fallbackProvider;\n    }\n\n    /// @dev Aggregator that converts from USD to quote token\n    AggregatorV3Interface internal immutable _QUOTE_AGGREGATOR; // solhint-disable-line var-name-mixedcase\n\n    /// @dev Decimals used by the _QUOTE_AGGREGATOR\n    uint8 internal immutable _QUOTE_AGGREGATOR_DECIMALS; // solhint-disable-line var-name-mixedcase\n\n    /// @dev Used to optimize calculations in emergency disable function\n    // solhint-disable-next-line var-name-mixedcase\n    uint256 internal immutable _MAX_PRICE_DIFF = type(uint256).max / (100 * EMERGENCY_PRECISION);\n    \n    // @dev Precision to use for the EMERGENCY_THRESHOLD\n    uint256 public constant EMERGENCY_PRECISION = 1e6;\n\n    /// @dev Disable the aggregator if the difference with the fallback is higher than this percentage (10%)\n    uint256 public constant EMERGENCY_THRESHOLD = 10 * EMERGENCY_PRECISION; // solhint-disable-line var-name-mixedcase\n\n    /// @dev this is basically `PriceProvider.quoteToken.decimals()`\n    uint8 internal immutable _QUOTE_TOKEN_DECIMALS; // solhint-disable-line var-name-mixedcase\n\n    /// @dev Address allowed to call the emergencyDisable function, can be set by the owner\n    address public emergencyManager;\n\n    /// @dev Threshold used to determine if the price returned by the _QUOTE_AGGREGATOR is valid\n    uint256 public quoteAggregatorHeartbeat;\n\n    /// @dev Data used for each asset\n    mapping(address => AssetData) public assetData;\n\n    event NewAggregator(address indexed asset, AggregatorV3Interface indexed aggregator, bool convertToQuote);\n    event NewFallbackPriceProvider(address indexed asset, IPriceProvider indexed fallbackProvider);\n    event NewHeartbeat(address indexed asset, uint256 heartbeat);\n    event NewQuoteAggregatorHeartbeat(uint256 heartbeat);\n    event NewEmergencyManager(address indexed emergencyManager);\n    event AggregatorDisabled(address indexed asset, AggregatorV3Interface indexed aggregator);\n\n    error AggregatorDidNotChange();\n    error AggregatorPriceNotAvailable();\n    error AssetNotSupported();\n    error EmergencyManagerDidNotChange();\n    error EmergencyThresholdNotReached();\n    error FallbackProviderAlreadySet();\n    error FallbackProviderDidNotChange();\n    error FallbackProviderNotSet();\n    error HeartbeatDidNotChange();\n    error InvalidAggregator();\n    error InvalidAggregatorDecimals();\n    error InvalidFallbackPriceProvider();\n    error InvalidHeartbeat();\n    error OnlyEmergencyManager();\n    error QuoteAggregatorHeartbeatDidNotChange();\n\n    modifier onlyAssetSupported(address _asset) {\n        if (!assetSupported(_asset)) {\n            revert AssetNotSupported();\n        }\n\n        _;\n    }\n\n    constructor(\n        IPriceProvidersRepository _priceProvidersRepository,\n        address _emergencyManager,\n        AggregatorV3Interface _quoteAggregator,\n        uint256 _quoteAggregatorHeartbeat\n    ) PriceProvider(_priceProvidersRepository) {\n        _setEmergencyManager(_emergencyManager);\n        _QUOTE_TOKEN_DECIMALS = IERC20LikeV2(quoteToken).decimals();\n        _QUOTE_AGGREGATOR = _quoteAggregator;\n        _QUOTE_AGGREGATOR_DECIMALS = _quoteAggregator.decimals();\n        quoteAggregatorHeartbeat = _quoteAggregatorHeartbeat;\n    }\n\n    /// @inheritdoc IPriceProvider\n    function assetSupported(address _asset) public view virtual override returns (bool) {\n        AssetData storage data = assetData[_asset];\n\n        // Asset is supported if:\n        //     - the asset is the quote token\n        //       OR\n        //     - the aggregator address is defined AND\n        //         - the aggregator is not disabled\n        //           OR\n        //         - the fallback is defined\n\n        if (_asset == quoteToken) {\n            return true;\n        }\n\n        if (address(data.aggregator) != address(0)) {\n            return !data.forceFallback || address(data.fallbackProvider) != address(0);\n        }\n\n        return false;\n    }\n\n    /// @dev Returns price directly from aggregator using all internal settings except of fallback provider\n    /// @param _asset Asset for which we want to get the price\n    function getAggregatorPrice(address _asset) public view virtual returns (bool success, uint256 price) {\n        (success, price) = _getAggregatorPrice(_asset);\n    }\n    \n    /// @inheritdoc IPriceProvider\n    function getPrice(address _asset) public view virtual override returns (uint256) {\n        address quote = quoteToken;\n\n        if (_asset == quote) {\n            return 10 ** _QUOTE_TOKEN_DECIMALS;\n        }\n\n        (bool success, uint256 price) = _getAggregatorPrice(_asset);\n\n        return success ? price : _getFallbackPrice(_asset);\n    }\n\n    /// @dev Sets the aggregator, fallbackProvider and heartbeat for an asset. Can only be called by the manager.\n    /// @param _asset Asset to setup\n    /// @param _aggregator Chainlink aggregator proxy\n    /// @param _fallbackProvider Provider to use if the price is invalid or if the aggregator was disabled\n    /// @param _heartbeat Threshold in seconds to invalidate a stale price\n    function setupAsset(\n        address _asset,\n        AggregatorV3Interface _aggregator,\n        IPriceProvider _fallbackProvider,\n        uint256 _heartbeat,\n        bool _convertToQuote\n    ) external virtual onlyManager {\n        // This has to be done first so that `_setAggregator` works\n        _setHeartbeat(_asset, _heartbeat);\n\n        if (!_setAggregator(_asset, _aggregator, _convertToQuote)) revert AggregatorDidNotChange();\n\n        // We don't care if this doesn't change\n        _setFallbackPriceProvider(_asset, _fallbackProvider);\n    }\n\n    /// @dev Sets the aggregator for an asset. Can only be called by the manager.\n    /// @param _asset Asset for which to set the aggregator\n    /// @param _aggregator Aggregator to set\n    function setAggregator(address _asset, AggregatorV3Interface _aggregator, bool _convertToQuote)\n        external\n        virtual\n        onlyManager\n        onlyAssetSupported(_asset)\n    {\n        if (!_setAggregator(_asset, _aggregator, _convertToQuote)) revert AggregatorDidNotChange();\n    }\n\n    /// @dev Sets the fallback provider for an asset. Can only be called by the manager.\n    /// @param _asset Asset for which to set the fallback provider\n    /// @param _fallbackProvider Provider to set\n    function setFallbackPriceProvider(address _asset, IPriceProvider _fallbackProvider)\n        external\n        virtual\n        onlyManager\n        onlyAssetSupported(_asset)\n    {\n        if (!_setFallbackPriceProvider(_asset, _fallbackProvider)) {\n            revert FallbackProviderDidNotChange();\n        }\n    }\n\n    /// @dev Sets the heartbeat threshold for an asset. Can only be called by the manager.\n    /// @param _asset Asset for which to set the heartbeat threshold\n    /// @param _heartbeat Threshold to set\n    function setHeartbeat(address _asset, uint256 _heartbeat)\n        external\n        virtual\n        onlyManager\n        onlyAssetSupported(_asset)\n    {\n        if (!_setHeartbeat(_asset, _heartbeat)) revert HeartbeatDidNotChange();\n    }\n\n    /// @dev Sets the quote aggregator heartbeat threshold. Can only be called by the manager.\n    /// @param _heartbeat Threshold to set\n    function setQuoteAggregatorHeartbeat(uint256 _heartbeat)\n        external\n        virtual\n        onlyManager\n    {\n        if (!_setQuoteAggregatorHeartbeat(_heartbeat)) revert QuoteAggregatorHeartbeatDidNotChange();\n    }\n\n    /// @dev Sets the emergencyManager. Can only be called by the manager.\n    /// @param _emergencyManager Emergency manager to set\n    function setEmergencyManager(address _emergencyManager) external virtual onlyManager {\n        if (!_setEmergencyManager(_emergencyManager)) revert EmergencyManagerDidNotChange();\n    }\n\n    /// @dev Disables the aggregator for an asset if there is a big discrepancy between the aggregator and the\n    /// fallback provider. The only way to reenable the asset is by calling setupAsset or setAggregator again.\n    /// Can only be called by the emergencyManager.\n    /// @param _asset Asset for which to disable the aggregator\n    function emergencyDisable(address _asset) external virtual {\n        if (msg.sender != emergencyManager) {\n            revert OnlyEmergencyManager();\n        }\n\n        (bool success, uint256 price) = _getAggregatorPrice(_asset);\n\n        if (!success) {\n            revert AggregatorPriceNotAvailable();\n        }\n\n        uint256 fallbackPrice = _getFallbackPrice(_asset);\n\n        uint256 diff;\n\n        unchecked {\n            // It is ok to uncheck because of the initial fallbackPrice >= price check\n            diff = fallbackPrice >= price ? fallbackPrice - price : price - fallbackPrice;\n        }\n\n        if (diff > _MAX_PRICE_DIFF || (diff * 100 * EMERGENCY_PRECISION) / price < EMERGENCY_THRESHOLD) {\n            revert EmergencyThresholdNotReached();\n        }\n\n        // Disable main aggregator, fallback stays enabled\n        assetData[_asset].forceFallback = true;\n\n        emit AggregatorDisabled(_asset, assetData[_asset].aggregator);\n    }\n\n    function getFallbackProvider(address _asset) external view virtual returns (IPriceProvider) {\n        return assetData[_asset].fallbackProvider;\n    }\n\n    function _getAggregatorPrice(address _asset) internal view virtual returns (bool success, uint256 price) {\n        AssetData storage data = assetData[_asset];\n\n        uint256 heartbeat = data.heartbeat;\n        bool forceFallback = data.forceFallback;\n        AggregatorV3Interface aggregator = data.aggregator;\n\n        if (address(aggregator) == address(0)) revert AssetNotSupported();\n\n        (\n            /*uint80 roundID*/,\n            int256 aggregatorPrice,\n            /*uint256 startedAt*/,\n            uint256 timestamp,\n            /*uint80 answeredInRound*/\n        ) = aggregator.latestRoundData();\n\n        // If a valid price is returned and it was updated recently\n        if (!forceFallback && _isValidPrice(aggregatorPrice, timestamp, heartbeat)) {\n            uint256 result;\n\n            if (data.convertToQuote) {\n                // _toQuote performs decimal normalization internally\n                result = _toQuote(uint256(aggregatorPrice));\n            } else {\n                uint8 aggregatorDecimals = aggregator.decimals();\n                result = _normalizeWithDecimals(uint256(aggregatorPrice), aggregatorDecimals);\n            }\n\n            return (true, result);\n        }\n\n        return (false, 0);\n    }\n\n    function _getFallbackPrice(address _asset) internal view virtual returns (uint256) {\n        IPriceProvider fallbackProvider = assetData[_asset].fallbackProvider;\n\n        if (address(fallbackProvider) == address(0)) revert FallbackProviderNotSet();\n\n        return fallbackProvider.getPrice(_asset);\n    }\n\n    function _setEmergencyManager(address _emergencyManager) internal virtual returns (bool changed) {\n        if (_emergencyManager == emergencyManager) {\n            return false;\n        }\n\n        emergencyManager = _emergencyManager;\n\n        emit NewEmergencyManager(_emergencyManager);\n\n        return true;\n    }\n\n    function _setAggregator(\n        address _asset,\n        AggregatorV3Interface _aggregator,\n        bool _convertToQuote\n    ) internal virtual returns (bool changed) {\n        if (address(_aggregator) == address(0)) revert InvalidAggregator();\n\n        AssetData storage data = assetData[_asset];\n\n        if (data.aggregator == _aggregator && data.forceFallback == false) {\n            return false;\n        }\n\n        // There doesn't seem to be a way to verify if this is a \"valid\" aggregator (other than getting the price)\n        data.forceFallback = false;\n        data.aggregator = _aggregator;\n\n        (bool success,) = _getAggregatorPrice(_asset);\n\n        if (!success) revert AggregatorPriceNotAvailable();\n\n        if (_convertToQuote && _aggregator.decimals() != _QUOTE_AGGREGATOR_DECIMALS) {\n            revert InvalidAggregatorDecimals();\n        }\n\n        // We want to always update this\n        assetData[_asset].convertToQuote = _convertToQuote;\n\n        emit NewAggregator(_asset, _aggregator, _convertToQuote);\n\n        return true;\n    }\n\n    function _setFallbackPriceProvider(address _asset, IPriceProvider _fallbackProvider)\n        internal\n        virtual\n        returns (bool changed)\n    {\n        if (_fallbackProvider == assetData[_asset].fallbackProvider) {\n            return false;\n        }\n\n        assetData[_asset].fallbackProvider = _fallbackProvider;\n\n        if (address(_fallbackProvider) != address(0)) {\n            if (\n                !priceProvidersRepository.isPriceProvider(_fallbackProvider) ||\n                !_fallbackProvider.assetSupported(_asset) ||\n                _fallbackProvider.quoteToken() != quoteToken\n            ) {\n                revert InvalidFallbackPriceProvider();\n            }\n\n            // Make sure it doesn't revert\n            _getFallbackPrice(_asset);\n        }\n\n        emit NewFallbackPriceProvider(_asset, _fallbackProvider);\n\n        return true;\n    }\n\n    function _setHeartbeat(address _asset, uint256 _heartbeat) internal virtual returns (bool changed) {\n        // Arbitrary limit, Chainlink's threshold is always less than a day\n        if (_heartbeat > 2 days) revert InvalidHeartbeat();\n\n        if (_heartbeat == assetData[_asset].heartbeat) {\n            return false;\n        }\n\n        assetData[_asset].heartbeat = _heartbeat;\n\n        emit NewHeartbeat(_asset, _heartbeat);\n\n        return true;\n    }\n\n    function _setQuoteAggregatorHeartbeat(uint256 _heartbeat) internal virtual returns (bool changed) {\n        // Arbitrary limit, Chainlink's threshold is always less than a day\n        if (_heartbeat > 2 days) revert InvalidHeartbeat();\n\n        if (_heartbeat == quoteAggregatorHeartbeat) {\n            return false;\n        }\n\n        quoteAggregatorHeartbeat = _heartbeat;\n\n        emit NewQuoteAggregatorHeartbeat(_heartbeat);\n\n        return true;\n    }\n\n    /// @dev Adjusts the given price to use the same decimals as the quote token.\n    /// @param _price Price to adjust decimals\n    /// @param _decimals Decimals considered in `_price`\n    function _normalizeWithDecimals(uint256 _price, uint8 _decimals) internal view virtual returns (uint256) {\n        // We want to return the price of 1 asset token, but with the decimals of the quote token\n        if (_QUOTE_TOKEN_DECIMALS == _decimals) {\n            return _price;\n        } else if (_QUOTE_TOKEN_DECIMALS < _decimals) {\n            return _price / 10 ** (_decimals - _QUOTE_TOKEN_DECIMALS);\n        } else {\n            return _price * 10 ** (_QUOTE_TOKEN_DECIMALS - _decimals);\n        }\n    }\n\n    /// @dev Converts a price returned by an aggregator to quote units\n    function _toQuote(uint256 _price) internal view virtual returns (uint256) {\n       (\n            /*uint80 roundID*/,\n            int256 aggregatorPrice,\n            /*uint256 startedAt*/,\n            uint256 timestamp,\n            /*uint80 answeredInRound*/\n        ) = _QUOTE_AGGREGATOR.latestRoundData();\n\n        // If an invalid price is returned\n        if (!_isValidPrice(aggregatorPrice, timestamp, quoteAggregatorHeartbeat)) {\n            revert AggregatorPriceNotAvailable();\n        }\n\n        // _price and aggregatorPrice should both have the same decimals so we normalize here\n        return _price * 10 ** _QUOTE_TOKEN_DECIMALS / uint256(aggregatorPrice);\n    }\n\n    function _isValidPrice(int256 _price, uint256 _timestamp, uint256 _heartbeat) internal view virtual returns (bool) {\n        return _price > 0 && block.timestamp - _timestamp < _heartbeat;\n    }\n}\n"
    },
    "contracts/priceProviders/chainlinkV3/ChainlinkV3PriceProviderWithLiquidation.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./ChainlinkV3PriceProvider.sol\";\nimport \"../../interfaces/IPriceProviderV2.sol\";\n\ncontract ChainlinkV3PriceProviderWithLiquidation is IPriceProviderV2, ChainlinkV3PriceProvider {\n\n    error PriceError();\n    error NotSupported();\n\n    constructor(\n        IPriceProvidersRepository _priceProvidersRepository,\n        address _emergencyManager,\n        AggregatorV3Interface _quoteAggregator,\n        uint256 _quoteAggregatorHeartbeat\n    ) ChainlinkV3PriceProvider(\n        _priceProvidersRepository,\n        _emergencyManager,\n        _quoteAggregator,\n        _quoteAggregatorHeartbeat)\n    {\n    }\n\n    /// @inheritdoc IPriceProviderV2\n    function getFallbackProvider(address _asset)\n        external\n        view\n        virtual\n        override(ChainlinkV3PriceProvider, IPriceProviderV2) returns (IPriceProvider)\n    {\n        return assetData[_asset].fallbackProvider;\n    }\n\n    /// @inheritdoc IPriceProviderV2\n    function offChainProvider() external pure virtual returns (bool) {\n        return true;\n    }\n\n    /// @inheritdoc IPriceProvider\n    function assetSupported(address _asset)\n        public\n        view\n        virtual\n        override(ChainlinkV3PriceProvider, IPriceProvider)\n        returns (bool)\n    {\n        AssetData storage data = assetData[_asset];\n\n        // Asset is supported if:\n        //     - the asset is the quote token\n        //       OR\n        //     - the aggregator address is defined AND\n\n        if (_asset == quoteToken) {\n            return true;\n        }\n\n        return address(data.aggregator) != address(0);\n    }\n\n    /// @inheritdoc IPriceProvider\n    function getPrice(address _asset)\n        public\n        view\n        virtual\n        override(ChainlinkV3PriceProvider, IPriceProvider)\n        returns (uint256)\n    {\n        address quote = quoteToken;\n\n        if (_asset == quote) {\n            return 10 ** _QUOTE_TOKEN_DECIMALS;\n        }\n\n        (bool success, uint256 price) = _getAggregatorPrice(_asset);\n        if (!success) revert PriceError();\n\n        return price;\n    }\n\n    function _getFallbackPrice(address) internal view virtual override returns (uint256) {\n        revert NotSupported();\n    }\n\n    function _setFallbackPriceProvider(address _asset, IPriceProvider _fallbackProvider)\n        internal\n        virtual\n        override\n        returns (bool changed)\n    {\n        if (_fallbackProvider == assetData[_asset].fallbackProvider) {\n            return false;\n        }\n\n        assetData[_asset].fallbackProvider = _fallbackProvider;\n\n        if (address(_fallbackProvider) != address(0)) {\n            if (\n                !priceProvidersRepository.isPriceProvider(_fallbackProvider) ||\n                !_fallbackProvider.assetSupported(_asset) ||\n                _fallbackProvider.quoteToken() != quoteToken\n            ) {\n                revert InvalidFallbackPriceProvider();\n            }\n\n            // NOT doing sanity check on price, because it is only for liquidation\n            // _getFallbackPrice(_asset);\n        }\n\n        emit NewFallbackPriceProvider(_asset, _fallbackProvider);\n\n        return true;\n    }\n}\n"
    },
    "contracts/priceProviders/chainlinkV3/ChainlinkV3ReverseAggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\ncontract ChainlinkV3ReverseAggregator is AggregatorV3Interface {\n    // solhint-disable-next-line var-name-mixedcase\n    AggregatorV3Interface private immutable _AGGREGATOR;\n    // solhint-disable-next-line var-name-mixedcase\n    uint256 private immutable _PRICE_NUMERATOR;\n\n    uint8 public immutable decimals;\n\n    constructor(AggregatorV3Interface _aggregator) {\n        _AGGREGATOR = _aggregator;\n        decimals = _aggregator.decimals();\n        _PRICE_NUMERATOR = 10 ** (uint256(decimals) * 2);\n    }\n\n\n    function description() external view returns (string memory) {\n        return _AGGREGATOR.description();\n    }\n\n    function version() external view returns (uint256) {\n        return _AGGREGATOR.version();\n    }\n\n    function getRoundData(uint80 _roundId)\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        )\n    {\n        (roundId, answer, startedAt, updatedAt, answeredInRound) = _AGGREGATOR.getRoundData(_roundId);\n        answer = _reverse(answer);\n    }\n\n    function latestRoundData()\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        )\n    {\n        (roundId, answer, startedAt, updatedAt, answeredInRound) = _AGGREGATOR.latestRoundData();\n        answer = _reverse(answer);\n    }\n\n    function _reverse(int256 price) private view returns(int256) {\n        if (price <= 0) {\n            return 0;\n        }\n\n        // We return the inverse price, with same precision as current price\n        return int256(_PRICE_NUMERATOR / uint256(price));\n    }\n}\n"
    },
    "contracts/priceProviders/crvUSD/CrvUSDPriceProvider.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"../IndividualPriceProvider.sol\";\n\ninterface ICrvUSDPoolWithOracleLike {\n    // solhint-disable-next-line\n    function price_oracle() external view returns (uint256);\n}\n\n/// @title CrvUSDPriceProvider\nabstract contract CrvUSDPriceProvider is IndividualPriceProvider {\n    // solhint-disable-next-line var-name-mixedcase\n    ICrvUSDPoolWithOracleLike public immutable POOL;\n    /// @dev The asset in which the price is denominated.\n    /// For the pool crvUSD/USDC it should be USDC\n    address public immutable BASE_POOL_ASSET; // solhint-disable-line var-name-mixedcase\n\n    error InvalidPool();\n    error AssetNotSupported();\n    error ZeroPrice();\n\n    constructor(\n        IPriceProvidersRepository _priceProvidersRepository,\n        address _crvUsdToken,\n        address _basePoolAsset,\n        address _pool\n    ) IndividualPriceProvider(_priceProvidersRepository, _crvUsdToken, \"crvUSD\") {\n        BASE_POOL_ASSET = _basePoolAsset;\n        POOL = ICrvUSDPoolWithOracleLike(_pool);\n\n        // Sanity check. Should revert if the `_pool` address is invalid\n        if (POOL.price_oracle() == 0) revert InvalidPool();\n    }\n\n    /// @inheritdoc IPriceProvider\n    function getPrice(address _asset) external view virtual override returns (uint256 price) {\n        if (!assetSupported(_asset)) revert AssetNotSupported();\n\n        uint256 priceInBaseAsset = POOL.price_oracle();\n        uint256 baseAssetInWeth = priceProvidersRepository.getPrice(BASE_POOL_ASSET);\n\n        // convert price\n        price = priceInBaseAsset * baseAssetInWeth;\n        // the division will be fine, otherwise we will revert with a `0` price\n        unchecked { price = price / 1e18; }\n\n        // Zero price is unacceptable\n        if (price == 0) revert ZeroPrice();\n    }\n}\n"
    },
    "contracts/priceProviders/crvUSD/CrvUSDViaUSDCPriceProviderETHV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./CrvUSDPriceProvider.sol\";\n\n/// @dev crvUSD price provider that resolves a price via crvUSD/USDC pool\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\ncontract CrvUSDViaUSDCPriceProviderETHV2 is CrvUSDPriceProvider {\n    constructor(IPriceProvidersRepository _priceProvidersRepository) CrvUSDPriceProvider(\n        _priceProvidersRepository,\n        0xf939E0A03FB07F59A73314E73794Be0E57ac1b4E, // CRV_USD\n        0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48, // USDC\n        0x4DEcE678ceceb27446b35C672dC7d61F30bAD69E  // CRV_USD_USDC_POOL\n    ) {}\n}\n"
    },
    "contracts/priceProviders/curveLPTokens/_common/CurveLPTokenDetailsBaseCache.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"../../../lib/Ping.sol\";\nimport \"../../_common/PriceProvidersRepositoryManager.sol\";\nimport \"../../../interfaces/IPriceProvider.sol\";\nimport \"../interfaces/ICurveRegistryLike.sol\";\nimport \"../interfaces/ICurveLPTokensDetailsFetchersRepository.sol\";\nimport \"./CurveLPTokensDataTypes.sol\";\n\nabstract contract CurveLPTokenDetailsBaseCache {\n    /// @notice Curve LP Tokens details fetchers repository\n    // solhint-disable-next-line var-name-mixedcase\n    ICurveLPTokensDetailsFetchersRepository internal immutable _FETCHERS_REPO;\n    /// @notice A null address that the Curve pool use to describe ether coin\n    // solhint-disable-next-line var-name-mixedcase\n    address internal immutable _NULL_ADDRESS;\n    /// @notice wETH address\n    // solhint-disable-next-line var-name-mixedcase\n    address internal immutable _NATIVE_WRAPPED_ADDRESS;\n    /// @notice Minimal number of coins in the valid pool\n    uint8 internal constant _MIN_COINS = 2;\n\n    /// @dev LP Token address => pool coins\n    mapping(address => PoolCoin[]) public coins;\n    /// @dev LP Token address => pool details\n    mapping(address => Pool) public lpTokenPool;\n\n    /// Revert if this price provider does not support an asset\n    error NotSupported();\n    /// Revert on a false sanity check with `Ping` library\n    error InvalidFetchersRepository();\n    /// Revert if a pool is not found for provided Curve LP Token\n    error PoolForLPTokenNotFound();\n    /// Revert if a number of coins in the initialized pool < `_MIN_COINS`\n    error InvalidNumberOfCoinsInPool();\n    /// Revert if Curve LP Token is already initialized in the price provider\n    error TokenAlreadyInitialized();\n    /// Revert if wETH address is empty\n    error EmptyWETHAddress();\n    /// @dev Revert if a `getPrice` function ended-up with a zero price\n    error ZeroPrice();\n\n    /// @param _repository Curve LP Tokens details fetchers repository\n    /// @param _nullAddr Null address that Curve use for a native token\n    /// @param _nativeWrappedAddr Address of the wrapped native token\n    constructor(\n        ICurveLPTokensDetailsFetchersRepository _repository,\n        address _nullAddr,\n        address _nativeWrappedAddr\n    ) {\n        if (address(_nativeWrappedAddr) == address(0)) revert EmptyWETHAddress();\n\n        if (!Ping.pong(_repository.curveLPTokensFetchersRepositoryPing)) {\n            revert InvalidFetchersRepository();\n        }\n\n        _FETCHERS_REPO = _repository;\n        _NULL_ADDRESS = _nullAddr;\n        _NATIVE_WRAPPED_ADDRESS = _nativeWrappedAddr;\n    }\n}\n"
    },
    "contracts/priceProviders/curveLPTokens/_common/CurveLPTokensDataTypes.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\n/// @dev Identifiers of the Curve protocol components in the Curve address provider\nenum RegistryId {\n    MAIN_REGISTRY_0,\n    POOL_INFO_GETTER_1,\n    EXCHANGES_2,\n    META_POOL_FACTORY_3,\n    FEE_DISTRIBUTOR_4,\n    CRYPTO_SWAP_REGISTRY_5,\n    CRYPTO_POOL_FACTORY_6\n}\n\n/// @dev Storage struct that holds Curve pool coin details\nstruct PoolCoin {\n    /// @dev Coin address\n    address addr;\n    /// @dev `true` if a coin is Curve LP Token (used in the meta pools)\n    bool isLPToken;\n}\n\n/// @dev Storage struct that holds Curve pool details\nstruct Pool {\n    /// @dev Pool address\n    address addr;\n    /// @dev `true` if a pool is the meta pool (the pool that contains other Curve LP Tokens)\n    bool isMeta;\n}\n\n/// @dev Describes an LP Token with all the details required for the price calculation\nstruct LPTokenDetails {\n    /// @dev A pool of the LP Token. See a Pool struct\n    Pool pool;\n    /// @dev A list of the LP token pool coins\n    address[] coins;\n}\n"
    },
    "contracts/priceProviders/curveLPTokens/_common/CurveMinterResolver.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"../interfaces/ICurveLPTokenMinterLike.sol\";\n\n/// @title Low level getters from the Curve LP tokens and pools\nlibrary CurveMinterResolver {\n    /// @dev An encoded input for the `minter` function\n    bytes constant private _MINTER_FN_INPUT = abi.encode(ICurveLPTokenMinterLike.minter.selector);\n\n    /// @param _lpToken LP Token address\n    /// @return pool address of the LP Token in the case if the token has a `minter` function\n    function getMinter(address _lpToken) internal view returns (address pool) {\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory data) = _lpToken.staticcall(_MINTER_FN_INPUT);\n\n        if (success && data.length != 0) {\n            return abi.decode(data, (address));\n        }\n    }\n}\n"
    },
    "contracts/priceProviders/curveLPTokens/interfaces/ICurveAddressProviderLike.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\n/// @notice A simplified interface of the Curve address provider for the registry contracts.\n/// @dev As curve protocol is implemented with Vyper programming language and we don't use\n/// all the methods present in the Curve address provider. We'll have a solidity version\n/// of the interface that includes only methods required for Silo's Curve LP Tokens price providers.\ninterface ICurveAddressProviderLike {\n    /// Description from Curve docs:\n    /// @notice Fetch the address associated with `_id`\n    /// @dev Returns ZERO_ADDRESS if `_id` has not been defined, or has been unset\n    /// @param _id Identifier to fetch an address for\n    /// @return Current address associated to `_id`\n    //  solhint-disable-next-line func-name-mixedcase\n    function get_address(uint256 _id) external view returns (address);\n}\n"
    },
    "contracts/priceProviders/curveLPTokens/interfaces/ICurveCryptoPoolRegistryLike.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\n/// @notice A simplified interface of the Curve Crypto Pool Registry.\n/// @dev As curve protocol is implemented with Vyper programming language and we don't use\n/// all the methods present in the Curve address provider. We'll have a solidity version of the interface\n/// that includes only methods required to retrieve LP token details as are necessary for a price calculation.\ninterface ICurveCryptoPoolRegistryLike {\n    /// @param _pool Pool address to fetch coins for\n    /// @return A list of coins in the pool\n    //  solhint-disable-next-line func-name-mixedcase\n    function get_coins(address _pool) external view returns (address[2] memory);\n}\n"
    },
    "contracts/priceProviders/curveLPTokens/interfaces/ICurveCryptoSwapRegistryLike.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\n/// @notice A simplified interface of the Curve CryptoSwap Registry.\n/// @dev As curve protocol is implemented with Vyper programming language and we don't use\n/// all the methods present in the Curve address provider. We'll have a solidity version of the interface\n/// that includes only methods required to retrieve LP token details as are necessary for a price calculation.\ninterface ICurveCryptoSwapRegistryLike {\n    /// @param _lpToken LP Token address to fetch a pool address for\n    /// @return Pool address associated with `_lpToken`\n    //  solhint-disable-next-line func-name-mixedcase\n    function get_pool_from_lp_token(address _lpToken) external view returns (address);\n\n    /// @param _pool Curve pool address\n    /// @return LP Token address associated with `_pool`\n    //  solhint-disable-next-line func-name-mixedcase\n    function get_lp_token(address _pool) external view returns (address);\n\n    /// @param _pool Pool address to fetch coins for\n    /// @return A list of coins in the pool\n    //  solhint-disable-next-line func-name-mixedcase\n    function get_coins(address _pool) external view returns (address[8] memory);\n}\n"
    },
    "contracts/priceProviders/curveLPTokens/interfaces/ICurveHackyPool.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\ninterface ICurveHackyPool {\n    // We do not expect to write in the store on this call.\n    // Our expectation is 1 sload operation for the `lock` status check + revert.\n    // Because of it this function can be view which opens a possibility to do\n    // a verification in the price provider on the `getPrice` fn execution.\n    //  solhint-disable func-name-mixedcase\n    function remove_liquidity(uint256 _tokenAmount, uint256[2] calldata _amounts) external view;\n    function remove_liquidity(uint256 _tokenAmount, uint256[3] calldata _amounts) external view;\n    function remove_liquidity(uint256 _tokenAmount, uint256[4] calldata _amounts) external view;\n    function remove_liquidity(uint256 _tokenAmount, uint256[5] calldata _amounts) external view;\n    function remove_liquidity(uint256 _tokenAmount, uint256[6] calldata _amounts) external view;\n    function remove_liquidity(uint256 _tokenAmount, uint256[7] calldata _amounts) external view;\n    function remove_liquidity(uint256 _tokenAmount, uint256[8] calldata _amounts) external view;\n    //  solhint-enable func-name-mixedcase\n}\n"
    },
    "contracts/priceProviders/curveLPTokens/interfaces/ICurveLPTokenMinterLike.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\n/// @notice A simplified interface of the Curve LP Token.\n/// @dev Includes only methods required to retrieve LP token details as are necessary for a price calculation.\ninterface ICurveLPTokenMinterLike {\n    /// @return pool address of the LP Token\n    function minter() external view returns (address pool);\n}\n"
    },
    "contracts/priceProviders/curveLPTokens/interfaces/ICurveLPTokensDetailsFetcher.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"../_common/CurveLPTokensDataTypes.sol\";\n\n/// @title Curve LP Tokens details fetcher\n/// @dev Designed to unify an interface of the Curve pool tokens details getter,\n/// such registries as Main Registry, CryptoSwap Registry,  Metapool Factory, and Cryptopool Factory\n/// have different interfaces.\ninterface ICurveLPTokensDetailsFetcher {\n    /// @notice Emitted when Curve LP registry address has been updated\n    /// @param registry The configured registry address\n    event RegistryUpdated(address indexed registry);\n\n    /// @notice Pulls a registry address from the Curve address provider\n    function updateRegistry() external;\n\n    /// @notice Curve LP Token details getter\n    /// @param _lpToken Curve LP token address\n    /// @param _data Any additional data that can be required\n    /// @dev This method should not revert. If the data is not found or provided an invalid LP token address,\n    /// it should return an empty data structure.\n    /// @return details LP token details. See CurveLPTokensDataTypes.LPTokenDetails\n    /// @return data Any additional data to return\n    function getLPTokenDetails(\n        address _lpToken,\n        bytes memory _data\n    )\n      external\n      view\n      returns (\n        LPTokenDetails memory details,\n        bytes memory data\n      );\n\n    /// @notice Helper method that allows easily detects, if contract is Curve Registry Fatcher\n    /// @return always curveLPTokensDetailsFetcherPing.selector\n    function curveLPTokensDetailsFetcherPing() external pure returns (bytes4);\n}\n"
    },
    "contracts/priceProviders/curveLPTokens/interfaces/ICurveLPTokensDetailsFetchersRepository.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"./ICurveLPTokensDetailsFetcher.sol\";\nimport \"../_common/CurveLPTokensDataTypes.sol\";\n\n/// @title Curve LP Tokens details fetchers repository\n/// @dev Designed to unify an interface of the Curve pool tokens details getter,\n/// such registries as Main Registry, CryptoSwap Registry,  Metapool Factory, and Cryptopool Factory\n/// have different interfaces.\ninterface ICurveLPTokensDetailsFetchersRepository {\n    /// @notice Emitted when Curve LP token fetcher added to the repository\n    /// @param fetcher Added fetcher address\n    event FetcherAdded(ICurveLPTokensDetailsFetcher indexed fetcher);\n\n    /// @notice Emitted when Curve LP token fetcher removed from the repository\n    /// @param fetcher Removed fetcher address\n    event FetcherRemoved(ICurveLPTokensDetailsFetcher indexed fetcher);\n\n    /// @notice Add Curve LP token details fetcher to the repository\n    /// @param _fetcher A Curve LP token details fetcher to be added to the repository\n    function addFetcher(ICurveLPTokensDetailsFetcher _fetcher) external;\n\n    /// @notice Remove Curve LP token details fetcher from the repository\n    /// @param _fetcher A Curve LP token details fetcher to be removed from the repository\n    function removeFetcher(ICurveLPTokensDetailsFetcher _fetcher) external;\n\n    /// @notice Curve LP Token details getter\n    /// @param _lpToken Curve LP token address\n    /// @param _data Any additional data that can be required\n    /// @return details LP token details. See CurveLPTokensDataTypes.LPTokenDetails\n    /// @return data Any additional data to return\n    function getLPTokenDetails(\n        address _lpToken,\n        bytes memory _data\n    )\n        external\n        view\n        returns (\n            LPTokenDetails memory details,\n            bytes memory data\n        );\n\n    /// @return pool of the `_lpToken`\n    function getLPTokenPool(address _lpToken) external view returns (address pool);\n\n    /// @dev Returns a list of the registered fetchers\n    function getFetchers() external view returns (address[] memory);\n\n    /// @notice Helper method that allows easily detects, if contract is Curve Repository fetcher\n    /// @return always curveLPTokensFetchersRepositoryPing.selector\n    function curveLPTokensFetchersRepositoryPing() external pure returns (bytes4);\n}\n"
    },
    "contracts/priceProviders/curveLPTokens/interfaces/ICurveLPTokensPriceProvider.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"../_common/CurveLPTokensDataTypes.sol\";\nimport \"../../../interfaces/IPriceProvider.sol\";\n\n/// @notice A price provider for Curve LP Tokens\ninterface ICurveLPTokensPriceProvider is IPriceProvider {\n    /// @notice Enable Curve LP token in the price provider\n    /// @param _lpToken Curve LP Token address that will be enabled in the price provider\n    function setupAsset(address _lpToken) external;\n\n    /// @notice Enable a list of Curve LP tokens in the price provider\n    /// @param _lpTokens List of Curve LP Tokens addresses that will be enabled in the price provider\n    function setupAssets(address[] memory _lpTokens) external;\n}\n"
    },
    "contracts/priceProviders/curveLPTokens/interfaces/ICurveMainRegistryLike.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\n/// @notice A simplified interface of the Curve Main Registry.\n/// @dev As curve protocol is implemented with Vyper programming language and we don't use\n/// all the methods present in the Curve address provider. We'll have a solidity version of the interface\n/// that includes only methods required to retrieve LP token details as are necessary for a price calculation.\ninterface ICurveMainRegistryLike {\n    /// @param _lpToken LP Token address to fetch a pool address for\n    /// @return Pool address associated with `_lpToken`\n    //  solhint-disable-next-line func-name-mixedcase\n    function get_pool_from_lp_token(address _lpToken) external view returns (address);\n\n    /// @notice Verifies whether a pool is meta pool\n    /// @param _pool Pool address to be verified\n    /// @return Boolean value that shows if a pool is a meta pool or not\n    //  solhint-disable-next-line func-name-mixedcase\n    function is_meta(address _pool) external view returns (bool);\n\n    /// @param _pool Pool address to fetch coins for\n    /// @return A list of coins in the pool\n    //  solhint-disable-next-line func-name-mixedcase\n    function get_coins(address _pool) external view returns (address[8] memory);\n}\n"
    },
    "contracts/priceProviders/curveLPTokens/interfaces/ICurveMetaPoolFactoryLike.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\n/// @notice A simplified interface of the Curve Meta Pool Factory.\n/// @dev As curve protocol is implemented with Vyper programming language and we don't use\n/// all the methods present in the Curve address provider. We'll have a solidity version of the interface\n/// that includes only methods required to retrieve LP token details as are necessary for a price calculation.\ninterface ICurveMetaPoolFactoryLike {\n    /// @notice Verifies whether a pool is meta pool\n    /// @param _pool Pool address to be verified\n    /// @return Boolean value that shows if a pool is a meta pool or not\n    //  solhint-disable-next-line func-name-mixedcase\n    function is_meta(address _pool) external view returns (bool);\n\n    /// @param _pool Pool address to fetch coins for\n    /// @return A list of coins in the pool\n    //  solhint-disable-next-line func-name-mixedcase\n    function get_coins(address _pool) external view returns (address[4] memory);\n}\n"
    },
    "contracts/priceProviders/curveLPTokens/interfaces/ICurvePoolLike.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\n/// @notice A simplified interface of the Curve pool.\n/// @dev Includes only methods for CurveLPTokensPriceProviders.\ninterface ICurvePoolLike {\n    /// Description from Curve docs:\n    /// @notice Returns portfolio virtual price (for calculating profit) scaled up by 1e18\n    //  solhint-disable-next-line func-name-mixedcase\n    function get_virtual_price() external view returns (uint256);\n}\n"
    },
    "contracts/priceProviders/curveLPTokens/interfaces/ICurvePoolNonPeggedAssetsLike.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\n/// @notice A simplified interface of the Curve pool.\n/// @dev Includes only methods for CurveLPTokensPriceProviders.\ninterface ICurvePoolNonPeggedAssetsLike {\n    /// Description from Curve docs:\n    /// @notice Approximate LP token price\n    /// @dev n * self.virtual_price * self.sqrt_int(self.internal_price_oracle()) / 10**18\n    /// where n is a number of coins in the pool\n    //  solhint-disable-next-line func-name-mixedcase\n    function lp_price() external view returns (uint256);\n}\n"
    },
    "contracts/priceProviders/curveLPTokens/interfaces/ICurveReentrancyCheck.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\ninterface ICurveReentrancyCheck {\n    enum N_COINS { // solhint-disable-line contract-name-camelcase\n        NOT_CONFIGURED,\n        INVALID,\n        TWO_COINS,\n        THREE_COINS,\n        FOUR_COINS,\n        FIVE_COINS,\n        SIX_COINS,\n        SEVEN_COINS,\n        EIGHT_COINS\n    }\n\n    /// @notice Set/Update a pool configuration for the reentrancy check\n    /// @param _pool address\n    /// @param _gasLimit the gas limit to be set on the check execution\n    /// @param _nCoins the number of the coins in the Curve pool (N_COINS)\n    function setReentrancyVerificationConfig(address _pool, uint128 _gasLimit, N_COINS _nCoins) external;\n}\n"
    },
    "contracts/priceProviders/curveLPTokens/interfaces/ICurveRegistriesPoolsManagement.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"../_common/CurveLPTokensDataTypes.sol\";\n\n/// @notice Curve registry extension\ninterface ICurveRegistriesPoolsManagement {\n    /// @dev  Emitted when a pool has been added to the handler\n    event PoolAdded(address indexed _pool);\n    /// @dev  Emitted when a pool has been removed from the handler\n    event PoolRemoved(address indexed _pool);\n\n    /// @notice Add pools to the handler\n    /// @param _pools A list of pools to be added\n    function addPools(Pool[] calldata _pools) external;\n\n    /// @notice Remove pools to the handler\n    /// @param _pools A list of pools to be removed\n    function removePools(address[] calldata _pools) external;\n}\n"
    },
    "contracts/priceProviders/curveLPTokens/interfaces/ICurveRegistryLike.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\n/// @notice A simplified interface of the Curve registry.\n/// @dev Includes only methods for CurveLPTokensPriceProvider.\ninterface ICurveRegistryLike {\n    /// @param _lpToken LP Token address to fetch a pool address for\n    /// @return Pool address associated with `_lpToken`\n    //  solhint-disable-next-line func-name-mixedcase\n    function get_pool_from_lp_token(address _lpToken) external view returns (address);\n\n    /// @notice Verifies whether a pool is meta pool\n    /// @param _pool Pool address to be verified\n    /// @return Boolean value that shows if a pool is a meta pool or not\n    //  solhint-disable-next-line func-name-mixedcase\n    function is_meta(address _pool) external view returns (bool);\n\n    /// @param _pool Pool address to fetch coins for\n    /// @return A list of coins in the pool\n    //  solhint-disable-next-line func-name-mixedcase\n    function get_coins(address _pool) external view returns (address[8] memory);\n}\n"
    },
    "contracts/priceProviders/curveLPTokens/LPTokensDetailsFetchers/CurveCryptoPoolRegistryFetcher.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"./CurveRegistriesBaseFetcher.sol\";\nimport \"../interfaces/ICurveCryptoPoolRegistryLike.sol\";\nimport \"../_common/CurveMinterResolver.sol\";\nimport \"../../../interfaces/IPriceProvidersRepository.sol\";\n\n/// @title Curve LP Tokens details fetcher for Cryptopool Registry\n/// @dev Registry id `6` in the Curve address provider\ncontract CurveCryptoPoolRegistryFetcher is CurveRegistriesBaseFetcher {\n    using CurveMinterResolver for address;\n\n    /// @dev Number of coins by the Curve Main Registry interface\n    uint256 constant public MAX_NUMBER_OF_COINS = 2;\n\n    /// @dev Constructor is required for indirect CurveRegistriesBaseFetcher and\n    /// PriceProvidersRepositoryManager initialization. Arguments for CurveRegistriesBaseFetcher\n    /// initialization are given in the modifier-style in the derived constructor.\n    /// CurveCryptoPoolRegistryFetcher constructor body should be empty as we need to do nothing.\n    /// @param _repository Price providers repository address\n    /// @param _addressProvider Curve address provider address\n    constructor(\n        IPriceProvidersRepository _repository,\n        ICurveAddressProviderLike _addressProvider\n    )\n        PriceProvidersRepositoryManager(_repository)\n        CurveRegistriesBaseFetcher(_addressProvider, RegistryId.CRYPTO_POOL_FACTORY_6)\n    {\n        // The code will not compile without it. So, we need to keep an empty constructor.\n    }\n\n    /// @inheritdoc ICurveLPTokensDetailsFetcher\n    function getLPTokenDetails(\n        address _lpToken,\n        bytes memory\n    )\n        external\n        view\n        returns (\n            LPTokenDetails memory details,\n            bytes memory data\n        )\n    {\n        details.pool.addr = _lpToken.getMinter();\n\n        if (details.pool.addr == address(0)) {\n            return (details, data);\n        }\n\n        ICurveCryptoPoolRegistryLike registry = ICurveCryptoPoolRegistryLike(registry);\n        address[MAX_NUMBER_OF_COINS] memory poolCoins = registry.get_coins(details.pool.addr);\n\n        if (poolCoins[0] == address(0)) {\n            // Some pools have method `minter` to resolve a pool but registered in the different registry\n            // For example tricrypto2. So, we need to check if we can get coins from the registry.\n            details.pool.addr = address(0);\n\n            return (details, data);\n        }\n\n        details.coins = new address[](MAX_NUMBER_OF_COINS);\n        details.coins[0] = poolCoins[0];\n        details.coins[1] = poolCoins[1];\n    }\n}\n"
    },
    "contracts/priceProviders/curveLPTokens/LPTokensDetailsFetchers/CurveCryptoSwapRegistryFetcher.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"./CurveRegistriesPoolsManagement.sol\";\nimport \"../interfaces/ICurveCryptoSwapRegistryLike.sol\";\nimport \"../../../interfaces/IPriceProvidersRepository.sol\";\n\n/// @title Curve LP Tokens details fetcher for CryptoSwap Registry\n/// @dev Registry id `5` in the Curve address provider\ncontract CurveCryptoSwapRegistryFetcher is CurveRegistriesPoolsManagement {\n    /// @dev Number of coins by the Curve CryptoSwap Registry interface\n    uint256 constant internal _MAX_NUMBER_OF_COINS = 8;\n\n    /// @dev Constructor is required for indirect CurveRegistriesBaseFetcher and\n    /// PriceProvidersRepositoryManager initialization. Arguments for CurveRegistriesBaseFetcher\n    /// initialization are given in the modifier-style in the derived constructor.\n    /// CurveCryptoSwapRegistryFetcher constructor body should be empty as we need to do nothing.\n    /// @param _repository Price providers repository address\n    /// @param _addressProvider Curve address provider address\n    /// @param _pools A list of pools with details for a fetcher initialization\n    constructor(\n        IPriceProvidersRepository _repository,\n        ICurveAddressProviderLike _addressProvider,\n        Pool[] memory _pools\n    )\n        PriceProvidersRepositoryManager(_repository)\n        CurveRegistriesBaseFetcher(_addressProvider, RegistryId.CRYPTO_SWAP_REGISTRY_5)\n        CurveRegistriesPoolsManagement(_pools)\n    {\n        // The code will not compile without it. So, we need to keep an empty constructor.\n    }\n\n    /// @inheritdoc ICurveLPTokensDetailsFetcher\n    function getLPTokenDetails(\n        address _lpToken,\n        bytes memory\n    )\n        external\n        virtual\n        view\n        returns (\n            LPTokenDetails memory details,\n            bytes memory data\n        )\n    {\n        ICurveCryptoSwapRegistryLike registry = ICurveCryptoSwapRegistryLike(registry);\n        details.pool.addr = registry.get_pool_from_lp_token(_lpToken);\n\n        if (details.pool.addr == address(0)) {\n            return (details, data);\n        }\n\n        RegisteredPool memory pool = registeredPools[details.pool.addr];\n\n        // It can happen in the case when the Curve protocol team adds a new pool\n        // via the `add_pool` function directly in the CryptoSwap Registry but, it is not\n        // registered in the `CurveCryptoSwapRegistryFetcher` yet.\n        // We need to call `CurveCryptoSwapRegistryFetcher.addPools`.\n        if (!pool.isRegistered) {\n            details.pool.addr = address(0);\n            return (details, data);\n        }\n\n        details.pool.isMeta = pool.isMeta;\n\n        uint256 length = 0;\n        address[_MAX_NUMBER_OF_COINS] memory poolCoins = registry.get_coins(details.pool.addr);\n\n        while (length < _MAX_NUMBER_OF_COINS) {\n            if (poolCoins[length] == address(0)) break;\n\n            // Because of the condition `length < 8` we can ignore overflow check\n            unchecked { length++; }\n        }\n\n        details.coins = new address[](length);\n        uint256 i = 0;\n\n        while (i < length) {\n            details.coins[i] = poolCoins[i];\n\n            // Because of the condition `i < length` we can ignore overflow check\n            unchecked { i++; }\n        }\n    }\n}\n"
    },
    "contracts/priceProviders/curveLPTokens/LPTokensDetailsFetchers/CurveLPTokensDetailsFetchersRepository.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\nimport \"../interfaces/ICurveLPTokensDetailsFetchersRepository.sol\";\nimport \"../../_common/PriceProvidersRepositoryManager.sol\";\nimport \"../../../lib/Ping.sol\";\nimport \"../../../interfaces/IPriceProvidersRepository.sol\";\n\n/// @title Curve LP Tokens details fetchers repository\n/// @dev For more info about Curve LP Tokens details fetchers see ICurveLPTokensDetailsFetcher\ncontract CurveLPTokensDetailsFetchersRepository is\n    ICurveLPTokensDetailsFetchersRepository,\n    PriceProvidersRepositoryManager\n{\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    /// @dev Curve LP Tokens details fetchers set\n    EnumerableSet.AddressSet internal _fetchers;\n\n    /// @dev Revert if Curve LP Tokens details fetcher is already added to the set\n    error FetcherAlreadyAdded();\n    /// @dev Revert if Curve LP Tokens details fetcher is not registered in the repository\n    error FetcherIsNotRegistered();\n    /// @dev Revert on a false sanity check with `Ping` library for a fetcher\n    error InvalidFetcher();\n\n    /// @dev Constructor is required for indirect PriceProvidersRepositoryManager initialization.\n    /// Arguments for PriceProvidersRepositoryManager initialization are given in the modifier-style\n    /// in the derived constructor.\n    /// CurveLPTokensDetailsFetchersRepository constructor body should be empty as we need to do nothing.\n    /// @param _repository Price providers repository address\n    constructor(IPriceProvidersRepository _repository) PriceProvidersRepositoryManager(_repository) {\n        // The code will not compile without it. So, we need to keep an empty constructor.\n    }\n\n    /// @inheritdoc ICurveLPTokensDetailsFetchersRepository\n    function addFetcher(ICurveLPTokensDetailsFetcher _fetcher) external virtual onlyManager() {\n        if (!Ping.pong(_fetcher.curveLPTokensDetailsFetcherPing)) revert InvalidFetcher();\n        if (!_fetchers.add(address(_fetcher))) revert FetcherAlreadyAdded();\n\n        emit FetcherAdded(_fetcher);\n    }\n\n    /// @inheritdoc ICurveLPTokensDetailsFetchersRepository\n    function removeFetcher(ICurveLPTokensDetailsFetcher _fetcher) external virtual onlyManager() {\n        if (!_fetchers.remove(address(_fetcher))) revert FetcherIsNotRegistered();\n\n        emit FetcherRemoved(_fetcher);\n    }\n\n    /// @inheritdoc ICurveLPTokensDetailsFetchersRepository\n    function getLPTokenDetails(\n        address _lpToken,\n        bytes memory _data\n    )\n        external\n        virtual\n        view\n        returns (\n            LPTokenDetails memory details,\n            bytes memory data\n        )\n    {\n        uint256 i = 0;\n        uint256 numberOfFetchers = _fetchers.length();\n\n        while(i < numberOfFetchers) {\n            ICurveLPTokensDetailsFetcher fetcher = ICurveLPTokensDetailsFetcher(_fetchers.at(i));\n\n            (details, data) = fetcher.getLPTokenDetails(_lpToken, _data);\n\n            // Assume that if a pool address is not address(0), we are done\n            if (details.pool.addr != address(0)) {\n                return (details, data);\n            }\n\n            // variables 'i' and 'numberOfFetchers' have the same data type,\n            // so due to condition (i < numberOfFetchers) overflow is impossible.\n            unchecked { i++; }\n        }\n    }\n\n    /// @return pool of the `_lpToken`\n    function getLPTokenPool(address _lpToken) external view returns (address pool) {\n        uint256 i = 0;\n        bytes memory data;\n        LPTokenDetails memory details;\n        uint256 numberOfFetchers = _fetchers.length();\n\n        while(i < numberOfFetchers) {\n            ICurveLPTokensDetailsFetcher fetcher = ICurveLPTokensDetailsFetcher(_fetchers.at(i));\n\n            (details, data) = fetcher.getLPTokenDetails(_lpToken, data);\n\n            // Assume that if a pool address is not address(0), we are done\n            if (details.pool.addr != address(0)) {\n                return details.pool.addr;\n            }\n\n            // variables 'i' and 'numberOfFetchers' have the same data type,\n            // so due to condition (i < numberOfFetchers) overflow is impossible.\n            unchecked { i++; }\n        }\n    }\n\n    /// @inheritdoc ICurveLPTokensDetailsFetchersRepository\n    function getFetchers() external virtual view returns (address[] memory) {\n        return _fetchers.values();\n    }\n\n    /// @inheritdoc ICurveLPTokensDetailsFetchersRepository\n    function curveLPTokensFetchersRepositoryPing() external virtual pure returns (bytes4) {\n        return this.curveLPTokensFetchersRepositoryPing.selector;\n    }\n}\n"
    },
    "contracts/priceProviders/curveLPTokens/LPTokensDetailsFetchers/CurveMainRegistryFetcher.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"./CurveRegistriesBaseFetcher.sol\";\nimport \"../interfaces/ICurveMainRegistryLike.sol\";\nimport \"../../../interfaces/IPriceProvidersRepository.sol\";\n\n/// @title Curve LP Tokens details fetcher for Main Registry\n/// @dev Registry id `0` in the Curve address provider\ncontract CurveMainRegistryFetcher is CurveRegistriesBaseFetcher {\n    /// @dev Number of coins by the Curve Main Registry interface\n    uint256 constant internal _MAX_NUMBER_OF_COINS = 8;\n\n    /// @dev Constructor is required for indirect CurveRegistriesBaseFetcher and\n    /// PriceProvidersRepositoryManager initialization. Arguments for CurveRegistriesBaseFetcher\n    /// initialization are given in the modifier-style in the derived constructor.\n    /// CurveMainRegistryFetcher constructor body should be empty as we need to do nothing.\n    /// @param _repository Price providers repository address\n    /// @param _addressProvider Curve address provider address\n    constructor(\n        IPriceProvidersRepository _repository,\n        ICurveAddressProviderLike _addressProvider\n    )\n        PriceProvidersRepositoryManager(_repository)\n        CurveRegistriesBaseFetcher(_addressProvider, RegistryId.MAIN_REGISTRY_0)\n    {\n        // The code will not compile without it. So, we need to keep an empty constructor.\n    }\n\n    /// @inheritdoc ICurveLPTokensDetailsFetcher\n    function getLPTokenDetails(\n        address _lpToken,\n        bytes memory\n    )\n        external\n        virtual\n        view\n        returns (\n            LPTokenDetails memory details,\n            bytes memory data\n        )\n    {\n        ICurveMainRegistryLike mainRegistry = ICurveMainRegistryLike(registry);\n        details.pool.addr = mainRegistry.get_pool_from_lp_token(_lpToken);\n\n        if (details.pool.addr == address(0)) {\n            return (details, data);\n        }\n\n        details.pool.isMeta = mainRegistry.is_meta(details.pool.addr);\n\n        uint256 numberOfCoins = 0;\n        address[_MAX_NUMBER_OF_COINS] memory poolCoins = mainRegistry.get_coins(details.pool.addr);\n\n        while (numberOfCoins < _MAX_NUMBER_OF_COINS) {\n            if (poolCoins[numberOfCoins] == address(0)) break;\n\n            // Because of the condition `numberOfCoins < 8` we can ignore overflow check\n            unchecked { numberOfCoins++; }\n        }\n\n        details.coins = new address[](numberOfCoins);\n        uint256 i = 0;\n\n        while (i < numberOfCoins) {\n            details.coins[i] = poolCoins[i];\n            // Because of the condition `i < numberOfCoins` we can ignore overflow check\n            unchecked { i++; }\n        }\n    }\n}\n"
    },
    "contracts/priceProviders/curveLPTokens/LPTokensDetailsFetchers/CurveMetaPoolFactoryFetcher.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"./CurveRegistriesBaseFetcher.sol\";\nimport \"../../../interfaces/IPriceProvidersRepository.sol\";\nimport \"../interfaces/ICurveMetaPoolFactoryLike.sol\";\n\n/// @title Curve LP Tokens details fetcher for Meta Pool Factory\n/// @dev Registry id `3` in the Curve address provider\ncontract CurveMetaPoolFactoryFetcher is CurveRegistriesBaseFetcher {\n    /// @dev Number of coins by the Curve Meta Pool Factory interface\n    uint256 constant internal _MAX_NUMBER_OF_COINS = 4;\n\n    /// @dev Constructor is required for indirect CurveRegistriesBaseFetcher and\n    /// PriceProvidersRepositoryManager initialization. Arguments for CurveRegistriesBaseFetcher\n    /// initialization are given in the modifier-style in the derived constructor.\n    /// CurveMetaPoolFactoryFetcher constructor body should be empty as we need to do nothing.\n    /// @param _repository Price providers repository address\n    /// @param _addressProvider Curve address provider address\n    constructor(\n        IPriceProvidersRepository _repository,\n        ICurveAddressProviderLike _addressProvider\n    )\n        PriceProvidersRepositoryManager(_repository)\n        CurveRegistriesBaseFetcher(_addressProvider, RegistryId.META_POOL_FACTORY_3)\n    {\n        // The code will not compile without it. So, we need to keep an empty constructor.\n    }\n\n    /// @inheritdoc ICurveLPTokensDetailsFetcher\n    function getLPTokenDetails(\n        address _lpToken,\n        bytes memory\n    )\n        external\n        virtual\n        view\n        returns (\n            LPTokenDetails memory details,\n            bytes memory data\n        )\n    {\n        uint256 numberOfCoins = 0;\n        ICurveMetaPoolFactoryLike metaPoolFactory = ICurveMetaPoolFactoryLike(registry);\n        address[_MAX_NUMBER_OF_COINS] memory poolCoins = metaPoolFactory.get_coins(_lpToken);\n\n        if (poolCoins[0] == address(0)) {\n            return (details, data);\n        }\n\n        while (numberOfCoins < _MAX_NUMBER_OF_COINS) {\n            if (poolCoins[numberOfCoins] == address(0)) break;\n\n            // Because of the condition `numberOfCoins < _MAX_NUMBER_OF_COINS` we can ignore overflow check\n            unchecked { numberOfCoins++; }\n        }\n\n        details.coins = new address[](numberOfCoins);\n        uint256 i = 0;\n\n        while (i < numberOfCoins) {\n            details.coins[i] = poolCoins[i];\n\n            // Because of the condition `i < numberOfCoins` we can ignore overflow check\n            unchecked { i++; }\n        }\n\n        // In the Curve Meta Pool Factory LP Tokens are pools\n        details.pool.addr = _lpToken;\n        details.pool.isMeta = metaPoolFactory.is_meta(_lpToken);\n    }\n}\n"
    },
    "contracts/priceProviders/curveLPTokens/LPTokensDetailsFetchers/CurveMetaRegistryFetcher.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"./CurveRegistriesBaseFetcher.sol\";\nimport \"../interfaces/ICurveCryptoSwapRegistryLike.sol\";\nimport \"../interfaces/ICurveAddressProviderLike.sol\";\nimport \"../interfaces/ICurveLPTokensDetailsFetcher.sol\";\nimport \"../../_common/PriceProvidersRepositoryManager.sol\";\nimport \"../../../interfaces/IPriceProvidersRepository.sol\";\n\n/// @title Curve LP Tokens details fetcher for  Meta registry\n/// @dev Registry id `7` in the Curve address provider\ncontract CurveMetaRegistryFetcher is PriceProvidersRepositoryManager, ICurveLPTokensDetailsFetcher {\n    /// @dev Number of coins by the Curve Meta registry interface\n    uint256 constant internal _MAX_NUMBER_OF_COINS = 8;\n    /// @dev The registry identifier that this fetcher is designed for\n    uint256 public constant REGISTRY_ID = 7; // solhint-disable-line var-name-mixedcase\n    /// @dev Curve address provider\n    ICurveAddressProviderLike public immutable ADDRESS_PROVIDER; // solhint-disable-line var-name-mixedcase\n    /// @dev Curve registry address pulled from the Curve address provider.\n    /// ICurveCryptoSwapRegistryLike is the same as we need for the MetaRegistry\n    ICurveCryptoSwapRegistryLike public registry;\n\n    /// @dev Revert if address provider address is empty\n    error EmptyAddressProvider();\n    /// @dev Revert if Curve registry is not changed\n    error RegistryIsTheSame();\n    /// @dev Revert if in the Curve address provider the registry is not found by the provided registry id\n    error RegistryNotFoundById(uint256 id);\n\n    /// @dev Emitted on creation\n    /// @param curveAddressProvider The Curve address provider for a data fetcher\n    /// @param registryId The Curve registry identifier in the Curve address provider for a data fetcher\n    event DataFetcherCreated(ICurveAddressProviderLike curveAddressProvider, uint256 registryId);\n\n    /// @param _repository Price providers repository address\n    /// @param _addressProvider Curve address provider address\n    constructor(\n        IPriceProvidersRepository _repository,\n        ICurveAddressProviderLike _addressProvider\n    )\n        PriceProvidersRepositoryManager(_repository)\n    {\n        if (address(_addressProvider) == address(0)) revert EmptyAddressProvider();\n\n        ADDRESS_PROVIDER = _addressProvider;\n\n        _updateRegistry();\n\n        emit DataFetcherCreated(ADDRESS_PROVIDER, REGISTRY_ID);\n    }\n\n    /// @inheritdoc ICurveLPTokensDetailsFetcher\n    function getLPTokenDetails(\n        address _lpToken,\n        bytes memory\n    )\n        external\n        virtual\n        view\n        returns (\n            LPTokenDetails memory details,\n            bytes memory data\n        )\n    {\n        details.pool.addr = registry.get_pool_from_lp_token(_lpToken);\n\n        if (details.pool.addr == address(0)) {\n            return (details, data);\n        }\n\n        uint256 length = 0;\n        address[_MAX_NUMBER_OF_COINS] memory poolCoins = registry.get_coins(details.pool.addr);\n\n        while (length < _MAX_NUMBER_OF_COINS) {\n            if (poolCoins[length] == address(0)) break;\n\n            // Because of the condition `length < 8` we can ignore overflow check\n            unchecked { length++; }\n        }\n\n        details.coins = new address[](length);\n        uint256 i = 0;\n\n        while (i < length) {\n            details.coins[i] = poolCoins[i];\n\n            // Because of the condition `i < length` we can ignore overflow check\n            unchecked { i++; }\n        }\n    }\n\n    /// @inheritdoc ICurveLPTokensDetailsFetcher\n    function updateRegistry() external virtual onlyManager() {\n        _updateRegistry();\n    }\n\n    /// @inheritdoc ICurveLPTokensDetailsFetcher\n    function curveLPTokensDetailsFetcherPing() external virtual pure returns (bytes4) {\n        return this.curveLPTokensDetailsFetcherPing.selector;\n    }\n\n    /// @notice Updates a registry address from the Curve address provider\n    /// @dev Reverts if an address is not found or is the same as current address\n    function _updateRegistry() internal {\n        address newRegistry = ADDRESS_PROVIDER.get_address(REGISTRY_ID);\n\n        if (newRegistry == address(0)) revert RegistryNotFoundById(REGISTRY_ID);\n        if (address(registry) == newRegistry) revert RegistryIsTheSame();\n\n        registry = ICurveCryptoSwapRegistryLike(newRegistry);\n\n        emit RegistryUpdated(newRegistry);\n    }\n}\n"
    },
    "contracts/priceProviders/curveLPTokens/LPTokensDetailsFetchers/CurveRegistriesBaseFetcher.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"../_common/CurveLPTokensDataTypes.sol\";\nimport \"../interfaces/ICurveAddressProviderLike.sol\";\nimport \"../interfaces/ICurveLPTokensDetailsFetcher.sol\";\nimport \"../../_common/PriceProvidersRepositoryManager.sol\";\n\n/// @title Curve registries base fetcher\nabstract contract CurveRegistriesBaseFetcher is PriceProvidersRepositoryManager, ICurveLPTokensDetailsFetcher {\n    /// @dev The registry identifier that this fetcher is designed for\n    RegistryId public immutable REGISTRY_ID; // solhint-disable-line var-name-mixedcase\n    /// @dev Curve address provider\n    ICurveAddressProviderLike public immutable ADDRESS_PROVIDER; // solhint-disable-line var-name-mixedcase\n    /// @dev Curve registry address pulled from the Curve address provider.\n    /// As Main Registry, CryptoSwap Registry, Metapool Factory, and Cryptopool Factory have different\n    /// interfaces we will store registry as an address as it is a base contract that will be used for\n    /// each registry and it must have a common type.\n    address public registry;\n\n    /// @dev Revert if address provider address is empty\n    error EmptyAddressProvider();\n    /// @dev Revert if Curve registry is not changed\n    error RegistryIsTheSame();\n    /// @dev Revert if in the Curve address provider the registry is not found by the provided registry id\n    error RegistryNotFoundById(RegistryId id);\n\n    /// @dev Emitted on creation\n    /// @param curveAddressProvider The Curve address provider for a data fetcher\n    /// @param registryId The Curve registry identifier in the Curve address provider for a data fetcher\n    event DataFetcherCreated(ICurveAddressProviderLike curveAddressProvider, RegistryId registryId);\n\n    /// @dev Curve address provider contract address is immutable and it’s address will never change.\n    /// We do it configurable to make a code compliant with different networks in the case if \n    /// address will differs for them.\n    /// @param _curveAddressProvider Curve address provider\n    /// @param _id Curve registry identifier. See CurveLPTokensDataTypes.RegistryId\n    constructor(ICurveAddressProviderLike _curveAddressProvider, RegistryId _id) {\n        if (address(_curveAddressProvider) == address(0)) revert EmptyAddressProvider();\n\n        REGISTRY_ID = _id;\n        ADDRESS_PROVIDER = _curveAddressProvider;\n\n        _updateRegistry();\n\n        emit DataFetcherCreated(ADDRESS_PROVIDER, REGISTRY_ID);\n    }\n\n    /// @inheritdoc ICurveLPTokensDetailsFetcher\n    function updateRegistry() external virtual onlyManager() {\n        _updateRegistry();\n    }\n\n    /// @inheritdoc ICurveLPTokensDetailsFetcher\n    function curveLPTokensDetailsFetcherPing() external virtual pure returns (bytes4) {\n        return this.curveLPTokensDetailsFetcherPing.selector;\n    }\n\n    /// @notice Updates a registry address from the Curve address provider\n    /// @dev Reverts if an address is not found or is the same as current address\n    function _updateRegistry() internal {\n        address newRegistry = ADDRESS_PROVIDER.get_address(uint256(REGISTRY_ID));\n\n        if (newRegistry == address(0)) revert RegistryNotFoundById(REGISTRY_ID);\n        if (registry == newRegistry) revert RegistryIsTheSame();\n\n        registry = newRegistry;\n\n        emit RegistryUpdated(newRegistry);\n    }\n}\n"
    },
    "contracts/priceProviders/curveLPTokens/LPTokensDetailsFetchers/CurveRegistriesPoolsManagement.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"./CurveRegistriesBaseFetcher.sol\";\nimport \"../_common/CurveLPTokensDataTypes.sol\";\nimport \"../interfaces/ICurveRegistriesPoolsManagement.sol\";\nimport \"../interfaces/ICurveCryptoSwapRegistryLike.sol\";\n\n/// @title Curve registries pools management\nabstract contract CurveRegistriesPoolsManagement is ICurveRegistriesPoolsManagement, CurveRegistriesBaseFetcher {\n    /// @dev Storage struct with a registered pool details\n    struct RegisteredPool {\n        bool isRegistered; // `true` if a pool is registered in the fetcher\n        bool isMeta; // `true` if a pools is meta pool. Storing it as in some registries\n        // this information is missed, and it is not possible to retrieve it\n    }\n\n    /// pool address => registered pool details\n    mapping(address => RegisteredPool) public registeredPools;\n\n    /// Reverts if a pool address is empty\n    error EmptyPoolAddress();\n    /// Reverts if a pool is already registered in the fetcher\n    error AlreadyRegistered(address pool);\n    /// Reverts if a pool is not registered\n    error PoolIsNotRegistered(address pool);\n    /// Reverts if a pool is not found in the registry\n    error CantResolvePoolInRegistry();\n\n    /// @param _pools A list of pools with details for a fetcher initialization\n    constructor(Pool[] memory _pools) {\n        _addPools(_pools);\n    }\n\n    /// @inheritdoc ICurveRegistriesPoolsManagement\n    function addPools(Pool[] calldata _pools) external virtual onlyManager {\n        _addPools(_pools);\n    }\n\n    /// @inheritdoc ICurveRegistriesPoolsManagement\n    function removePools(address[] calldata _pools) external virtual onlyManager {\n        uint256 i = 0;\n\n        while (i < _pools.length) {\n            address pool = _pools[i];\n\n            if (!registeredPools[pool].isRegistered) revert PoolIsNotRegistered(pool);\n\n            delete registeredPools[pool];\n\n            emit PoolRemoved(pool);\n\n            // Because of the condition `i < _pools.length` we can ignore overflow check\n            unchecked { i++; }\n        }\n    }\n\n    /// @notice Add pools to the fetcher\n    /// @param _pools A list of pools to be added\n    function _addPools(Pool[] memory _pools) internal {\n        uint256 i = 0;\n        ICurveCryptoSwapRegistryLike registry = ICurveCryptoSwapRegistryLike(registry);\n\n        while (i < _pools.length) {\n            Pool memory pool = _pools[i];\n\n            if (pool.addr == address(0)) revert EmptyPoolAddress();\n            if (registeredPools[pool.addr].isRegistered) revert AlreadyRegistered(pool.addr);\n\n            address lpToken = registry.get_lp_token(pool.addr);\n\n            if (lpToken == address(0)) revert CantResolvePoolInRegistry();\n\n            registeredPools[pool.addr] = RegisteredPool({\n                isRegistered: true,\n                isMeta: pool.isMeta\n            });\n\n            emit PoolAdded(pool.addr);\n\n            // Because of the condition `i < _pools.length` we can ignore overflow check\n            unchecked { i++; }\n        }\n    }\n}\n"
    },
    "contracts/priceProviders/curveLPTokens/nonPeggedAssetsPools/CurveLPTokensNPAPBaseCache.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"../_common/CurveLPTokenDetailsBaseCache.sol\";\n\n/// @dev NPAP - non-pegged assets pools\nabstract contract CurveLPTokensNPAPBaseCache is CurveLPTokenDetailsBaseCache {\n    /// @notice Emitted when Curve LP token was enabled in the price provider\n    /// @param pool Pool address of the Curve LP token\n    /// @param token Curve LP token address that has been enabled in the price provider\n    event LPTokenEnabled(address indexed pool, address indexed token);\n\n    /// @dev Revert if the Curve LP tokens detail fetchers repository returned details\n    /// with an `isMeta` flag equal to `true` for the pool with non-pegged assets.\n    error CryptoPoolCantBeMetaPool();\n\n    /// @notice Enable Curve LP token in the price provider\n    /// @dev Reverts if the token is already initialized\n    /// @param _lpToken Curve LP Token address that will be enabled in the price provider\n    function _setupAsset(address _lpToken) internal virtual {\n        if (coins[_lpToken].length != 0) revert TokenAlreadyInitialized();\n\n        bytes memory data; // We'll use it as an `input` and `return` data\n        LPTokenDetails memory details;\n\n        (details, data) = _FETCHERS_REPO.getLPTokenDetails(_lpToken, data);\n\n        if (details.pool.addr == address(0) || details.coins[0] == address(0)) {\n            revert PoolForLPTokenNotFound();\n        }\n\n        if (details.coins.length < _MIN_COINS) revert InvalidNumberOfCoinsInPool();\n\n        // Sanity check to ensure a data validity.\n        // Crypto pools are not meta pools.\n        if (details.pool.isMeta) revert CryptoPoolCantBeMetaPool();\n\n        // For the pools with non-pegged asset we don't need to store all coins\n        // as a price that pool will return will be denominated in the coins[0]\n        PoolCoin memory coin = PoolCoin({ addr: details.coins[0], isLPToken: false });\n\n        // Some of the Curve pools for ether use 'Null Address' which we are not\n        // able to use for the price calculation. To be able to calculate an LP Token\n        // price for this kind of pools we will use wETH address instead.\n        if (coin.addr == _NULL_ADDRESS) {\n            coin.addr = _NATIVE_WRAPPED_ADDRESS;\n        }\n\n        coins[_lpToken].push(coin);\n\n        lpTokenPool[_lpToken] = details.pool;\n\n        emit LPTokenEnabled(lpTokenPool[_lpToken].addr, _lpToken);\n    }\n}\n"
    },
    "contracts/priceProviders/curveLPTokens/nonPeggedAssetsPools/CurveNPAPTokensPriceProvider.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"./CurveLPTokensNPAPBaseCache.sol\";\nimport \"../interfaces/ICurvePoolNonPeggedAssetsLike.sol\";\nimport \"../interfaces/ICurveLPTokensDetailsFetchersRepository.sol\";\nimport \"../interfaces/ICurveLPTokensPriceProvider.sol\";\nimport \"../../_common/PriceProviderPing.sol\";\nimport \"../../_common/PriceProvidersRepositoryQuoteToken.sol\";\nimport \"../../../interfaces/IPriceProvidersRepository.sol\";\n\n/// @title Curve non-pegged pools tokens price provider\n/// @dev NPAP - non-pegged assets pools\ncontract CurveNPAPTokensPriceProvider is\n    CurveLPTokensNPAPBaseCache,\n    PriceProvidersRepositoryQuoteToken,\n    PriceProviderPing,\n    ICurveLPTokensPriceProvider\n{\n    /// @dev Constructor is required for indirect CurveLPTokensPriceProvider initialization.\n    /// Arguments for CurveLPTokensPriceProvider initialization are given in the\n    /// modifier-style in the derived constructor. There are no requirements during\n    /// CurveNPAPTokensPriceProvider deployment, so the constructor body should be empty.\n    constructor(\n        IPriceProvidersRepository _providersRepository,\n        ICurveLPTokensDetailsFetchersRepository _fetchersRepository,\n        address _nullAddr,\n        address _nativeWrappedAddr\n    )\n        PriceProvidersRepositoryManager(_providersRepository)\n        CurveLPTokenDetailsBaseCache(_fetchersRepository, _nullAddr, _nativeWrappedAddr)\n    {\n        // The code will not compile without it. So, we need to keep an empty constructor.\n    }\n\n    /// @inheritdoc ICurveLPTokensPriceProvider\n    function setupAsset(address _lpToken) external virtual onlyManager {\n        _setUpAssetAndEnsureItIsSupported(_lpToken);\n    }\n\n    /// @inheritdoc ICurveLPTokensPriceProvider\n    function setupAssets(address[] calldata _lpTokens) external virtual onlyManager {\n        uint256 i = 0;\n\n        while(i < _lpTokens.length) {\n            _setUpAssetAndEnsureItIsSupported(_lpTokens[i]);\n\n            // Ignoring overflow check as it is impossible\n            // to have more than 2 ** 256 - 1 LP Tokens for initialization.\n            unchecked { i++; }\n        }\n    }\n\n    /// @inheritdoc IPriceProvider\n    function assetSupported(address _lpToken) external virtual view returns (bool) {\n        return lpTokenPool[_lpToken].addr != address(0);\n    }\n\n    /// @param _lpToken Curve LP Token address for which a price to be calculated\n    /// @return Price of the `_lpToken` denominated in the price providers repository quote token\n    function getPrice(address _lpToken) external virtual view returns (uint256) {\n        address pool = lpTokenPool[_lpToken].addr;\n\n        if (pool == address(0)) revert NotSupported();\n        \n        uint256 lpPrice = ICurvePoolNonPeggedAssetsLike(pool).lp_price();\n\n        return _getPrice(_lpToken, lpPrice);\n    }\n\n    /// @notice Enable Curve LP token in the price provider\n    /// @param _lpToken Curve LP Token address that will be enabled in the price provider\n    function _setUpAssetAndEnsureItIsSupported(address _lpToken) internal virtual {\n        _setupAsset(_lpToken);\n        \n        // Ensure that the get price function does not revert for initialized coins\n        // The price providers repository should revert if the provided coin is not supported\n        _priceProvidersRepository.getPrice(coins[_lpToken][0].addr);\n    }\n\n    /// @param _lpToken Curve LP Token address for which a price to be calculated\n    /// @param _lpPrice Curve LP Token price received from the pool's `lp_price` function\n    /// @return price of the `_lpToken` denominated in the price providers repository quote token\n    function _getPrice(address _lpToken, uint256 _lpPrice) internal virtual view returns (uint256 price) {\n        uint256 coinPrice = _priceProvidersRepository.getPrice(coins[_lpToken][0].addr);\n\n        // `_lpToken` price calculation\n        price = coinPrice * _lpPrice;\n\n        // It doesn't make sense to do any math check here because if a `price` < 1e18,\n        // in any case, it will return 0. Otherwise, we are fine.\n        unchecked { price = price / 1e18; }\n\n        // Zero price is unacceptable\n        if (price == 0) revert ZeroPrice();\n    }\n}\n"
    },
    "contracts/priceProviders/curveLPTokens/nonPeggedAssetsPools/CurveNPAPTokensPriceProviderETH.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"./CurveLPTokensNPAPBaseCache.sol\";\nimport \"../interfaces/ICurvePoolNonPeggedAssetsLike.sol\";\nimport \"../interfaces/ICurveLPTokensDetailsFetchersRepository.sol\";\nimport \"../interfaces/ICurveLPTokensPriceProvider.sol\";\nimport \"../../_common/PriceProviderPing.sol\";\nimport \"../../_common/PriceProvidersRepositoryQuoteToken.sol\";\nimport \"../../../interfaces/IPriceProvidersRepository.sol\";\nimport \"./CurveNPAPTokensPriceProvider.sol\";\n\n/// @title Curve non-pegged pools tokens price provider for ethereum network\n/// @notice We have a particular case with the tricrypto2 pool in the Ethereum network,\n/// as it is without the lp_rice() function, and it is implemented in the separate smart contract.\n/// @dev NPAP - non-pegged assets pools\ncontract CurveNPAPTokensPriceProviderETH is CurveNPAPTokensPriceProvider {\n    /// @dev tricrypto2 (USDT/wBTC/ETH) LP Token (Ethereum network)\n    address constant public TRICRYPTO2_LP_TOKEN = 0xc4AD29ba4B3c580e6D59105FFf484999997675Ff;\n    /// @dev tricrypto2 smart contract to provide LP token price (Ethereum network)\n    address constant public TRICRYPTO2_LP_PRICE = 0xE8b2989276E2Ca8FDEA2268E3551b2b4B2418950;\n\n    /// @dev Constructor is required for indirect CurveLPTokensPriceProvider initialization.\n    /// Arguments for CurveLPTokensPriceProvider initialization are given in the\n    /// modifier-style in the derived constructor. There are no requirements during\n    /// CurveNPAPTokensPriceProviderETH deployment, so the constructor body should be empty.\n    constructor(\n        IPriceProvidersRepository _providersRepository,\n        ICurveLPTokensDetailsFetchersRepository _fetchersRepository,\n        address _nullAddr,\n        address _nativeWrappedAddr\n    )\n        CurveNPAPTokensPriceProvider(\n            _providersRepository,\n            _fetchersRepository,\n            _nullAddr,\n            _nativeWrappedAddr\n        )\n    {\n        // The code will not compile without it. So, we need to keep an empty constructor.\n    }\n\n    /// @param _lpToken Curve LP Token address for which a price to be calculated\n    /// @return Price of the `_lpToken` denominated in the price providers repository quote token\n    function getPrice(address _lpToken) external override view returns (uint256) {\n        address pool = lpTokenPool[_lpToken].addr;\n\n        if (pool == address(0)) revert NotSupported();\n\n        // We have a particular case for the tricrypto2 pool, as originally, it didn't support\n        // the `lp_price` function. Because of it, function was implemented in a separate smart contract.\n        address provider = _lpToken == TRICRYPTO2_LP_TOKEN ? TRICRYPTO2_LP_PRICE : pool;\n        uint256 lpPrice = ICurvePoolNonPeggedAssetsLike(provider).lp_price();\n\n        return _getPrice(_lpToken, lpPrice);\n    }\n}\n"
    },
    "contracts/priceProviders/curveLPTokens/peggedAssetsPools/CurveLPTokensPAPBaseCache.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"../_common/CurveLPTokenDetailsBaseCache.sol\";\n\n/// @dev PAP - pegged assets pools\nabstract contract CurveLPTokensPAPBaseCache is CurveLPTokenDetailsBaseCache {\n    /// @dev Revert in the case when we will try to initialize a pool with two LP Tokens\n    /// as Metapools can have only one LP underlying\n    error UnsupportedPoolWithTwoLPs();\n\n    /// @notice Emitted when Curve LP token was enabled in the price provider\n    /// @param pool Pool address of the Curve LP token\n    /// @param token Curve LP token address that has been enabled in the price provider\n    event LPTokenEnabled(address indexed pool, address indexed token);\n\n    /// @notice Enable Curve LP token in the price provider\n    /// @dev Reverts if the token is already initialized\n    /// @param _lpToken Curve LP Token address that will be enabled in the price provider\n    function _setupAsset(address _lpToken) internal {\n        if (coins[_lpToken].length != 0) revert TokenAlreadyInitialized();\n\n        bool result = _setUp(_lpToken);\n\n        if (!result) revert PoolForLPTokenNotFound();\n    }\n\n    /// @notice Enable Curve LP token in the price provider\n    /// @param _lpToken Curve LP Token address that will be enabled in the price provider\n    /// @return `true` if `_lpToken` has been enabled in the price provider, or already\n    /// has been initialized before, `false` if a pool not found for `_lpToken`.\n    function _setUp(address _lpToken) internal returns (bool) {\n        if (coins[_lpToken].length != 0) {\n            // In the case, if `_lpToken` has already been initialized\n            return true;\n        }\n\n        bytes memory data; // We'll use it as an `input` and `return` data\n        LPTokenDetails memory details;\n\n        (details, data) = _FETCHERS_REPO.getLPTokenDetails(_lpToken, data);\n\n        if (details.pool.addr == address(0)) {\n            return false;\n        }\n\n        uint256 i = 0;\n        bool alreadyWithLPToken;\n\n        while (i < details.coins.length) {\n            bool isLPToken = _addCoin(_lpToken, details.coins[i], details.pool.isMeta);\n\n            if (isLPToken && alreadyWithLPToken) revert UnsupportedPoolWithTwoLPs();\n\n            if (!alreadyWithLPToken) {\n                alreadyWithLPToken = isLPToken;\n            }\n\n            // Because of the condition `i < details.coins.length` we can ignore overflow check\n            unchecked { i++; }\n        }\n\n        lpTokenPool[_lpToken] = details.pool;\n\n        if (coins[_lpToken].length < _MIN_COINS) revert InvalidNumberOfCoinsInPool();\n\n        emit LPTokenEnabled(lpTokenPool[_lpToken].addr, _lpToken);\n\n        return true;\n    }\n\n    /// @notice Cache a coin in the price provider storage to avoid\n    /// multiple external requests (save gas) during a price calculation.\n    /// @param _lpToken Curve LP Token address\n    /// @param _coin Coin from the `_lpToken` pool\n    /// @param _isMetaPool `true` if the `_lpToken` pool is meta pool\n    function _addCoin(address _lpToken, address _coin, bool _isMetaPool) internal returns (bool isLPToken) {\n        PoolCoin memory coin = PoolCoin({\n            addr: _coin,\n            // If a pool is a meta pool, it can contain other Curve LP tokens.\n            // We need to try to set up a coin, so we will know if the coin is an LP token or not.\n            isLPToken: _isMetaPool ? _setUp(_coin) : false\n        });\n\n        // Some of the Curve pools for ether use 'Null Address' which we are not\n        // able to use for the price calculation. To be able to calculate an LP Token\n        // price for this kind of pools we will use wETH address instead.\n        if (coin.addr == _NULL_ADDRESS) {\n            coin.addr = _NATIVE_WRAPPED_ADDRESS;\n        }\n\n        coins[_lpToken].push(coin);\n\n        isLPToken = coin.isLPToken;\n    }\n}\n"
    },
    "contracts/priceProviders/curveLPTokens/peggedAssetsPools/CurvePAPTokensPriceProvider.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"./CurveReentrancyCheck.sol\";\nimport \"./CurveLPTokensPAPBaseCache.sol\";\nimport \"../interfaces/ICurvePoolLike.sol\";\nimport \"../interfaces/ICurveLPTokensDetailsFetchersRepository.sol\";\nimport \"../interfaces/ICurveLPTokensPriceProvider.sol\";\nimport \"../../_common/PriceProviderPing.sol\";\nimport \"../../_common/PriceProvidersRepositoryQuoteToken.sol\";\nimport \"../../../interfaces/IPriceProvidersRepository.sol\";\nimport \"../../../lib/MathHelpers.sol\";\n\n/// @title Curve pegged pools tokens price provider\n/// @dev PAP - pegged assets pools\ncontract CurvePAPTokensPriceProvider is\n    CurveReentrancyCheck,\n    CurveLPTokensPAPBaseCache,\n    PriceProvidersRepositoryQuoteToken,\n    PriceProviderPing,\n    ICurveLPTokensPriceProvider\n{\n    using MathHelpers for uint256[];\n\n    /// @dev Maximal number of coins in the Curve pools\n    uint256 constant internal _MAX_NUMBER_OF_COINS = 8;\n\n    /// @dev Revert in the case when the `@nonreentrant('lock')` is activated in the Curve pool\n    error NonreentrantLockIsActive();\n\n    /// @dev Constructor is required for indirect CurveLPTokensPriceProvider initialization.\n    /// Arguments for CurveLPTokensPriceProvider initialization are given in the\n    /// modifier-style in the derived constructor. There are no requirements during\n    /// CurvePAPTokensPriceProvider deployment, so the constructor body should be empty.\n    constructor(\n        IPriceProvidersRepository _providersRepository,\n        ICurveLPTokensDetailsFetchersRepository _fetchersRepository,\n        address _nullAddr,\n        address _nativeWrappedAddr\n    )\n        PriceProvidersRepositoryManager(_providersRepository)\n        CurveLPTokenDetailsBaseCache(_fetchersRepository, _nullAddr, _nativeWrappedAddr)\n    {\n        // The code will not compile without it. So, we need to keep an empty constructor.\n    }\n\n    /// @inheritdoc ICurveReentrancyCheck\n    function setReentrancyVerificationConfig(\n        address _pool,\n        uint128 _gasLimit,\n        N_COINS _nCoins\n    )\n        external\n        virtual\n        onlyManager\n    {\n        _setReentrancyVerificationConfig(_pool, _gasLimit, _nCoins);\n    }\n\n    /// @inheritdoc ICurveLPTokensPriceProvider\n    function setupAsset(address _lpToken) external virtual onlyManager {\n        _setUpAssetAndEnsureItIsSupported(_lpToken);\n    }\n\n    /// @inheritdoc ICurveLPTokensPriceProvider\n    function setupAssets(address[] calldata _lpTokens) external virtual onlyManager {\n        uint256 i = 0;\n\n        while(i < _lpTokens.length) {\n            _setUpAssetAndEnsureItIsSupported(_lpTokens[i]);\n\n            // Ignoring overflow check as it is impossible\n            // to have more than 2 ** 256 - 1 LP Tokens for initialization.\n            unchecked { i++; }\n        }\n    }\n\n    /// @inheritdoc IPriceProvider\n    function assetSupported(address _lpToken) external virtual view returns (bool) {\n        return lpTokenPool[_lpToken].addr != address(0);\n    }\n\n    /// @param _lpToken Curve LP Token address for which a price to be calculated\n    /// @return price of the `_lpToken` denominated in the price providers repository quote token\n    function getPrice(address _lpToken) external virtual view returns (uint256 price) {\n        address pool = lpTokenPool[_lpToken].addr;\n\n        if (pool == address(0)) revert NotSupported();\n\n        if (isLocked(pool)) revert NonreentrantLockIsActive();\n\n        uint256 minPrice = _lpTokenPoolCoinsPrices(_lpToken).minValue();\n        uint256 virtualPrice = ICurvePoolLike(pool).get_virtual_price();\n\n        // `_lpToken` price calculation\n        // Expect a `virtualPrice` to be a value close to 10 ** 18.\n        // So, to have an overflow here a `minPrice` value must be approximately > 10 ** 59.\n        // About the price calculation algorithm:\n        // https://news.curve.fi/chainlink-oracles-and-curve-pools/\n        price = minPrice * virtualPrice;\n\n        // It doesn't make sense to do any math check here because if a `price` < 1e18,\n        // in any case, it will return 0. Otherwise, we are fine.\n        unchecked { price = price / 1e18; }\n\n        // Zero price is unacceptable\n        if (price == 0) revert ZeroPrice();\n    }\n\n    /// @notice Getter that resolves a list of the underlying coins for an LP token pool,\n    /// including coins of LP tokens if it is a metapool.\n    /// @param _lpToken Curve LP Token address for which pool we need to prepare a coins list\n    /// @dev As we don't know the total number of coins in the case with metapool,\n    /// we use a fixed-size array for a return type with a maximum number of coins in the Curve protocol (8).\n    /// In the case of the metapool, we'll ignore LP Tokens and add underlying pool coins instead.\n    /// @return length Total number of coins in the pool\n    /// @return coinsList List of the coins of the LP Tokens pool\n    function getPoolUnderlyingCoins(address _lpToken)\n        public\n        virtual\n        view\n        returns (\n            uint256 length,\n            address[_MAX_NUMBER_OF_COINS] memory coinsList\n        )\n    {\n        PoolCoin[] memory currentPoolCoins = coins[_lpToken];\n        uint256 i = 0;\n\n        while(i < currentPoolCoins.length) {\n            if (currentPoolCoins[i].isLPToken) {\n                (uint256 nestedCoinsLen, address[_MAX_NUMBER_OF_COINS] memory nestedPoolCoins)\n                    = getPoolUnderlyingCoins(currentPoolCoins[i].addr);\n\n                uint256 j = 0;\n\n                while(j < nestedCoinsLen) {\n                    coinsList[length] = nestedPoolCoins[j];\n\n                    // Ignoring overflow check as it is impossible\n                    // to have more than 2 ** 256 - 1 coins in the storage.\n                    unchecked { j++; length++; }\n                }\n\n                // Ignoring overflow check as it is impossible\n                // to have more than 2 ** 256 - 1 coins in the storage.\n                 unchecked { i++; }\n\n                continue;\n            }\n\n            coinsList[length] = currentPoolCoins[i].addr;\n\n            // Ignoring overflow check as it is impossible\n            // to have more than 2 ** 256 - 1 coins in the storage.\n            unchecked { i++; length++; }\n        }\n    }\n\n    /// @notice Enable Curve LP token in the price provider\n    /// @param _lpToken Curve LP Token address that will be enabled in the price provider\n    function _setUpAssetAndEnsureItIsSupported(address _lpToken) internal {\n        _setupAsset(_lpToken);\n        \n        // Ensure that the get price function does not revert for initialized coins\n        uint256 length = coins[_lpToken].length;\n        uint256 i = 0;\n\n        while(i < length) {\n            // The price providers repository should revert if the provided coin is not supported\n            _priceProvidersRepository.getPrice(coins[_lpToken][i].addr);\n\n            // Ignoring overflow check as it is impossible\n            // to have more than 2 ** 256 - 1 coins in the storage.\n            unchecked { i++; }\n        }\n    }\n\n    /// @notice Price is denominated in the quote token\n    /// @param _lpToken Curve LP Token address for which pool coins we must select prices\n    /// @return prices A list of the `_lpToken` pool coins prices\n    function _lpTokenPoolCoinsPrices(address _lpToken) internal view returns (uint256[] memory prices) {\n        uint256 length;\n        address[_MAX_NUMBER_OF_COINS] memory poolCoins;\n\n        (length, poolCoins) = getPoolUnderlyingCoins(_lpToken);\n\n        prices = new uint256[](length);\n        uint256 i = 0;\n\n        while(i < length) {\n            prices[i] = _priceProvidersRepository.getPrice(poolCoins[i]);\n\n            // Ignoring overflow check as it is impossible\n            // to have more than 2 ** 256 - 1 coins in the storage.\n            unchecked { i++; }\n        }\n    }\n}\n"
    },
    "contracts/priceProviders/curveLPTokens/peggedAssetsPools/CurveReentrancyCheck.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"../interfaces/ICurveHackyPool.sol\";\nimport \"../interfaces/ICurveReentrancyCheck.sol\";\n\n/// @title Curve read-only reentrancy check\nabstract contract CurveReentrancyCheck is ICurveReentrancyCheck {\n    struct ReentrancyConfig {\n        uint128 gasLimit;\n        N_COINS nCoins;\n    }\n\n    /// @dev Minimal acceptable gas limit for the check\n    // ~2700 - 5600 when we do a call to an invalid interface (depends on an input data size)\n    // ~1800 if the pool is locked\n    uint256 constant public MIN_GAS_LIMIT = 6500;\n\n    mapping(address => ReentrancyConfig) public poolReentrancyConfig;\n\n    /// @dev Revert if the pool reentrancy config is not configured\n    error MissingPoolReentrancyConfig();\n    /// @dev Revert on the invalid pool configuration\n    error InvalidPoolConfiguration();\n    /// @dev Pool interface validation\n    error InvalidInterface();\n\n    /// @dev Write info the log about the Curve pool reentrancy check config update\n    event ReentrancyCheckConfigUpdated(address _pool, uint256 _gasLimit, N_COINS _nCoins);\n\n    /// @notice Set/Update a pool configuration for the reentrancy check\n    /// @param _pool address\n    /// @param _gasLimit the gas limit to be set on the check execution\n    /// @param _nCoins the number of the coins in the Curve pool (N_COINS)\n    function _setReentrancyVerificationConfig(address _pool, uint128 _gasLimit, N_COINS _nCoins) internal virtual {\n        if (_pool == address(0)) revert InvalidPoolConfiguration();\n        if (_gasLimit < MIN_GAS_LIMIT) revert InvalidPoolConfiguration();\n        if (_nCoins < N_COINS.TWO_COINS) revert InvalidPoolConfiguration();\n\n        poolReentrancyConfig[_pool] = ReentrancyConfig({\n            gasLimit: _gasLimit,\n            nCoins: _nCoins\n        });\n\n        // The call to the pool with an invalid input also reverts with the gas consumption lower\n        // than defined threshold. Approximately 2700 gas for an input with 3 coins and 5600 for 8.\n        // We do a sanity check of the interface by checking if a pool is locked on a setup.\n        // The call to the valid interface will consume more than `MIN_GAS_LIMIT`.\n        if (isLocked(_pool)) revert InvalidInterface();\n\n        emit ReentrancyCheckConfigUpdated(_pool, _gasLimit, _nCoins);\n    }\n\n    /// @notice Verifies if the `lock` is activate on the Curve pool\n    // The idea is to measure the gas consumption of the `remove_liquidity` fn.\n    // solhint-disable-next-line code-complexity\n    function isLocked(address _pool) public virtual view returns (bool) {\n        ReentrancyConfig memory config = poolReentrancyConfig[_pool];\n\n        if (config.gasLimit == 0) revert MissingPoolReentrancyConfig();\n\n        uint256 gasStart = gasleft();\n\n        ICurveHackyPool pool = ICurveHackyPool(_pool);\n\n        if (config.nCoins == N_COINS.TWO_COINS) {\n            uint256[2] memory amounts;\n            try pool.remove_liquidity{gas: config.gasLimit}(0, amounts) {} catch (bytes memory) {}\n        } else if (config.nCoins == N_COINS.THREE_COINS) {\n            uint256[3] memory amounts;\n            try pool.remove_liquidity{gas: config.gasLimit}(0, amounts) {} catch (bytes memory) {}\n        } if (config.nCoins == N_COINS.FOUR_COINS) {\n            uint256[4] memory amounts;\n            try pool.remove_liquidity{gas: config.gasLimit}(0, amounts) {} catch (bytes memory) {}\n        } else if (config.nCoins == N_COINS.FIVE_COINS) {\n            uint256[5] memory amounts;\n            try pool.remove_liquidity{gas: config.gasLimit}(0, amounts) {} catch (bytes memory) {}\n        } else if (config.nCoins == N_COINS.SIX_COINS) {\n            uint256[6] memory amounts;\n            try pool.remove_liquidity{gas: config.gasLimit}(0, amounts) {} catch (bytes memory) {}\n        } else if (config.nCoins == N_COINS.SEVEN_COINS) {\n            uint256[7] memory amounts;\n            try pool.remove_liquidity{gas: config.gasLimit}(0, amounts) {} catch (bytes memory) {}\n        } else if (config.nCoins == N_COINS.EIGHT_COINS) {\n            uint256[8] memory amounts;\n            try pool.remove_liquidity{gas: config.gasLimit}(0, amounts) {} catch (bytes memory) {}\n        }\n\n        uint256 gasSpent;\n        // `gasStart` will be always > `gasleft()`\n        unchecked { gasSpent = gasStart - gasleft(); }\n\n        return gasSpent > config.gasLimit ? false /* is not locked */ : true /* locked */;\n    }\n}\n"
    },
    "contracts/priceProviders/dia/DiaPriceProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\nimport \"../PriceProvider.sol\";\nimport \"../IERC20LikeV2.sol\";\nimport \"../../external/dia/IDIAOracleV2.sol\";\nimport \"../../interfaces/IPriceProviderV2.sol\";\n\ncontract DiaPriceProvider is IPriceProviderV2, PriceProvider {\n    /// @dev price provider needs to return prices in ETH, but assets prices provided by DIA are in USD\n    /// Under ETH_USD_KEY we will find ETH price in USD so we can convert price in USD into price in ETH\n    string public constant ETH_USD_KEY = \"ETH/USD\";\n\n    /// @dev decimals in DIA oracle\n    uint256 public constant DIA_DECIMALS = 1e8;\n\n    /// @dev decimals in Silo protocol\n    uint256 public immutable EXPECTED_DECIMALS; // solhint-disable-line var-name-mixedcase\n\n    /// @dev Oracle deployed for Silo by DIA, all our prices will be submitted to this contract\n    IDIAOracleV2 public immutable DIA_ORACLEV2; // solhint-disable-line var-name-mixedcase\n\n    /// @dev Address of asset that we will be using as reference for USD\n    address public immutable USD_ASSET; // solhint-disable-line var-name-mixedcase\n\n    /// @dev we accessing prices for assets by keys eg. \"Jones/USD\"\n    mapping (address => string) public keys;\n\n    /// @dev asset => fallbackProvider\n    mapping(address => IPriceProvider) public liquidationProviders;\n\n    event AssetSetup(address indexed asset, string key);\n\n    event LiquidationProvider(address indexed asset, IPriceProvider indexed liquidationProvider);\n\n    error MissingETHPrice();\n    error InvalidKey();\n    error CanNotSetEthKey();\n    error OnlyUSDPriceAccepted();\n    error PriceCanNotBeFoundForProvidedKey();\n    error OldPrice();\n    error MissingPriceOrSetup();\n    error LiquidationProviderAlreadySet();\n    error AssetNotSupported();\n    error LiquidationProviderAssetNotSupported();\n    error LiquidationProviderNotExist();\n    error KeyDoesNotMatchSymbol();\n    error FallbackPriceProviderNotSet();\n\n    /// @param _priceProvidersRepository IPriceProvidersRepository\n    /// @param _diaOracle IDIAOracleV2 address of DIA oracle contract\n    /// @param _stableAsset address Address of asset that we will be using as reference for USD\n    /// it has no affect on any price, this is only for be able to getPrice(_usdAsset) using `ETH_USD_KEY` key\n    constructor(\n        IPriceProvidersRepository _priceProvidersRepository,\n        IDIAOracleV2 _diaOracle,\n        address _stableAsset\n    )\n        PriceProvider(_priceProvidersRepository)\n    {\n        EXPECTED_DECIMALS = 10 ** IERC20LikeV2(_priceProvidersRepository.quoteToken()).decimals();\n        USD_ASSET = _stableAsset;\n        DIA_ORACLEV2 = _diaOracle;\n\n        bool allowEthUsdKey = true;\n        _setupAsset(_stableAsset, ETH_USD_KEY, IPriceProvider(address(0)), allowEthUsdKey);\n    }\n\n    /// @inheritdoc IPriceProvider\n    function assetSupported(address _asset) public view virtual override returns (bool) {\n        return bytes(keys[_asset]).length != 0;\n    }\n\n    /// @param _key string under this key asset price will be available in DIA oracle\n    /// @return assetPriceInUsd uint128 asset price\n    /// @return priceUpToDate bool TRUE if price is up to date (acceptable), FALSE otherwise\n    function getPriceForKey(string memory _key)\n        public\n        view\n        virtual\n        returns (uint128 assetPriceInUsd, bool priceUpToDate)\n    {\n        uint128 priceTimestamp;\n        (assetPriceInUsd, priceTimestamp) = DIA_ORACLEV2.getValue(_key);\n\n        // price must be updated at least once every 24h, otherwise something is wrong\n        uint256 oldestAcceptedPriceTimestamp;\n        // block.timestamp is more than 1 day, so we can not underflow\n        unchecked { oldestAcceptedPriceTimestamp = block.timestamp - 1 days; }\n\n        // we not checking assetPriceInUsd != 0, because this is checked on setup, so it will be always some value here\n        priceUpToDate = priceTimestamp > oldestAcceptedPriceTimestamp;\n    }\n\n    function getFallbackPrice(address _asset) public view virtual returns (uint256) {\n        IPriceProvider fallbackProvider = liquidationProviders[_asset];\n\n        if (address(fallbackProvider) != address(0)) {\n            return fallbackProvider.getPrice(_asset);\n        }\n\n        revert FallbackPriceProviderNotSet();\n    }\n\n    /// @inheritdoc IPriceProvider\n    function getPrice(address _asset) public view virtual override returns (uint256) {\n        string memory key = keys[_asset];\n\n        if (bytes(key).length == 0) revert AssetNotSupported();\n\n        (uint128 assetPriceInUsd, bool priceUpToDate) = getPriceForKey(key);\n\n        if (!priceUpToDate) {\n            return getFallbackPrice(_asset);\n        }\n\n        if (_asset == USD_ASSET) {\n            unchecked {\n                // multiplication of decimals is safe, this are small values, division is safe as well\n                return DIA_DECIMALS * EXPECTED_DECIMALS / assetPriceInUsd;\n            }\n        }\n\n        (uint128 ethPriceInUsd, bool ethPriceUpToDate) = getPriceForKey(ETH_USD_KEY);\n\n        if (!ethPriceUpToDate) {\n            return getFallbackPrice(_asset);\n        }\n\n        return normalizePrice(assetPriceInUsd, ethPriceInUsd);\n    }\n\n    /// @dev Asset setup. Can only be called by the manager.\n    /// Explanation from DIA team:\n    ///     Updates will be done every time there is a deviation >1% btw the last onchain update and the current price.\n    ///     We have a 24hrs default update though, so assuming the price remains completely flat you would still get\n    ///     an update every 24hrs.\n    /// @param _asset address Asset to setup\n    /// @param _key string under this key asset price will be available in DIA oracle\n    /// @param _liquidationProvider IPriceProvider on-chain provider that can help with liquidation\n    /// it will not be use for providing price, it is only for liquidation process\n    function setupAsset(\n        address _asset,\n        string calldata _key,\n        IPriceProvider _liquidationProvider\n    ) external virtual onlyManager {\n        validateSymbol(_asset, _key);\n\n        bool allowEthUsdKey;\n        _setupAsset(_asset, _key, _liquidationProvider, allowEthUsdKey);\n    }\n    \n    function setLiquidationProvider(address _asset, IPriceProvider _liquidationProvider) public virtual onlyManager {\n        _setLiquidationProvider(_asset, _liquidationProvider);\n    }\n\n    function removeLiquidationProvider(address _asset) public virtual onlyManager {\n        if (address(0) == address(liquidationProviders[_asset])) revert LiquidationProviderNotExist();\n\n        delete liquidationProviders[_asset];\n\n        emit LiquidationProvider(_asset, IPriceProvider(address(0)));\n    }\n\n    /// @dev for liquidation purposes and for compatibility with naming convention we already using in LiquidationHelper\n    /// we have this method to return on-chain provider that can be useful for liquidation\n    function getFallbackProvider(address _asset) external view virtual returns (IPriceProvider) {\n        return liquidationProviders[_asset];\n    }\n\n    /// @dev _assetPriceInUsd uint128 asset price returned by DIA oracle (8 decimals)\n    /// @dev _ethPriceInUsd uint128 ETH price returned by DIA oracle (8 decimals)\n    /// @return assetPriceInEth uint256 18 decimals price in ETH\n    function normalizePrice(uint128 _assetPriceInUsd, uint128 _ethPriceInUsd)\n        public\n        view\n        virtual\n        returns (uint256 assetPriceInEth)\n    {\n        uint256 withDecimals = _assetPriceInUsd * EXPECTED_DECIMALS;\n\n        unchecked {\n            // div is safe\n            return withDecimals / _ethPriceInUsd;\n        }\n    }\n\n    /// @dev checks if key has expected format.\n    /// Atm provider is accepting only prices in USD, so key must end with \"/USD\".\n    /// If key is invalid function will throw.\n    /// @param _key string DIA key for asset\n    function validateKey(string memory _key) public pure virtual {\n        _validateKey(_key, false);\n    }\n\n    /// @dev checks if key match token symbol. Reverts if does not match.\n    /// @param _asset address Asset to setup\n    /// @param _key string under this key asset price will be available in DIA oracle\n    function validateSymbol(address _asset, string memory _key) public view virtual {\n        bytes memory symbol = bytes(IERC20Metadata(_asset).symbol());\n\n        unchecked {\n            // `+4` for `/USD`, we will never have key with length that will overflow\n            if (symbol.length + 4 != bytes(_key).length) revert KeyDoesNotMatchSymbol();\n\n            // we will never have key with length that will overflow, so i++ is safe\n            for (uint256 i; i < symbol.length; i++) {\n                if (symbol[i] != bytes(_key)[i]) revert KeyDoesNotMatchSymbol();\n            }\n        }\n    }\n\n    /// @dev this is info method for LiquidationHelper\n    /// @return bool TRUE if provider is off-chain, means it is not a dex\n    function offChainProvider() external pure virtual returns (bool) {\n        return true;\n    }\n\n    /// @param _allowEthUsd bool use TRUE only when setting up `ETH_USD_KEY` key, FALSE in all other cases\n    // solhint-disable-next-line code-complexity\n    function _validateKey(string memory _key, bool _allowEthUsd) internal pure virtual {\n        if (!_allowEthUsd) {\n            if (keccak256(abi.encodePacked(_key)) == keccak256(abi.encodePacked(ETH_USD_KEY))) revert CanNotSetEthKey();\n        }\n\n        uint256 keyLength = bytes(_key).length;\n\n        if (keyLength < 5) revert InvalidKey();\n\n        unchecked {\n            // keyLength is at least 5, based on above check, so it is safe to uncheck all below subtractions\n            if (bytes(_key)[keyLength - 4] != \"/\") revert OnlyUSDPriceAccepted();\n            if (bytes(_key)[keyLength - 3] != \"U\") revert OnlyUSDPriceAccepted();\n            if (bytes(_key)[keyLength - 2] != \"S\") revert OnlyUSDPriceAccepted();\n            if (bytes(_key)[keyLength - 1] != \"D\") revert OnlyUSDPriceAccepted();\n        }\n    }\n\n    /// @param _asset Asset to setup\n    /// @param _key string under this key asset price will be available in DIA oracle\n    /// @param _liquidationProvider IPriceProvider on-chain provider that can help with liquidation\n    /// it will not be use for providing price, it is only for liquidation process\n    /// @param _allowEthUsd bool use TRUE only when setting up `ETH_USD_KEY` key, FALSE in all other cases\n    function _setupAsset(\n        address _asset,\n        string memory _key,\n        IPriceProvider _liquidationProvider,\n        bool _allowEthUsd\n    ) internal virtual {\n        _validateKey(_key, _allowEthUsd);\n\n        (uint128 latestPrice, bool priceUpToDate) = getPriceForKey(_key);\n\n        if (latestPrice == 0) revert PriceCanNotBeFoundForProvidedKey();\n        if (!priceUpToDate) revert OldPrice();\n\n        keys[_asset] = _key;\n\n        emit AssetSetup(_asset, _key);\n\n        if (address(_liquidationProvider) != address(0)) {\n            _setLiquidationProvider(_asset, _liquidationProvider);\n        }\n    }\n\n    function _setLiquidationProvider(address _asset, IPriceProvider _liquidationProvider) internal virtual {\n        if (!assetSupported(_asset)) revert AssetNotSupported();\n        if (_liquidationProvider == liquidationProviders[_asset]) revert LiquidationProviderAlreadySet();\n        if (!_liquidationProvider.assetSupported(_asset)) revert LiquidationProviderAssetNotSupported();\n\n        liquidationProviders[_asset] = _liquidationProvider;\n\n        emit LiquidationProvider(_asset, _liquidationProvider);\n    }\n}\n"
    },
    "contracts/priceProviders/forwarder/ForwarderPriceProvider.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"../PriceProvider.sol\";\nimport \"../../interfaces/IPriceProvidersRepository.sol\";\n\n/// @title ForwarderPriceProvider\n/// @notice ForwarderPriceProvider is used to register the price of one token as the price source for another token.\n///     For example, wrapped token price is equal to underlying token price, because it can be wrapped or\n///     unwrapped with 1:1 ratio any time.\n/// @custom:security-contact security@silo.finance\ncontract ForwarderPriceProvider is PriceProvider {\n    /// @dev Token to get price, does not have pool => token that has price provider, used as the price source.\n    mapping(address => address) public priceSourceAssets;\n\n    event AssetRegistered(address indexed asset, address indexed priceSourceAsset);\n    event AssetRemoved(address indexed asset);\n\n    /// @dev Revert when price source for an asset does not exist.\n    error AssetNotSupported();\n\n    /// @dev Asset can't be it's own price source asset.\n    error AssetEqualToSource();\n\n    /// @dev Revert when price source is registered in `ForwarderPriceProvider` to prevent circular dependency.\n    error DoubleForwardingIsNotAllowed();\n\n    /// @dev Revert when price source asset does not have price in `PriceProvidersRepository`.\n    error PriceSourceIsNotReady();\n\n    /// @dev Revert `removeAsset` when `ForwarderPriceProvider` is registered as the price provider for an asset.\n    error RemovingAssetWhenRegisteredInRepository();\n\n    constructor(IPriceProvidersRepository _priceProvidersRepository) PriceProvider(_priceProvidersRepository) {}\n\n    /// @inheritdoc IPriceProvider\n    function getPrice(address _asset) public view virtual override returns (uint256) {\n        address priceSourceAsset = priceSourceAssets[_asset];\n\n        if (priceSourceAsset == address(0)) revert AssetNotSupported();\n\n        return priceProvidersRepository.getPrice(priceSourceAsset);\n    }\n\n    /// @notice Register `_asset` price as the price of `_priceSourceAsset`\n    /// @dev We don't allow price source asset to be registered in `ForwarderPriceProvider` to\n    ///     prevent circular dependency. If the price source asset has price forwarded too, use the\n    ///     original source instead. Does not revert for duplicate calls with the same arguments.\n    /// @param _asset address, can be already registered in `ForwarderPriceProvider`\n    /// @param _priceSourceAsset address, it's price must be available in `PriceProvidersRepository`\n    function setupAsset(address _asset, address _priceSourceAsset) external virtual onlyManager {\n        if (_asset == _priceSourceAsset) revert AssetEqualToSource();\n        if (priceSourceAssets[_priceSourceAsset] != address(0)) revert DoubleForwardingIsNotAllowed();\n        if (!priceProvidersRepository.providersReadyForAsset(_priceSourceAsset)) revert PriceSourceIsNotReady();\n\n        priceSourceAssets[_asset] = _priceSourceAsset;\n\n        emit AssetRegistered(_asset, _priceSourceAsset);\n    }\n\n    /// @notice Removes asset from this price provider. `ForwarderPriceProvider` must not be registered\n    ///     as the price provider for an `_asset` in `PriceProvidersRepository`.\n    /// @param _asset address\n    function removeAsset(address _asset) external virtual onlyManager {\n        if (address(priceProvidersRepository.priceProviders(_asset)) == address(this)) {\n            revert RemovingAssetWhenRegisteredInRepository();\n        }\n\n        priceSourceAssets[_asset] = address(0);\n        emit AssetRemoved(_asset);\n    }\n\n    /// @notice Returns true, if asset has other token price as the price source\n    /// @param _asset address\n    function assetSupported(address _asset) public view virtual override returns (bool) {\n        return priceSourceAssets[_asset] != address(0);\n    }\n}\n"
    },
    "contracts/priceProviders/gOHM/GOHMPriceProvider.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"../IndividualPriceProvider.sol\";\n\n/// @dev Simplified version of the gOHM token interface with the method that is required for the gOHM price calculation.\ninterface IgOHMLike {\n    /// @dev Rebase index, 1e9 base unit is used.\n    function index() external view returns (uint256);\n}\n\n/// @title GOHMPriceProvider\n/// @notice GOHMPriceProvider is the price provider for gOHM token. Price calculations depends\n/// on the price of OHMv2. Price providers repository must be ready to provide the OHMv2 price.\n/// @custom:security-contact security@silo.finance\ncontract GOHMPriceProvider is IndividualPriceProvider {\n    /// @dev Base units for the rebase index value\n    uint256 public constant OHM_INDEX_BASE_UNITS = 1e9;\n\n    /// @dev Original token, OHMv2.\n    // solhint-disable-next-line var-name-mixedcase\n    address public immutable OHM;\n\n    error AssetNotSupported();\n    error IndexFunctionNotSupported();\n    error InvalidOHMAddress();\n\n    /// @dev Inside constructor there is a check of gOHM address.\n    constructor(\n        IPriceProvidersRepository _priceProvidersRepository,\n        address _ohm,\n        address _gOhm\n    ) IndividualPriceProvider(_priceProvidersRepository, _gOhm, \"gOHM\") {\n        // Sanity check to verify if gOHM token `index` method will return data and will not revert.\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory data) = _gOhm.staticcall(abi.encodeCall(IgOHMLike.index, ()));\n        if (!success || data.length == 0) revert IndexFunctionNotSupported();\n\n        if (keccak256(abi.encode(TokenHelper.symbol(_ohm))) != keccak256(abi.encode(\"OHM\"))) {\n            revert InvalidOHMAddress();\n        }\n\n        OHM = _ohm;\n    }\n\n    /// @notice Returns the current index of rebasing token per one wrapped token (total amount of rebases) in\n    /// OHM_INDEX_BASE_UNITS\n    function index() external view virtual returns (uint256) {\n        return IgOHMLike(ASSET).index();\n    }\n\n    /// @inheritdoc IPriceProvider\n    function getPrice(address _asset) public view virtual override returns (uint256 gOhmPrice) {\n        if (!assetSupported(_asset)) revert AssetNotSupported();\n\n        gOhmPrice = priceProvidersRepository.getPrice(OHM) * IgOHMLike(ASSET).index();\n\n        // We can uncheck safely to save some gas. OHM_INDEX_BASE_UNITS is a non-zero constant number.\n        unchecked {\n            gOhmPrice = gOhmPrice / OHM_INDEX_BASE_UNITS;\n        }\n    }\n}\n"
    },
    "contracts/priceProviders/IERC20LikeV2.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.7.6;\n\n/// @dev This is only meant to be used by price providers, which use a different\n/// Solidity version than the rest of the codebase. This way de won't need to include\n/// an additional version of OpenZeppelin's library.\ninterface IERC20LikeV2 {\n    function decimals() external view returns (uint8);\n    function balanceOf(address) external view returns(uint256);\n}\n"
    },
    "contracts/priceProviders/IERC20LikeV3.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.7.6;\n\n/// @dev This is only meant to be used by price providers, which use a different\n/// Solidity version than the rest of the codebase. This way de won't need to include\n/// an additional version of OpenZeppelin's library.\ninterface IERC20LikeV3 {\n    function decimals() external view returns (uint8);\n    function balanceOf(address) external view returns(uint256);\n    function symbol() external view returns(string memory);\n}\n"
    },
    "contracts/priceProviders/IndividualPriceProvider.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"./PriceProvider.sol\";\nimport \"./../lib/TokenHelper.sol\";\n\n/// @title IndividualPriceProvider\n/// @notice IndividualPriceProvider\n/// @custom:security-contact security@silo.finance\nabstract contract IndividualPriceProvider is PriceProvider {\n    // solhint-disable-next-line var-name-mixedcase\n    address public immutable ASSET;\n\n    error InvalidAssetAddress();\n\n    constructor(\n        IPriceProvidersRepository _priceProvidersRepository,\n        address _asset,\n        string memory _symbol\n    ) PriceProvider(_priceProvidersRepository) {\n        if (keccak256(abi.encode(TokenHelper.symbol(_asset))) != keccak256(abi.encode(_symbol))) {\n            revert InvalidAssetAddress();\n        }\n\n        ASSET = _asset;\n    }\n\n    /// @notice Only ASSET token is supported, false otherwise.\n    /// @param _asset address of an asset\n    function assetSupported(address _asset) public view virtual override returns (bool) {\n        return _asset == ASSET;\n    }\n}\n"
    },
    "contracts/priceProviders/PriceProvider.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.7.6 <0.9.0;\n\nimport \"../lib/Ping.sol\";\nimport \"../interfaces/IPriceProvider.sol\";\nimport \"../interfaces/IPriceProvidersRepository.sol\";\n\n/// @title PriceProvider\n/// @notice Abstract PriceProvider contract, parent of all PriceProviders\n/// @dev Price provider is a contract that directly integrates with a price source, ie. a DEX or alternative system\n/// like Chainlink to calculate TWAP prices for assets. Each price provider should support a single price source\n/// and multiple assets.\nabstract contract PriceProvider is IPriceProvider {\n    /// @notice PriceProvidersRepository address\n    IPriceProvidersRepository public immutable priceProvidersRepository;\n\n    /// @notice Token address which prices are quoted in. Must be the same as PriceProvidersRepository.quoteToken\n    address public immutable override quoteToken;\n\n    modifier onlyManager() {\n        if (priceProvidersRepository.manager() != msg.sender) revert(\"OnlyManager\");\n        _;\n    }\n\n    /// @param _priceProvidersRepository address of PriceProvidersRepository\n    constructor(IPriceProvidersRepository _priceProvidersRepository) {\n        if (\n            !Ping.pong(_priceProvidersRepository.priceProvidersRepositoryPing)            \n        ) {\n            revert(\"InvalidPriceProviderRepository\");\n        }\n\n        priceProvidersRepository = _priceProvidersRepository;\n        quoteToken = _priceProvidersRepository.quoteToken();\n    }\n\n    /// @inheritdoc IPriceProvider\n    function priceProviderPing() external pure override returns (bytes4) {\n        return this.priceProviderPing.selector;\n    }\n\n    function _revertBytes(bytes memory _errMsg, string memory _customErr) internal pure {\n        if (_errMsg.length > 0) {\n            assembly { // solhint-disable-line no-inline-assembly\n                revert(add(32, _errMsg), mload(_errMsg))\n            }\n        }\n\n        revert(_customErr);\n    }\n}\n"
    },
    "contracts/priceProviders/wstETH/WSTETHPriceProvider.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"../IndividualPriceProvider.sol\";\nimport \"./../../lib/TokenHelper.sol\";\n\ninterface IStETHLike {\n    function getPooledEthByShares(uint256 _sharesAmount) external view returns (uint256);\n}\n\n/// @title WSTETHPriceProvider\n/// @notice WSTETHPriceProvider is the price provider for wstETH token. Price calculations depends\n/// on the price of stETH. Price providers repository must be ready to provide the stETH price.\n/// @custom:security-contact security@silo.finance\ncontract WSTETHPriceProvider is IndividualPriceProvider {\n    // solhint-disable-next-line var-name-mixedcase\n    IStETHLike public immutable STETH;\n\n    error AssetNotSupported();\n    error InvalidSTETHAddress();\n    error InvalidWSTETHAddress();\n\n    constructor(\n        IPriceProvidersRepository _priceProvidersRepository,\n        IStETHLike _stETH,\n        address _wstETH\n    ) IndividualPriceProvider(_priceProvidersRepository, _wstETH, \"wstETH\") {\n        if (keccak256(abi.encode(TokenHelper.symbol(address(_stETH)))) != keccak256(abi.encode(\"stETH\"))) {\n            revert InvalidSTETHAddress();\n        }\n\n        STETH = _stETH;\n    }\n\n    /// @inheritdoc IPriceProvider\n    function getPrice(address _asset) public view virtual override returns (uint256 price) {\n        if (!assetSupported(_asset)) revert AssetNotSupported();\n\n        // solhint-disable-next-line var-name-mixedcase\n        uint256 ETHPerStETH = priceProvidersRepository.getPrice(address(STETH));\n\n        uint256 stETHPerWstETH = STETH.getPooledEthByShares(1 ether);\n\n        // Amount of ETH per stETH * Amount of stETH per wstETH = Amount of ETH per wstETH\n        return ETHPerStETH * stETHPerWstETH / 1e18;\n    }\n}\n"
    },
    "contracts/PriceProvidersRepository.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\nimport \"./interfaces/IPriceProvidersRepository.sol\";\nimport \"./interfaces/ISiloRepository.sol\";\nimport \"./utils/Manageable.sol\";\nimport \"./utils/TwoStepOwnable.sol\";\n\nimport \"./lib/TokenHelper.sol\";\nimport \"./lib/Ping.sol\";\n\n/// @title PriceProvidersRepository\n/// @notice A repository of price providers. It manages price providers as well as maps assets to their price\n/// provider. It acts as a entry point for Silo for token prices.\n/// @custom:security-contact security@silo.finance\ncontract PriceProvidersRepository is IPriceProvidersRepository, Manageable, TwoStepOwnable {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    /// @dev we require quote token to have 18 decimals\n    uint256 public constant QUOTE_TOKEN_DECIMALS = 18;\n\n    /// @dev Constant used for prices' decimal points, 1e18 is treated as 1\n    uint256 private constant _ONE = 1e18;\n\n    /// @notice SiloRepository contract address\n    address public immutable siloRepository;\n    /// @notice Token in which prices are quoted. It's most likely WETH, however it could vary from deployment\n    /// to deployment. For example 1 SILO costs X amount of quoteToken.\n    address public immutable override quoteToken;\n\n    /// @notice Maps asset address to its price provider\n    /// @dev Each asset must have a price provider contract assigned, otherwise it's not supported\n    mapping(address => IPriceProvider) public override priceProviders;\n\n    /// @notice Array of all price providers\n    EnumerableSet.AddressSet private _allProviders;\n\n    error AssetNotSupported();\n    error InvalidPriceProvider();\n    error InvalidPriceProviderQuoteToken();\n    error InvalidRepository();\n    error OnlyRepository();\n    error PriceProviderAlreadyExists();\n    error PriceProviderDoesNotExist();\n    error PriceProviderNotRegistered();\n    error QuoteTokenNotSupported();\n\n    modifier onlyRepository() {\n        if (msg.sender != siloRepository) revert OnlyRepository();\n        _;\n    }\n\n    /// @param _quoteToken address of quote token\n    /// @param _siloRepository address of SiloRepository\n    constructor(address _quoteToken, address _siloRepository) Manageable(msg.sender) {\n        if (TokenHelper.assertAndGetDecimals(_quoteToken) != QUOTE_TOKEN_DECIMALS) {\n          revert QuoteTokenNotSupported();\n        }\n\n        if (!Ping.pong(ISiloRepository(_siloRepository).siloRepositoryPing)) {\n            revert InvalidRepository();\n        }\n\n        siloRepository = _siloRepository;\n        quoteToken = _quoteToken;\n    }\n\n    /// @inheritdoc IPriceProvidersRepository\n    function addPriceProvider(IPriceProvider _provider) external override onlyOwner {\n        if (!Ping.pong(_provider.priceProviderPing)) revert InvalidPriceProvider();\n\n        if (_provider.quoteToken() != quoteToken) revert InvalidPriceProviderQuoteToken();\n\n        if (!_allProviders.add(address(_provider))) revert PriceProviderAlreadyExists();\n\n        emit NewPriceProvider(_provider);\n    }\n\n    /// @inheritdoc IPriceProvidersRepository\n    function removePriceProvider(IPriceProvider _provider) external virtual override onlyOwner {\n        if (!_allProviders.remove(address(_provider))) revert PriceProviderDoesNotExist();\n\n        emit PriceProviderRemoved(_provider);\n    }\n\n    /// @inheritdoc IPriceProvidersRepository\n    function setPriceProviderForAsset(address _asset, IPriceProvider _provider) external virtual override onlyManager {\n        if (!_allProviders.contains(address(_provider))) {\n            revert PriceProviderNotRegistered();\n        }\n\n        if (!_provider.assetSupported(_asset)) revert AssetNotSupported();\n\n        emit PriceProviderForAsset(_asset, _provider);\n        priceProviders[_asset] = _provider;\n    }\n\n    /// @inheritdoc IPriceProvidersRepository\n    function isPriceProvider(IPriceProvider _provider) external view override returns (bool) {\n        return _allProviders.contains(address(_provider));\n    }\n\n    /// @inheritdoc IPriceProvidersRepository\n    function providersCount() external view override returns (uint256) {\n        return _allProviders.length();\n    }\n\n    /// @inheritdoc IPriceProvidersRepository\n    function providerList() external view override returns (address[] memory) {\n        return _allProviders.values();\n    }\n\n    /// @inheritdoc IPriceProvidersRepository\n    function providersReadyForAsset(address _asset) external view override returns (bool) {\n        // quote token is supported by default because getPrice() returns _ONE as its price by default\n        if (_asset == quoteToken) return true;\n\n        IPriceProvider priceProvider = priceProviders[_asset];\n        if (address(priceProvider) == address(0)) return false;\n\n        return priceProvider.assetSupported(_asset);\n    }\n\n    /// @inheritdoc IPriceProvidersRepository\n    function priceProvidersRepositoryPing() external pure override returns (bytes4) {\n        return this.priceProvidersRepositoryPing.selector;\n    }\n\n    /// @inheritdoc IPriceProvidersRepository\n    function manager() public view override(Manageable, IPriceProvidersRepository) returns (address) {\n        return Manageable.manager();\n    }\n\n    /// @inheritdoc TwoStepOwnable\n    function owner() public view override(Manageable, TwoStepOwnable) returns (address) {\n        return TwoStepOwnable.owner();\n    }\n\n    /// @inheritdoc IPriceProvidersRepository\n    function getPrice(address _asset) public view override virtual returns (uint256) {\n        if (_asset == quoteToken) return _ONE;\n\n        if (address(priceProviders[_asset]) == address(0)) revert AssetNotSupported();\n\n        return priceProviders[_asset].getPrice(_asset);\n    }\n}\n"
    },
    "contracts/SiloCollateralOnly.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"./SiloV2.sol\";\n\n/// @notice Modification of the Silo where a siloAsset can be deposited\n/// only as collateral only asset and can't be borrowed.\n/// Such assets as Curve LP Tokens should be added only with trusted underlying pool assets.\n/// Otherwise, we should consider a possibility of the Read-Only Reentrancy attack on a Curve Oracle.\n/// More about attack vector and solution on how to avoid it:\n/// https://chainsecurity.com/curve-lp-oracle-manipulation-post-mortem/\ncontract SiloCollateralOnly is SiloV2 {\n    /// @dev Revert if deposit/withdraw operations performed with a silo asset are\n    /// not marked as collateral only\n    error SiloAssetIsCollateralOnly();\n\n    /// @dev Revert on a deposit with a silo asset marked as not collateral only\n    /// @dev Revert on a withdrawal if a silo asset will be withdrawn as not collateral only\n    /// @param _asset Asset to be deposited/withdrawn into/from the silo\n    /// @param _collateralOnly Flag whether the deposit/withtrawal is collateral only or not\n    modifier assetIsCollateralOnly(address _asset, bool _collateralOnly) {\n        if (_asset == siloAsset && !_collateralOnly) revert SiloAssetIsCollateralOnly();\n        _;\n    }\n\n    constructor (ISiloRepository _repository, address _siloAsset, uint128 _version)\n        SiloV2(_repository, _siloAsset, _version)\n    {\n        // initial setup is done in BaseSilo, nothing to do here\n    }\n\n    /// @inheritdoc ISilo\n    function deposit(address _asset, uint256 _amount, bool _collateralOnly)\n        external\n        virtual\n        override\n        assetIsCollateralOnly(_asset, _collateralOnly)\n        returns (uint256 collateralAmount, uint256 collateralShare)\n    {\n        return _deposit(_asset, msg.sender, msg.sender, _amount, _collateralOnly);\n    }\n\n    /// @inheritdoc ISilo\n    function depositFor(\n        address _asset,\n        address _depositor,\n        uint256 _amount,\n        bool _collateralOnly\n    )\n        external\n        virtual\n        override\n        assetIsCollateralOnly(_asset, _collateralOnly)\n        returns (uint256 collateralAmount, uint256 collateralShare)\n    {\n        return _deposit(_asset, msg.sender, _depositor, _amount, _collateralOnly);\n    }\n\n    /// @inheritdoc ISilo\n    function withdraw(address _asset, uint256 _amount, bool _collateralOnly)\n        external\n        virtual\n        override\n        assetIsCollateralOnly(_asset, _collateralOnly)\n        returns (uint256 withdrawnAmount, uint256 withdrawnShare)\n    {\n        return _withdraw(_asset, msg.sender, msg.sender, _amount, _collateralOnly);\n    }\n\n    /// @inheritdoc ISilo\n    function withdrawFor(\n        address _asset,\n        address _depositor,\n        address _receiver,\n        uint256 _amount,\n        bool _collateralOnly\n    )\n        external\n        virtual\n        override\n        onlyRouter\n        assetIsCollateralOnly(_asset, _collateralOnly)\n        returns (uint256 withdrawnAmount, uint256 withdrawnShare)\n    {\n        return _withdraw(_asset, _depositor, _receiver, _amount, _collateralOnly);\n    }\n\n        /// @inheritdoc ISilo\n    function borrow(address _asset, uint256 _amount)\n        external\n        virtual\n        override\n        returns (uint256 debtAmount, uint256 debtShare)\n    {\n        // Revert on a attempt to borrow a Silo asset.\n        if (_isSiloAsset(_asset)) revert(); // solhint-disable-line reason-string\n\n        return _borrow(_asset, msg.sender, msg.sender, _amount);\n    }\n\n    /// @inheritdoc ISilo\n    function borrowFor(address _asset, address _borrower, address _receiver, uint256 _amount)\n        external\n        virtual\n        override\n        onlyRouter\n        returns (uint256 debtAmount, uint256 debtShare)\n    {\n        // Revert on a attempt to borrow a Silo asset.\n        if (_isSiloAsset(_asset)) revert(); // solhint-disable-line reason-string\n\n        return _borrow(_asset, _borrower, _receiver, _amount);\n    }\n\n    /// @dev Check if the asset is the silo asset\n    /// @param _asset Asset to be deposited/withdrawn into/from the silo\n    function _isSiloAsset(address _asset) internal view returns (bool) {\n        return _asset == siloAsset;\n    }\n}\n"
    },
    "contracts/SiloConvex.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"./SiloV2.sol\";\nimport \"./interfaces/ISiloConvexStateChangesHandler.sol\";\n\n/// @notice Modification of the Silo for ConvexSiloWrapper tokens.\n/// The Silo asset can be used only as a collateral only asset and can't be borrowed. Convex rewards are checkpointed\n/// for the user on every collateral state change.\ncontract SiloConvex is SiloV2 {\n    /// @dev Checkpoints user's rewards, verifies the ConvexSiloWrapper setup. This code can not be implemented in\n    /// Silo contract because of the smart contract bytecode limit.\n    // solhint-disable-next-line var-name-mixedcase\n    ISiloConvexStateChangesHandler internal immutable _STATE_CHANGES_HANDLER;\n\n    /// @dev Revert when Silo asset is not a ConvexSiloWrapper. Also reverts when the Curve pool can not be fetched for\n    /// the underlying Curve LP token.\n    error InvalidWrapper();\n\n    /// @dev Revert when Silo asset is being borrowed, that is prohibited.\n    error SiloAssetBorrowed();\n\n    constructor (\n        ISiloRepository _repository,\n        ISiloConvexStateChangesHandler _stateChangesHandler,\n        address _siloAsset,\n        uint128 _version\n    )\n        SiloV2(_repository, _siloAsset, _version)\n    {\n        _STATE_CHANGES_HANDLER = _stateChangesHandler;\n\n        if (!_stateChangesHandler.wrapperSetupVerification(_siloAsset)) revert InvalidWrapper();\n    }\n\n    /// @inheritdoc ISilo\n    function deposit(address _asset, uint256 _amount, bool _collateralOnly)\n        external\n        virtual\n        override\n        returns (uint256 collateralAmount, uint256 collateralShare)\n    {\n        // IMPORTANT - keep `_beforeBalanceUpdate` at the beginning of the function\n        _beforeBalanceUpdate(msg.sender, address(0));\n        _assetIsCollateralOnly(_asset, _collateralOnly);\n\n        return _deposit(_asset, msg.sender, msg.sender, _amount, _collateralOnly);\n    }\n\n    /// @inheritdoc ISilo\n    function depositFor(\n        address _asset,\n        address _depositor,\n        uint256 _amount,\n        bool _collateralOnly\n    )\n        external\n        virtual\n        override\n        returns (uint256 collateralAmount, uint256 collateralShare)\n    {\n        // IMPORTANT - keep `_beforeBalanceUpdate` at the beginning of the function\n        _beforeBalanceUpdate(msg.sender, _depositor);\n        _assetIsCollateralOnly(_asset, _collateralOnly);\n\n        return _deposit(_asset, msg.sender, _depositor, _amount, _collateralOnly);\n    }\n\n    /// @inheritdoc ISilo\n    function withdraw(address _asset, uint256 _amount, bool _collateralOnly)\n        external\n        virtual\n        override\n        returns (uint256 withdrawnAmount, uint256 withdrawnShare)\n    {\n        // IMPORTANT - keep `_beforeBalanceUpdate` at the beginning of the function\n        _beforeBalanceUpdate(msg.sender, address(0));\n\n        return _withdraw(_asset, msg.sender, msg.sender, _amount, _collateralOnly);\n    }\n\n    /// @inheritdoc ISilo\n    function withdrawFor(\n        address _asset,\n        address _depositor,\n        address _receiver,\n        uint256 _amount,\n        bool _collateralOnly\n    )\n        external\n        virtual\n        override\n        onlyRouter\n        returns (uint256 withdrawnAmount, uint256 withdrawnShare)\n    {\n        // IMPORTANT - keep `_beforeBalanceUpdate` at the beginning of the function\n        _beforeBalanceUpdate(_depositor, _receiver);\n\n        return _withdraw(_asset, _depositor, _receiver, _amount, _collateralOnly);\n    }\n\n    /// @inheritdoc ISilo\n    function borrow(address _asset, uint256 _amount)\n        external\n        virtual\n        override\n        returns (uint256 debtAmount, uint256 debtShare)\n    {\n        // Revert on a attempt to borrow a Silo asset.\n        if (_isSiloAsset(_asset)) revert SiloAssetBorrowed();\n\n        return _borrow(_asset, msg.sender, msg.sender, _amount);\n    }\n\n    /// @inheritdoc ISilo\n    function borrowFor(address _asset, address _borrower, address _receiver, uint256 _amount)\n        external\n        virtual\n        override\n        onlyRouter\n        returns (uint256 debtAmount, uint256 debtShare)\n    {\n        // Revert on a attempt to borrow a Silo asset.\n        if (_isSiloAsset(_asset)) revert SiloAssetBorrowed();\n\n        return _borrow(_asset, _borrower, _receiver, _amount);\n    }\n\n    /// @inheritdoc ISilo\n    function flashLiquidate(address[] calldata _users, bytes calldata _flashReceiverData)\n        external\n        virtual\n        override\n        returns (\n            address[] memory assets,\n            uint256[][] memory receivedCollaterals,\n            uint256[][] memory shareAmountsToRepay\n        )\n    {\n        assets = getAssets();\n        uint256 usersLength = _users.length;\n        receivedCollaterals = new uint256[][](usersLength);\n        shareAmountsToRepay = new uint256[][](usersLength);\n\n        for (uint256 i = 0; i < usersLength;) {\n            // IMPORTANT - keep `_beforeBalanceUpdate` here and do not add any new actions before\n            // this function call. This function can not be moved outside of a loop, otherwise the contract size limit\n            // will be exceeded.\n            _beforeBalanceUpdate(_users[i], address(0));\n\n            (\n                receivedCollaterals[i],\n                shareAmountsToRepay[i]\n            ) = _userLiquidation(assets, _users[i], IFlashLiquidationReceiver(msg.sender), _flashReceiverData);\n\n            // `i` has the same type as `usersLength`.\n            // Because of the condition `i < usersLength` overflow is not possible\n            unchecked { i++; }\n        }\n    }\n\n    /// @notice Rewards checkpoint\n    /// @dev It is not possible to pass an array of addresses to checkpoint because of the smart contract size limit.\n    /// Both parameters can be zero, checkpointing will be skipped in this case.\n    /// @param _firstToCheckpoint address to checkpoint, can be zero.\n    /// @param _secondToCheckpoint address to checkpoint, can be zero.\n    function _beforeBalanceUpdate(address _firstToCheckpoint, address _secondToCheckpoint) internal virtual {\n        _STATE_CHANGES_HANDLER.beforeBalanceUpdate(_firstToCheckpoint, _secondToCheckpoint);\n    }\n\n    /// @dev Revert on a deposit with a silo asset marked as not collateral only\n    /// @dev Revert on a withdrawal if a silo asset will be withdrawn as not collateral only\n    /// @param _asset Asset to be deposited/withdrawn into/from the silo\n    /// @param _collateralOnly Flag whether the deposit/withdrawal is collateral only or not\n    function _assetIsCollateralOnly(address _asset, bool _collateralOnly) internal virtual view {\n        // We can't revert with reason string, because the revert reason will cause the size of this contract to exceed\n        // the gas limit.\n        if (_isSiloAsset(_asset) && !_collateralOnly) revert(); // solhint-disable-line reason-string\n    }\n\n    /// @dev Check if the asset is the silo asset\n    /// @param _asset Asset to be deposited/withdrawn into/from the silo\n    function _isSiloAsset(address _asset) internal view returns (bool) {\n        return _asset == siloAsset;\n    }\n}\n"
    },
    "contracts/siloFactories/SiloCollateralOnlyFactory.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"../SiloCollateralOnly.sol\";\nimport \"./SiloFactoryV2.sol\";\n\n/// @title SiloCollateralOnlyFactory\n/// @notice Silo Factory has one job, deploy Silo implementation\n/// @dev Silo Factory is registered within SiloRepository contract and it's given a version. Each version\n/// is different Silo Factory that deploys different Silo implementation. Many Factory contracts can be\n/// registered with the Repository contract.\n/// @custom:security-contact security@silo.finance\ncontract SiloCollateralOnlyFactory is SiloFactoryV2 {\n    /// @param _repository A silo repository address\n    constructor(address _repository) SiloFactoryV2(_repository) {\n        // initial setup is done in SiloFactoryV2, nothing to do here\n    }\n\n    /// @inheritdoc ISiloFactoryV2\n    function createSilo(\n        address _siloAsset,\n        uint128 _version,\n        bytes memory\n    )\n        external\n        virtual\n        override\n        returns (address silo)\n    {\n        // Only allow silo repository\n        if (msg.sender != siloRepository) revert OnlyRepository();\n\n        silo = address(new SiloCollateralOnly(ISiloRepository(msg.sender), _siloAsset, _version));\n        emit NewSiloCreated(silo, _siloAsset, _version);\n    }\n}\n"
    },
    "contracts/siloFactories/SiloConvexFactory.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"../SiloConvex.sol\";\nimport \"./SiloFactoryV2.sol\";\n\n/// @title SiloConvexFactory\n/// @notice Silo Factory has one job, deploy Silo implementation\n/// @dev Silo Factory is registered within SiloRepository contract and it's given a version. Each version\n/// is different Silo Factory that deploys different Silo implementation. Many Factory contracts can be\n/// registered with the Repository contract.\n/// @custom:security-contact security@silo.finance\ncontract SiloConvexFactory is SiloFactoryV2 {\n    // solhint-disable-next-line var-name-mixedcase\n    ISiloConvexStateChangesHandler internal immutable _STATE_CHANGES_HANDLER;\n\n    /// @param _repository A silo repository address\n    constructor(\n        address _repository,\n        ISiloConvexStateChangesHandler _stateChangesHandler\n    ) SiloFactoryV2(_repository) {\n        // Ping library call is not possible here, because the contract will exceed the gas limit.\n        _STATE_CHANGES_HANDLER = _stateChangesHandler;\n    }\n\n    /// @inheritdoc ISiloFactoryV2\n    function createSilo(\n        address _siloAsset,\n        uint128 _version,\n        bytes memory\n    )\n        external\n        virtual\n        override\n        returns (address silo)\n    {\n        // Only allow silo repository\n        if (msg.sender != siloRepository) revert OnlyRepository();\n\n        silo = address(new SiloConvex(\n            ISiloRepository(msg.sender),\n            _STATE_CHANGES_HANDLER,\n            _siloAsset,\n            _version\n        ));\n\n        emit NewSiloCreated(silo, _siloAsset, _version);\n    }\n}\n"
    },
    "contracts/siloFactories/SiloFactoryV2.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"../lib/Ping.sol\";\nimport \"../SiloV2.sol\";\nimport \"../interfaces/ISiloFactoryV2.sol\";\nimport \"../interfaces/ISiloRepository.sol\";\n\n/// @title SiloFactory\n/// @notice Silo Factory has one job, deploy Silo implementation\n/// @dev Silo Factory is registered within SiloRepository contract and it's given a version. Each version\n/// is different Silo Factory that deploys different Silo implementation. Many Factory contracts can be\n/// registered with the Repository contract.\n/// @custom:security-contact security@silo.finance\nabstract contract SiloFactoryV2 is ISiloFactoryV2 {\n    address public siloRepository;\n\n    /// @dev Write info to the log about the Silo Repository initialization\n    event InitSiloRepository();\n\n    /// @dev Revert on a silo creation if a msg.sender is not a silo repository\n    error OnlyRepository();\n    /// @dev Revert on a false sanity check with `Ping` library\n    error InvalidSiloRepository();\n\n    /// @param _repository A silo repository address\n    constructor(address _repository) {\n        if (!Ping.pong(ISiloRepository(_repository).siloRepositoryPing)) {\n            revert InvalidSiloRepository();\n        }\n\n        siloRepository = _repository;\n\n        emit InitSiloRepository();\n    }\n\n    /// @inheritdoc ISiloFactoryV2\n    function createSilo(\n        address _siloAsset,\n        uint128 _version,\n        bytes memory\n    )\n        external\n        virtual\n        override\n        returns (address silo)\n    {\n        // Only allow silo repository\n        if (msg.sender != siloRepository) revert OnlyRepository();\n\n        silo = address(new SiloV2(ISiloRepository(msg.sender), _siloAsset, _version));\n        emit NewSiloCreated(silo, _siloAsset, _version);\n    }\n\n    function siloFactoryPing() external pure virtual override returns (bytes4) {\n        return this.siloFactoryPing.selector;\n    }\n}\n"
    },
    "contracts/SiloFactory.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"./SiloV2.sol\";\nimport \"./interfaces/ISiloFactory.sol\";\n\n/// @title SiloFactory\n/// @notice Silo Factory has one job, deploy Silo implementation\n/// @dev Silo Factory is registered within SiloRepository contract and it's given a version. Each version\n/// is different Silo Factory that deploys different Silo implementation. Many Factory contracts can be\n/// registered with the Repository contract.\n/// @custom:security-contact security@silo.finance\ncontract SiloFactory is ISiloFactory {\n    address public siloRepository;\n\n    event InitSiloRepository();\n\n    error OnlyRepository();\n    error RepositoryAlreadySet();\n\n    /// @inheritdoc ISiloFactory\n    function initRepository(address _repository) external {\n        // We don't perform a ping to the repository because this is meant to be called in its constructor\n        if (siloRepository != address(0)) revert RepositoryAlreadySet();\n\n        siloRepository = _repository;\n        emit InitSiloRepository();\n    }\n\n    /// @inheritdoc ISiloFactory\n    function createSilo(address _siloAsset, uint128 _version, bytes memory) external override returns (address silo) {\n        // Only allow silo repository\n        if (msg.sender != siloRepository) revert OnlyRepository();\n\n        silo = address(new SiloV2(ISiloRepository(msg.sender), _siloAsset, _version));\n        emit NewSiloCreated(silo, _siloAsset, _version);\n    }\n\n    function siloFactoryPing() external pure override returns (bytes4) {\n        return this.siloFactoryPing.selector;\n    }\n}\n"
    },
    "contracts/SiloLens.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"./interfaces/IBaseSilo.sol\";\nimport \"./interfaces/ISilo.sol\";\nimport \"./lib/EasyMathV2.sol\";\nimport \"./lib/Ping.sol\";\nimport \"./lib/SolvencyV2.sol\";\n\n/// @title SiloLens\n/// @notice Utility contract that simplifies reading data from Silo protocol contracts\n/// @custom:security-contact security@silo.finance\ncontract SiloLens {\n    using EasyMathV2 for uint256;\n\n    ISiloRepository immutable public siloRepository;\n\n    error InvalidRepository();\n    error UserIsZero();\n\n    constructor (ISiloRepository _siloRepo) {\n        if (!Ping.pong(_siloRepo.siloRepositoryPing)) revert InvalidRepository();\n\n        siloRepository = _siloRepo;\n    }\n\n    /// @dev calculates solvency using SolvencyV2 library\n    /// @param _silo Silo address from which to read data\n    /// @param _user wallet address\n    /// @return true if solvent, false otherwise\n    function isSolvent(ISilo _silo, address _user) external view returns (bool) {\n        if (_user == address(0)) revert UserIsZero();\n\n        (address[] memory assets, IBaseSilo.AssetStorage[] memory assetsStates) = _silo.getAssetsWithState();\n\n        (uint256 userLTV, uint256 liquidationThreshold) = SolvencyV2.calculateLTVs(\n            SolvencyV2.SolvencyParams(\n                siloRepository,\n                ISilo(address(this)),\n                assets,\n                assetsStates,\n                _user\n            ),\n            SolvencyV2.TypeofLTV.LiquidationThreshold\n        );\n\n        return userLTV <= liquidationThreshold;\n    }\n\n    /// @dev Amount of token that is available for borrowing.\n    /// @param _silo Silo address from which to read data\n    /// @param _asset asset address for which to read data\n    /// @return Silo liquidity\n    function liquidity(ISilo _silo, address _asset) external view returns (uint256) {\n        return ERC20(_asset).balanceOf(address(_silo)) - _silo.assetStorage(_asset).collateralOnlyDeposits;\n    }\n\n    /// @notice Get amount of asset token that has been deposited to Silo\n    /// @dev It reads directly from storage so interest generated between last update and now is not taken for account\n    /// @param _silo Silo address from which to read data\n    /// @param _asset asset address for which to read data\n    /// @return amount of all deposits made for given asset\n    function totalDeposits(ISilo _silo, address _asset) external view returns (uint256) {\n        return _silo.utilizationData(_asset).totalDeposits;\n    }\n\n    /// @notice Get amount of asset token that has been deposited to Silo with option \"collateralOnly\"\n    /// @dev It reads directly from storage so interest generated between last update and now is not taken for account\n    /// @param _silo Silo address from which to read data\n    /// @param _asset asset address for which to read data\n    /// @return amount of all \"collateralOnly\" deposits made for given asset\n    function collateralOnlyDeposits(ISilo _silo, address _asset) external view returns (uint256) {\n        return _silo.assetStorage(_asset).collateralOnlyDeposits;\n    }\n\n    /// @notice Get amount of asset that has been borrowed\n    /// @dev It reads directly from storage so interest generated between last update and now is not taken for account\n    /// @param _silo Silo address from which to read data\n    /// @param _asset asset address for which to read data\n    /// @return amount of asset that has been borrowed\n    function totalBorrowAmount(ISilo _silo, address _asset) external view returns (uint256) {\n        return _silo.assetStorage(_asset).totalBorrowAmount;\n    }\n\n    /// @notice Get amount of fees earned by protocol to date\n    /// @dev It reads directly from storage so interest generated between last update and now is not taken for account\n    /// @param _silo Silo address from which to read data\n    /// @param _asset asset address for which to read data\n    /// @return amount of fees earned by protocol to date\n    function protocolFees(ISilo _silo, address _asset) external view returns (uint256) {\n        return _silo.interestData(_asset).protocolFees;\n    }\n\n    /// @notice Returns Loan-To-Value for an account\n    /// @dev Each Silo has multiple asset markets (bridge assets + unique asset). This function calculates\n    /// a sum of all deposits and all borrows denominated in quote token. Returns fraction between borrow value\n    /// and deposit value with 18 decimals.\n    /// @param _silo Silo address from which to read data\n    /// @param _user wallet address for which LTV is calculated\n    /// @return userLTV user current LTV with 18 decimals\n    function getUserLTV(ISilo _silo, address _user) external view returns (uint256 userLTV) {\n        (address[] memory assets, ISilo.AssetStorage[] memory assetsStates) = _silo.getAssetsWithState();\n\n        (userLTV, ) = SolvencyV2.calculateLTVs(\n            SolvencyV2.SolvencyParams(\n                siloRepository,\n                _silo,\n                assets,\n                assetsStates,\n                _user\n            ),\n            SolvencyV2.TypeofLTV.MaximumLTV\n        );\n    }\n\n    /// @notice Get totalSupply of debt token\n    /// @dev Debt token represents a share in total debt of given asset\n    /// @param _silo Silo address from which to read data\n    /// @param _asset asset address for which to read data\n    /// @return totalSupply of debt token\n    function totalBorrowShare(ISilo _silo, address _asset) external view returns (uint256) {\n        return _silo.assetStorage(_asset).debtToken.totalSupply();\n    }\n\n    /// @notice Calculates current borrow amount for user with interest\n    /// @dev Interest is calculated based on the provided timestamp with is expected to be current time.\n    /// @param _silo Silo address from which to read data\n    /// @param _asset token address for which calculation are done\n    /// @param _user account for which calculation are done\n    /// @param _timestamp timestamp used for interest calculations\n    /// @return total amount of asset user needs to repay at provided timestamp\n    function getBorrowAmount(ISilo _silo, address _asset, address _user, uint256 _timestamp)\n        external\n        view\n        returns (uint256)\n    {\n        return SolvencyV2.getUserBorrowAmount(\n            _silo.assetStorage(_asset),\n            _user,\n            SolvencyV2.getRcomp(_silo, siloRepository, _asset, _timestamp)\n        );\n    }\n\n    /// @notice Get debt token balance of a user\n    /// @dev Debt token represents a share in total debt of given asset. This method calls balanceOf(_user)\n    /// on that token.\n    /// @param _silo Silo address from which to read data\n    /// @param _asset asset address for which to read data\n    /// @param _user wallet address for which to read data\n    /// @return balance of debt token of given user\n    function borrowShare(ISilo _silo, address _asset, address _user) external view returns (uint256) {\n        return _silo.assetStorage(_asset).debtToken.balanceOf(_user);\n    }\n\n    /// @notice Get underlying balance of all deposits of given token of given user including \"collateralOnly\"\n    /// deposits\n    /// @dev It reads directly from storage so interest generated between last update and now is not taken for account\n    /// @param _silo Silo address from which to read data\n    /// @param _asset asset address for which to read data\n    /// @param _user wallet address for which to read data\n    /// @return balance of underlying tokens for the given user\n    function collateralBalanceOfUnderlying(ISilo _silo, address _asset, address _user) external view returns (uint256) {\n        ISilo.AssetStorage memory _state = _silo.assetStorage(_asset);\n\n        // Overflow shouldn't happen if the underlying token behaves correctly, as the total supply of underlying\n        // tokens can't overflow by definition\n        unchecked {\n            return balanceOfUnderlying(_state.totalDeposits, _state.collateralToken, _user) +\n                balanceOfUnderlying(_state.collateralOnlyDeposits, _state.collateralOnlyToken, _user);\n        }\n    }\n\n    /// @notice Get amount of debt of underlying token for given user\n    /// @dev It reads directly from storage so interest generated between last update and now is not taken for account\n    /// @param _silo Silo address from which to read data\n    /// @param _asset asset address for which to read data\n    /// @param _user wallet address for which to read data\n    /// @return balance of underlying token owed\n    function debtBalanceOfUnderlying(ISilo _silo, address _asset, address _user) external view returns (uint256) {\n        ISilo.AssetStorage memory _state = _silo.assetStorage(_asset);\n\n        return balanceOfUnderlying(_state.totalBorrowAmount, _state.debtToken, _user);\n    }\n\n    /// @notice Calculate value of collateral asset for user\n    /// @dev It dynamically adds interest earned. Takes for account collateral only deposits as well.\n    /// @param _silo Silo address from which to read data\n    /// @param _user account for which calculation are done\n    /// @param _asset token address for which calculation are done\n    /// @return value of collateral denominated in quote token with 18 decimal\n    function calculateCollateralValue(ISilo _silo, address _user, address _asset)\n        external\n        view\n        returns (uint256)\n    {\n        IPriceProvidersRepository priceProviderRepo = siloRepository.priceProvidersRepository();\n        ISilo.AssetStorage memory assetStorage = _silo.assetStorage(_asset);\n\n        uint256 assetPrice = priceProviderRepo.getPrice(_asset);\n        uint8 assetDecimals = ERC20(_asset).decimals();\n        uint256 userCollateralTokenBalance = assetStorage.collateralToken.balanceOf(_user);\n        uint256 userCollateralOnlyTokenBalance = assetStorage.collateralOnlyToken.balanceOf(_user);\n\n        uint256 assetAmount = SolvencyV2.getUserCollateralAmount(\n            assetStorage,\n            userCollateralTokenBalance,\n            userCollateralOnlyTokenBalance,\n            SolvencyV2.getRcomp(_silo, siloRepository, _asset, block.timestamp),\n            siloRepository\n        );\n\n        return assetAmount.toValue(assetPrice, assetDecimals);\n    }\n\n    /// @notice Calculate value of borrowed asset by user\n    /// @dev It dynamically adds interest earned to borrowed amount\n    /// @param _silo Silo address from which to read data\n    /// @param _user account for which calculation are done\n    /// @param _asset token address for which calculation are done\n    /// @return value of debt denominated in quote token with 18 decimal\n    function calculateBorrowValue(ISilo _silo, address _user, address _asset)\n        external\n        view\n        returns (uint256)\n    {\n        IPriceProvidersRepository priceProviderRepo = siloRepository.priceProvidersRepository();\n        uint256 assetPrice = priceProviderRepo.getPrice(_asset);\n        uint256 assetDecimals = ERC20(_asset).decimals();\n\n        uint256 rcomp = SolvencyV2.getRcomp(_silo, siloRepository, _asset, block.timestamp);\n        uint256 borrowAmount = SolvencyV2.getUserBorrowAmount(_silo.assetStorage(_asset), _user, rcomp);\n\n        return borrowAmount.toValue(assetPrice, assetDecimals);\n    }\n\n    /// @notice Get combined liquidation threshold for a user\n    /// @dev Methodology for calculating liquidation threshold is as follows. Each Silo is combined form multiple\n    /// assets (bridge assets + unique asset). Each of these assets may have different liquidation threshold.\n    /// That means effective liquidation threshold must be calculated per asset based on current deposits and\n    /// borrows of given account.\n    /// @param _silo Silo address from which to read data\n    /// @param _user wallet address for which to read data\n    /// @return liquidationThreshold liquidation threshold of given user\n    function getUserLiquidationThreshold(ISilo _silo, address _user)\n        external\n        view\n        returns (uint256 liquidationThreshold)\n    {\n        (address[] memory assets, ISilo.AssetStorage[] memory assetsStates) = _silo.getAssetsWithState();\n\n        liquidationThreshold = SolvencyV2.calculateLTVLimit(\n            SolvencyV2.SolvencyParams(\n                siloRepository,\n                _silo,\n                assets,\n                assetsStates,\n                _user\n            ),\n            SolvencyV2.TypeofLTV.LiquidationThreshold\n        );\n    }\n\n    /// @notice Get combined maximum Loan-To-Value for a user\n    /// @dev Methodology for calculating maximum LTV is as follows. Each Silo is combined form multiple assets\n    /// (bridge assets + unique asset). Each of these assets may have different maximum Loan-To-Value for\n    /// opening borrow position. That means effective maximum LTV must be calculated per asset based on\n    /// current deposits and borrows of given account.\n    /// @param _silo Silo address from which to read data\n    /// @param _user wallet address for which to read data\n    /// @return maximumLTV Maximum Loan-To-Value of given user\n    function getUserMaximumLTV(ISilo _silo, address _user) external view returns (uint256 maximumLTV) {\n        (address[] memory assets, ISilo.AssetStorage[] memory assetsStates) = _silo.getAssetsWithState();\n\n        maximumLTV = SolvencyV2.calculateLTVLimit(\n            SolvencyV2.SolvencyParams(\n                siloRepository,\n                _silo,\n                assets,\n                assetsStates,\n                _user\n            ),\n            SolvencyV2.TypeofLTV.MaximumLTV\n        );\n    }\n\n    /// @notice Check if user is in debt\n    /// @param _silo Silo address from which to read data\n    /// @param _user wallet address for which to read data\n    /// @return TRUE if user borrowed any amount of any asset, otherwise FALSE\n    function inDebt(ISilo _silo, address _user) external view returns (bool) {\n        address[] memory allAssets = _silo.getAssets();\n\n        for (uint256 i; i < allAssets.length;) {\n            if (_silo.assetStorage(allAssets[i]).debtToken.balanceOf(_user) != 0) return true;\n\n            unchecked {\n                i++;\n            }\n        }\n\n        return false;\n    }\n\n    /// @notice Check if user has position (debt or borrow) in any asset\n    /// @param _silo Silo address from which to read data\n    /// @param _user wallet address for which to read data\n    /// @return TRUE if user has position (debt or borrow) in any asset\n    function hasPosition(ISilo _silo, address _user) external view returns (bool) {\n        (, ISilo.AssetStorage[] memory assetsStorage) = _silo.getAssetsWithState();\n\n        for (uint256 i; i < assetsStorage.length; i++) {\n            if (assetsStorage[i].debtToken.balanceOf(_user) != 0) return true;\n            if (assetsStorage[i].collateralToken.balanceOf(_user) != 0) return true;\n            if (assetsStorage[i].collateralOnlyToken.balanceOf(_user) != 0) return true;\n        }\n\n        return false;\n    }\n\n    /// @notice Calculates fraction between borrowed amount and the current liquidity of tokens for given asset\n    /// denominated in percentage\n    /// @dev Utilization is calculated current values in storage so it does not take for account earned\n    /// interest and ever-increasing total borrow amount. It assumes `Model.DP()` = 100%.\n    /// @param _silo Silo address from which to read data\n    /// @param _asset asset address\n    /// @return utilization value\n    function getUtilization(ISilo _silo, address _asset) external view returns (uint256) {\n        ISilo.UtilizationData memory data = ISilo(_silo).utilizationData(_asset);\n\n        return EasyMathV2.calculateUtilization(\n            getModel(_silo, _asset).DP(),\n            data.totalDeposits,\n            data.totalBorrowAmount\n        );\n    }\n\n    /// @notice Yearly interest rate for depositing asset token, dynamically calculated for current block timestamp\n    /// @param _silo Silo address from which to read data\n    /// @param _asset asset address\n    /// @return APY with 18 decimals\n    function depositAPY(ISilo _silo, address _asset) external view returns (uint256) {\n        uint256 dp = getModel(_silo, _asset).DP();\n\n        // amount of deposits in asset decimals\n        uint256 totalDepositsAmount = totalDepositsWithInterest(_silo, _asset);\n\n        if (totalDepositsAmount == 0) return 0;\n\n        // amount of debt generated per year in asset decimals\n        uint256 generatedDebtAmount = totalBorrowAmountWithInterest(_silo, _asset) * borrowAPY(_silo, _asset) / dp;\n\n        return generatedDebtAmount * SolvencyV2._PRECISION_DECIMALS / totalDepositsAmount;\n    }\n\n    /// @notice Calculate amount of entry fee for given amount\n    /// @param _amount amount for which to calculate fee\n    /// @return Amount of token fee to be paid\n    function calcFee(uint256 _amount) external view returns (uint256) {\n        uint256 entryFee = siloRepository.entryFee();\n        if (entryFee == 0) return 0; // no fee\n\n        unchecked {\n            // If we overflow on multiplication it should not revert tx, we will get lower fees\n            return _amount * entryFee / SolvencyV2._PRECISION_DECIMALS;\n        }\n    }\n\n    /// @dev Method for sanity check\n    /// @return always true\n    function lensPing() external pure returns (bytes4) {\n        return this.lensPing.selector;\n    }\n\n    /// @notice Yearly interest rate for borrowing asset token, dynamically calculated for current block timestamp\n    /// @param _silo Silo address from which to read data\n    /// @param _asset asset address\n    /// @return APY with 18 decimals\n    function borrowAPY(ISilo _silo, address _asset) public view returns (uint256) {\n        return getModel(_silo, _asset).getCurrentInterestRate(address(_silo), _asset, block.timestamp);\n    }\n\n    /// @notice returns total deposits with interest dynamically calculated at current block timestamp\n    /// @param _asset asset address\n    /// @return _totalDeposits total deposits amount with interest\n    function totalDepositsWithInterest(ISilo _silo, address _asset) public view returns (uint256 _totalDeposits) {\n        uint256 rcomp = getModel(_silo, _asset).getCompoundInterestRate(address(_silo), _asset, block.timestamp);\n        uint256 protocolShareFee = siloRepository.protocolShareFee();\n        ISilo.UtilizationData memory data = _silo.utilizationData(_asset);\n\n        return SolvencyV2.totalDepositsWithInterest(\n            data.totalDeposits, data.totalBorrowAmount, protocolShareFee, rcomp\n        );\n    }\n\n    /// @notice Calculates current deposit (with interest) for user\n    /// Collateral only deposits are not counted here. To get collateral only deposit call:\n    /// `_silo.assetStorage(_asset).collateralOnlyDeposits`\n    /// @dev Interest is calculated based on the provided timestamp with is expected to be current time.\n    /// @param _silo Silo address from which to read data\n    /// @param _asset token address for which calculation are done\n    /// @param _user account for which calculation are done\n    /// @param _timestamp timestamp used for interest calculations\n    /// @return totalUserDeposits amount of asset user posses\n    function getDepositAmount(ISilo _silo, address _asset, address _user, uint256 _timestamp)\n        public\n        view\n        returns (uint256 totalUserDeposits)\n    {\n        ISilo.AssetStorage memory data = _silo.assetStorage(_asset);\n\n        uint256 share = data.collateralToken.balanceOf(_user);\n\n        if (share == 0) {\n            return 0;\n        }\n\n        uint256 rcomp = getModel(_silo, _asset).getCompoundInterestRate(address(_silo), _asset, _timestamp);\n        uint256 protocolShareFee = siloRepository.protocolShareFee();\n\n        uint256 assetTotalDeposits = SolvencyV2.totalDepositsWithInterest(\n            data.totalDeposits, data.totalBorrowAmount, protocolShareFee, rcomp\n        );\n\n        return share.toAmount(assetTotalDeposits, data.collateralToken.totalSupply());\n    }\n\n    /// @notice returns total borrow amount with interest dynamically calculated at current block timestamp\n    /// @param _asset asset address\n    /// @return _totalBorrowAmount total deposits amount with interest\n    function totalBorrowAmountWithInterest(ISilo _silo, address _asset)\n        public\n        view\n        returns (uint256 _totalBorrowAmount)\n    {\n        uint256 rcomp = SolvencyV2.getRcomp(_silo, siloRepository, _asset, block.timestamp);\n        ISilo.UtilizationData memory data = _silo.utilizationData(_asset);\n\n        return SolvencyV2.totalBorrowAmountWithInterest(data.totalBorrowAmount, rcomp);\n    }\n\n    /// @notice Get underlying balance of collateral or debt token\n    /// @dev You can think about debt and collateral tokens as cToken in compound. They represent ownership of\n    /// debt or collateral in given Silo. This method converts that ownership to exact amount of underlying token.\n    /// @param _assetTotalDeposits Total amount of assets that has been deposited or borrowed. For collateral token,\n    /// use `totalDeposits` to get this value. For debt token, use `totalBorrowAmount` to get this value.\n    /// @param _shareToken share token address. It's the collateral and debt share token address. You can find\n    /// these addresses in:\n    /// - `ISilo.AssetStorage.collateralToken`\n    /// - `ISilo.AssetStorage.collateralOnlyToken`\n    /// - `ISilo.AssetStorage.debtToken`\n    /// @param _user wallet address for which to read data\n    /// @return balance of underlying token deposited or borrowed of given user\n    function balanceOfUnderlying(uint256 _assetTotalDeposits, IShareToken _shareToken, address _user)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 share = _shareToken.balanceOf(_user);\n        return share.toAmount(_assetTotalDeposits, _shareToken.totalSupply());\n    }\n\n    /// @dev gets interest rates model object\n    /// @param _silo Silo address from which to read data\n    /// @param _asset asset for which to calculate interest rate\n    /// @return IInterestRateModel interest rates model object\n    function getModel(ISilo _silo, address _asset) public view returns (IInterestRateModel) {\n        return IInterestRateModel(siloRepository.getInterestRateModel(address(_silo), _asset));\n    }\n}\n"
    },
    "contracts/SiloRepository.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"./SiloRouterV2.sol\";\nimport \"./interfaces/ISiloFactory.sol\";\nimport \"./interfaces/ISiloRepository.sol\";\nimport \"./interfaces/IPriceProvidersRepository.sol\";\nimport \"./interfaces/INotificationReceiver.sol\";\n\nimport \"./utils/GuardedLaunch.sol\";\nimport \"./SiloV2.sol\";\nimport \"./interfaces/ITokensFactory.sol\";\nimport \"./lib/Ping.sol\";\n\n/// @title SiloRepository\n/// @notice SiloRepository handles the creation and configuration of Silos.\n/// @dev Stores configuration for each asset in each silo.\n/// Each asset in each Silo starts with a default config that later on can be changed by the contract owner.\n/// Stores registry of Factory contracts that deploy different versions of Silos\n/// It is possible to have multiple versions/implementations of Silo and use different versions for different\n/// tokens. For example, one version can be used for UNI (ERC20) and the other can be used for UniV3LP tokens (ERC721).\n/// Manages bridge assets. Each Silo can have 1 or more bridge assets. New Silos are created with all currently active\n/// bridge assets. Silos that are already developed must synchronize bridge assets. Sync can be done by anyone,\n/// function has public access.\n/// Is a single source of truth for other contract addresses.\n/// @custom:security-contact security@silo.finance\n/* solhint-disable max-states-count */\ncontract SiloRepository is ISiloRepository, GuardedLaunch {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    /// @dev Default values for AssetConfig. Used if values are not configured manually.\n    AssetConfig public defaultAssetConfig;\n\n    /// @dev Protocol fee configuration\n    Fees public fees;\n\n    /// @dev Factory contracts that deploys debt and collateral tokens for each asset in Silo\n    ITokensFactory public override tokensFactory;\n\n    /// @dev PriceProvidersRepository contract that manages PriceProviders implementations and is an entry point\n    /// for reading prices for Silos.\n    IPriceProvidersRepository public override priceProvidersRepository;\n\n    /// @dev SiloRouterV2 utility contract that combines number of actions (Deposit, Withdraw, Borrow, Repay)\n    /// for batch execution in single transaction.\n    address public override router;\n\n    /// @dev Silo for bridge asset. We can have only one bridge pool\n    address public bridgePool;\n\n    /// @dev Silo version data\n    SiloVersion public siloVersion;\n\n    /// @dev Maps asset => silo version\n    mapping(address => uint128) public override getVersionForAsset;\n\n    /// @dev Maps Silo address to incentive contract that will distribute rewards for that Silo\n    mapping(address => INotificationReceiver) public override getNotificationReceiver;\n\n    /// @dev Maps version => ISiloFactory. Versions start at 1 and are incremented by 1.\n    mapping(uint256 => ISiloFactory) public override siloFactory;\n\n    /// @dev maps token address to silo address, asset => silo\n    mapping(address => address) public override getSilo;\n\n    /// @dev maps silo address to token address, silo => asset\n    mapping(address => address) public siloReverse;\n\n    /// @dev maps silo => asset => config\n    mapping(address => mapping(address => AssetConfig)) public assetConfigs;\n\n    /// @dev Value used to initialize the Silo's version data\n    uint128 private constant _INITIAL_SILO_VERSION = 1;\n\n    /// @dev representation of 100%\n    uint256 private constant _ONE_HUNDRED_PERCENT = 1e18;\n\n    /// @dev List of bridge assets supported by the protocol\n    EnumerableSet.AddressSet private _bridgeAssets;\n\n    /// @dev List of bridge assets removed by the protocol\n    EnumerableSet.AddressSet private _removedBridgeAssets;\n\n    error AssetAlreadyAdded();\n    error AssetIsNotABridge();\n    error AssetIsZero();\n    error BridgeAssetIsZero();\n    error ConfigDidNotChange();\n    error EmptyBridgeAssets();\n    error FeesDidNotChange();\n    error InterestRateModelDidNotChange();\n    error InvalidEntryFee();\n    error InvalidInterestRateModel();\n    error InvalidLiquidationThreshold();\n    error InvalidLTV();\n    error InvalidNotificationReceiver();\n    error InvalidPriceProvidersRepository();\n    error InvalidProtocolLiquidationFee();\n    error InvalidProtocolShareFee();\n    error InvalidSiloFactory();\n    error InvalidSiloRouter();\n    error InvalidSiloVersion();\n    error InvalidTokensFactory();\n    error LastBridgeAsset();\n    error LiquidationThresholdDidNotChange();\n    error MaximumLTVDidNotChange();\n    error VersionForAssetDidNotChange();\n    error NoPriceProviderForAsset();\n    error NotificationReceiverDidNotChange();\n    error PriceProviderRepositoryDidNotChange();\n    error RouterDidNotChange();\n    error SiloAlreadyExistsForAsset();\n    error SiloAlreadyExistsForBridgeAssets();\n    error SiloDoesNotExist();\n    error SiloIsZero();\n    error SiloNotAllowedForBridgeAsset();\n    error SiloVersionDoesNotExist();\n\n    modifier ensureValidLiquidationThreshold(uint256 _ltv, uint256 _liquidationThreshold) {\n        if (_liquidationThreshold >= _ONE_HUNDRED_PERCENT) {\n            revert InvalidLiquidationThreshold();\n        }\n\n        if (_ltv == 0 || _ltv >= _liquidationThreshold) {\n            revert InvalidLTV();\n        }\n\n        _;\n    }\n\n    /// @param _siloFactory address of SiloFactory contract that deploys Silos\n    /// @param _tokensFactory address of TokensFactory contract that deploys debt and collateral tokens\n    /// for each Silo asset\n    /// @param _defaultMaxLTV maximum Loan-to-Value for default configuration\n    /// @param _defaultLiquidationThreshold liquidation threshold for default configuration\n    /// @param _initialBridgeAssets bridge assets to start with\n    constructor(\n        address _siloFactory,\n        address _tokensFactory,\n        uint64 _defaultMaxLTV,\n        uint64 _defaultLiquidationThreshold,\n        address[] memory _initialBridgeAssets\n    )\n        ensureValidLiquidationThreshold(_defaultMaxLTV, _defaultLiquidationThreshold) GuardedLaunch()\n    {\n        if (!Ping.pong(ISiloFactory(_siloFactory).siloFactoryPing)) {\n            revert InvalidSiloFactory();\n        }\n\n        if (!Ping.pong(ITokensFactory(_tokensFactory).tokensFactoryPing)) {\n            revert InvalidTokensFactory();\n        }\n\n        if (_initialBridgeAssets.length == 0) revert EmptyBridgeAssets();\n\n        ISiloFactory(_siloFactory).initRepository(address(this));\n        ITokensFactory(_tokensFactory).initRepository(address(this));\n\n        for (uint256 i = 0; i < _initialBridgeAssets.length; i++) {\n            TokenHelper.assertAndGetDecimals(_initialBridgeAssets[i]);\n            _bridgeAssets.add(_initialBridgeAssets[i]);\n            emit BridgeAssetAdded(_initialBridgeAssets[i]);\n        }\n\n        siloVersion.byDefault = _INITIAL_SILO_VERSION;\n        siloVersion.latest = _INITIAL_SILO_VERSION;\n        siloFactory[_INITIAL_SILO_VERSION] = ISiloFactory(_siloFactory);\n        emit RegisterSiloVersion(_siloFactory, _INITIAL_SILO_VERSION, _INITIAL_SILO_VERSION);\n        emit SiloDefaultVersion(_INITIAL_SILO_VERSION);\n\n        tokensFactory = ITokensFactory(_tokensFactory);\n        emit TokensFactoryUpdate(_tokensFactory);\n\n        defaultAssetConfig.maxLoanToValue = _defaultMaxLTV;\n        defaultAssetConfig.liquidationThreshold = _defaultLiquidationThreshold;\n    }\n\n    /// @inheritdoc ISiloRepository\n    function setVersionForAsset(address _siloAsset, uint128 _version) external override onlyOwner {\n        if (getVersionForAsset[_siloAsset] == _version) revert VersionForAssetDidNotChange();\n\n        if (_version != 0 && address(siloFactory[_version]) == address(0)) {\n            revert InvalidSiloVersion();\n        }\n\n        emit VersionForAsset(_siloAsset, _version);\n        getVersionForAsset[_siloAsset] = _version;\n    }\n\n    /// @inheritdoc ISiloRepository\n    function setTokensFactory(address _tokensFactory) external override onlyOwner {\n        if (!Ping.pong(ITokensFactory(_tokensFactory).tokensFactoryPing)) {\n            revert InvalidTokensFactory();\n        }\n\n        emit TokensFactoryUpdate(_tokensFactory);\n        tokensFactory = ITokensFactory(_tokensFactory);\n    }\n\n    /// @inheritdoc ISiloRepository\n    function setFees(Fees calldata _fees) external override onlyOwner {\n        if (_fees.entryFee >= SolvencyV2._PRECISION_DECIMALS) {\n            revert InvalidEntryFee();\n        }\n\n        if (_fees.protocolShareFee >= SolvencyV2._PRECISION_DECIMALS) {\n            revert InvalidProtocolShareFee();\n        }\n\n        if (_fees.protocolLiquidationFee >= SolvencyV2._PRECISION_DECIMALS) {\n            revert InvalidProtocolLiquidationFee();\n        }\n\n        Fees memory currentFees = fees;\n\n        if (\n            _fees.entryFee == currentFees.entryFee &&\n            _fees.protocolShareFee == currentFees.protocolShareFee &&\n            _fees.protocolLiquidationFee == currentFees.protocolLiquidationFee\n        ) {\n            revert FeesDidNotChange();\n        }\n\n        emit FeeUpdate(_fees.entryFee, _fees.protocolShareFee, _fees.protocolLiquidationFee);\n        fees = _fees;\n    }\n\n    /// @inheritdoc ISiloRepository\n    function setAssetConfig(address _silo, address _asset, AssetConfig calldata _assetConfig)\n        external\n        override\n        ensureValidLiquidationThreshold(_assetConfig.maxLoanToValue, _assetConfig.liquidationThreshold)\n        onlyOwner\n    {\n        if (_silo == address(0)) revert SiloIsZero();\n\n        if (_asset == address(0)) revert AssetIsZero();\n\n        if (\n            !Ping.pong(_assetConfig.interestRateModel.interestRateModelPing) ||\n            _assetConfig.interestRateModel.DP() == 0\n        ) {\n            revert InvalidInterestRateModel();\n        }\n\n        AssetConfig memory currentConfig = assetConfigs[_silo][_asset];\n\n        if (\n            currentConfig.maxLoanToValue == _assetConfig.maxLoanToValue &&\n            currentConfig.liquidationThreshold == _assetConfig.liquidationThreshold &&\n            currentConfig.interestRateModel == _assetConfig.interestRateModel\n        ) {\n            revert ConfigDidNotChange();\n        }\n\n        emit AssetConfigUpdate(_silo, _asset, _assetConfig);\n        assetConfigs[_silo][_asset] = _assetConfig;\n    }\n\n    /// @inheritdoc ISiloRepository\n    function setDefaultInterestRateModel(IInterestRateModel _defaultInterestRateModel) external override onlyOwner {\n        if (!Ping.pong(_defaultInterestRateModel.interestRateModelPing)) {\n            revert InvalidInterestRateModel();\n        }\n\n        if (defaultAssetConfig.interestRateModel == _defaultInterestRateModel) {\n            revert InterestRateModelDidNotChange();\n        }\n\n        emit InterestRateModel(_defaultInterestRateModel);\n        defaultAssetConfig.interestRateModel = _defaultInterestRateModel;\n    }\n\n    /// @inheritdoc ISiloRepository\n    function setDefaultMaximumLTV(uint64 _defaultMaxLTV)\n        external\n        override\n        ensureValidLiquidationThreshold(_defaultMaxLTV, defaultAssetConfig.liquidationThreshold)\n        onlyOwner\n    {\n        if (defaultAssetConfig.maxLoanToValue == _defaultMaxLTV) {\n            revert MaximumLTVDidNotChange();\n        }\n\n        defaultAssetConfig.maxLoanToValue = _defaultMaxLTV;\n        emit NewDefaultMaximumLTV(_defaultMaxLTV);\n    }\n\n    /// @inheritdoc ISiloRepository\n    function setDefaultLiquidationThreshold(uint64 _defaultLiquidationThreshold)\n        external\n        override\n        ensureValidLiquidationThreshold(defaultAssetConfig.maxLoanToValue, _defaultLiquidationThreshold)\n        onlyOwner\n    {\n        if (defaultAssetConfig.liquidationThreshold == _defaultLiquidationThreshold) {\n            revert LiquidationThresholdDidNotChange();\n        }\n\n        defaultAssetConfig.liquidationThreshold = _defaultLiquidationThreshold;\n        emit NewDefaultLiquidationThreshold(_defaultLiquidationThreshold);\n    }\n\n    /// @inheritdoc ISiloRepository\n    function setPriceProvidersRepository(IPriceProvidersRepository _repository) external override onlyOwner {\n        if (!Ping.pong(_repository.priceProvidersRepositoryPing)) {\n            revert InvalidPriceProvidersRepository();\n        }\n\n        if (priceProvidersRepository == _repository) {\n            revert PriceProviderRepositoryDidNotChange();\n        }\n\n        emit PriceProvidersRepositoryUpdate(_repository);\n        priceProvidersRepository = _repository;\n    }\n\n    /// @inheritdoc ISiloRepository\n    function setRouter(address _router) external override onlyOwner {\n        if (!Ping.pong(SiloRouterV2(payable(_router)).siloRouterPing)) {\n            revert InvalidSiloRouter();\n        }\n\n        if (router == _router) revert RouterDidNotChange();\n\n        emit RouterUpdate(_router);\n        router = _router;\n    }\n\n    /// @inheritdoc ISiloRepository\n    function setNotificationReceiver(\n        address _silo,\n        INotificationReceiver _newNotificationReceiver\n    ) external override onlyOwner {\n        if (!Ping.pong(_newNotificationReceiver.notificationReceiverPing)) {\n            revert InvalidNotificationReceiver();\n        }\n\n        if (getNotificationReceiver[_silo] == _newNotificationReceiver) {\n            revert NotificationReceiverDidNotChange();\n        }\n\n        emit NotificationReceiverUpdate(_newNotificationReceiver);\n        getNotificationReceiver[_silo] = _newNotificationReceiver;\n    }\n\n    /// @inheritdoc ISiloRepository\n    function addBridgeAsset(address _newBridgeAsset) external override onlyOwner {\n        if (!priceProvidersRepository.providersReadyForAsset(_newBridgeAsset)) {\n            revert NoPriceProviderForAsset();\n        }\n\n        TokenHelper.assertAndGetDecimals(_newBridgeAsset);\n\n        // We need to add first, so it can be synchronized after\n        if (!_bridgeAssets.add(_newBridgeAsset)) revert AssetAlreadyAdded();\n        // We don't care about the return value, because we are doing this even if the asset isn't in the list\n        _removedBridgeAssets.remove(_newBridgeAsset);\n\n        emit BridgeAssetAdded(_newBridgeAsset);\n\n        address silo = getSilo[_newBridgeAsset];\n        address bridge = bridgePool;\n\n        // Check if we already have silo for the new bridge asset.\n        // Note that if there are at least two bridge assets in the system, it is possible to prevent the addition\n        // of a specific new bridge asset by creating a Silo for it.\n        if (silo != address(0)) {\n            // Silo for new bridge asset exists, if we already have bridge, then revert\n            if (bridge != address(0)) revert SiloAlreadyExistsForBridgeAssets();\n\n            bridgePool = silo;\n            bridge = silo;\n            emit BridgePool(silo);\n        }\n\n        // syncBridgeAssets when:\n        // - we discovered bridge pool, we need to sync it with new bridge asset\n        // - silo for asset does not exist, but if we already have bridge, we need to sync\n        if (bridge != address(0)) ISilo(bridge).syncBridgeAssets();\n    }\n\n    /// @inheritdoc ISiloRepository\n    function removeBridgeAsset(address _bridgeAssetToRemove) external override onlyOwner {\n        if (_bridgeAssetToRemove == address(0)) revert BridgeAssetIsZero();\n\n        if (_bridgeAssets.length() == 1) revert LastBridgeAsset();\n\n        if (!_bridgeAssets.remove(_bridgeAssetToRemove)) revert AssetIsNotABridge();\n\n        _removedBridgeAssets.add(_bridgeAssetToRemove);\n        emit BridgeAssetRemoved(_bridgeAssetToRemove);\n\n        address silo = getSilo[_bridgeAssetToRemove];\n\n        // we have silo and it is for sure bridge pool\n        if (silo != address(0)) {\n            ISilo(silo).syncBridgeAssets();\n            bridgePool = address(0);\n            emit BridgePool(address(0));\n            return;\n        }\n\n        address pool = bridgePool;\n\n        // we have bridge pool but it is not directly for `_bridgeAssetToRemove`\n        if (pool != address(0)) {\n            ISilo(pool).syncBridgeAssets();\n        }\n    }\n\n    /// @inheritdoc ISiloRepository\n    function newSilo(address _siloAsset, bytes memory _siloData) external override returns (address) {\n        bool assetIsABridge = _bridgeAssets.contains(_siloAsset);\n        ensureCanCreateSiloFor(_siloAsset, assetIsABridge);\n        \n        return _createSilo(_siloAsset, getVersionForAsset[_siloAsset], assetIsABridge, _siloData);\n    }\n\n    /// @inheritdoc ISiloRepository\n    function replaceSilo(\n        address _siloAsset,\n        uint128 _siloVersion,\n        bytes memory _siloData\n    ) external override onlyOwner returns (address) {\n        address siloToReplace = getSilo[_siloAsset];\n\n        if (siloToReplace == address(0)) revert SiloDoesNotExist();\n\n        return _createSilo(_siloAsset, _siloVersion, _bridgeAssets.contains(_siloAsset), _siloData);\n    }\n\n    /// @inheritdoc ISiloRepository\n    function registerSiloVersion(ISiloFactory _factory, bool _isDefault) external override onlyOwner {\n        if (!Ping.pong(_factory.siloFactoryPing)) revert InvalidSiloFactory();\n\n        SiloVersion memory v = siloVersion;\n        v.latest += 1;\n\n        siloFactory[v.latest] = _factory;\n\n        emit RegisterSiloVersion(address(_factory), v.latest, v.byDefault);\n\n        if (_isDefault) {\n            v.byDefault = v.latest;\n            emit SiloDefaultVersion(v.latest);\n        }\n\n        siloVersion = v;\n    }\n\n    /// @inheritdoc ISiloRepository\n    function unregisterSiloVersion(uint128 _siloVersion) external override onlyOwner {\n        address factory = address(siloFactory[_siloVersion]);\n        // Can't unregister nonexistent or default silo version\n        if (factory == address(0) || _siloVersion == siloVersion.byDefault) {\n            revert InvalidSiloVersion();\n        }\n\n        emit UnregisterSiloVersion(factory, _siloVersion);\n        siloFactory[_siloVersion] = ISiloFactory(address(0));\n    }\n\n    /// @inheritdoc ISiloRepository\n    function setDefaultSiloVersion(uint128 _defaultVersion) external override onlyOwner {\n        if (address(siloFactory[_defaultVersion]) == address(0)) {\n            revert SiloVersionDoesNotExist();\n        }\n\n        emit SiloDefaultVersion(_defaultVersion);\n        siloVersion.byDefault = _defaultVersion;\n    }\n\n    /// @inheritdoc ISiloRepository\n    function entryFee() external view override returns (uint256) {\n        return fees.entryFee;\n    }\n\n    /// @inheritdoc ISiloRepository\n    function protocolShareFee() external view override returns (uint256) {\n        return fees.protocolShareFee;\n    }\n\n    /// @inheritdoc ISiloRepository\n    function protocolLiquidationFee() external view override returns (uint256) {\n        return fees.protocolLiquidationFee;\n    }\n\n    /// @inheritdoc ISiloRepository\n    function isSilo(address _silo) external view override returns (bool) {\n        return siloReverse[_silo] != address(0);\n    }\n\n    /// @inheritdoc ISiloRepository\n    function getBridgeAssets() external view override returns (address[] memory) {\n        return _bridgeAssets.values();\n    }\n\n    /// @inheritdoc ISiloRepository\n    function getRemovedBridgeAssets() external view override returns (address[] memory) {\n        return _removedBridgeAssets.values();\n    }\n\n    /// @inheritdoc ISiloRepository\n    function getMaximumLTV(address _silo, address _asset) external view override returns (uint256) {\n        uint256 maxLoanToValue = assetConfigs[_silo][_asset].maxLoanToValue;\n        if (maxLoanToValue != 0) {\n            return maxLoanToValue;\n        }\n        return defaultAssetConfig.maxLoanToValue;\n    }\n\n    /// @inheritdoc ISiloRepository\n    function getInterestRateModel(address _silo, address _asset)\n        external\n        view\n        override\n        returns (IInterestRateModel model)\n    {\n        model = assetConfigs[_silo][_asset].interestRateModel;\n\n        if (address(model) == address(0)) {\n            return defaultAssetConfig.interestRateModel;\n        }\n    }\n\n    /// @inheritdoc ISiloRepository\n    function getLiquidationThreshold(address _silo, address _asset) external view override returns (uint256) {\n        uint256 liquidationThreshold = assetConfigs[_silo][_asset].liquidationThreshold;\n\n        if (liquidationThreshold != 0) {\n            return liquidationThreshold;\n        }\n\n        return defaultAssetConfig.liquidationThreshold;\n    }\n\n    /// @inheritdoc ISiloRepository\n    function siloRepositoryPing() external pure override returns (bytes4) {\n        return this.siloRepositoryPing.selector;\n    }\n\n    /// @inheritdoc ISiloRepository\n    function ensureCanCreateSiloFor(address _asset, bool _assetIsABridge) public view override {\n        if (getSilo[_asset] != address(0)) revert SiloAlreadyExistsForAsset();\n\n        if (_assetIsABridge) {\n            if (bridgePool != address(0)) revert SiloAlreadyExistsForBridgeAssets();\n\n            if (_bridgeAssets.length() == 1) revert SiloNotAllowedForBridgeAsset();\n        }\n    }\n\n    /// @inheritdoc ISiloRepository\n    function owner() public view override(ISiloRepository, GuardedLaunch) returns (address) {\n        return GuardedLaunch.owner();\n    }\n\n    /// @dev Deploys Silo\n    /// @param _siloAsset silo asset\n    /// @param _siloVersion version of silo implementation\n    /// @param _assetIsABridge flag indicating if asset is a bridge asset\n    /// @param _siloData (optional) data that may be needed during silo creation\n    function _createSilo(\n        address _siloAsset,\n        uint128 _siloVersion,\n        bool _assetIsABridge,\n        bytes memory _siloData\n    ) internal returns (address createdSilo) {\n        // 0 means default version\n        if (_siloVersion == 0) {\n            _siloVersion = siloVersion.byDefault;\n        }\n\n        ISiloFactory factory = siloFactory[_siloVersion];\n\n        if (address(factory) == address(0)) revert InvalidSiloVersion();\n\n        createdSilo = factory.createSilo(_siloAsset, _siloVersion, _siloData);\n\n        // We do this before the asset sync so that functions like `isSilo` can be used by factories\n        getSilo[_siloAsset] = createdSilo;\n        siloReverse[createdSilo] = _siloAsset;\n\n        SiloV2(createdSilo).syncBridgeAssets();\n\n        emit NewSilo(createdSilo, _siloAsset, _siloVersion);\n\n        if (_assetIsABridge) {\n            bridgePool = createdSilo;\n            emit BridgePool(createdSilo);\n        }\n    }\n}\n"
    },
    "contracts/SiloRouterV2.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport \"./interfaces/IWrappedNativeToken.sol\";\nimport \"./interfaces/IConvexSiloWrapper.sol\";\nimport \"./interfaces/ISilo.sol\";\nimport \"./interfaces/ISiloRepository.sol\";\n\nimport \"./lib/Ping.sol\";\nimport \"./lib/TokenHelper.sol\";\nimport \"./lib/EasyMathV2.sol\";\n\n/// @title SiloRouterV2\n/// @notice Silo Router is a utility contract that aims to improve UX. It can batch any number or combination\n/// of actions (Deposit, Withdraw, Borrow, Repay, Wrap, Unwrap) and execute them in a single transaction.\n/// @dev SiloRouter requires only first action asset to be approved.\n/// @custom:security-contact security@silo.finance\ncontract SiloRouterV2 is ReentrancyGuard {\n    using SafeERC20 for IERC20;\n    using EasyMathV2 for uint256;\n\n    // @notice Action types that are supported\n    enum ActionType { Deposit, Withdraw, Borrow, Repay, Wrap, Unwrap }\n\n    struct Action {\n        // what do you want to do?\n        ActionType actionType;\n        // which Silo are you interacting with? Empty in case of external actions.\n        ISilo silo;\n        // what asset do you want to use? Wrapped asset in case of external actions.\n        IERC20 asset;\n        // how much asset do you want to use?\n        uint256 amount;\n        // is it an action on collateral only?\n        bool collateralOnly;\n    }\n\n    // @dev native asset wrapped token. In case of Ether, it's WETH.\n    IWrappedNativeToken public immutable wrappedNativeToken;\n    ISiloRepository public immutable siloRepository;\n\n    error ApprovalFailed();\n    error ERC20TransferFailed();\n    error EthTransferFailed();\n    error InvalidSilo();\n    error InvalidSiloRepository();\n    error UnsupportedAction();\n\n    constructor (address _wrappedNativeToken, address _siloRepository) {\n        if (!Ping.pong(ISiloRepository(_siloRepository).siloRepositoryPing)) {\n            revert InvalidSiloRepository();\n        }\n\n        TokenHelper.assertAndGetDecimals(_wrappedNativeToken);\n\n        wrappedNativeToken = IWrappedNativeToken(_wrappedNativeToken);\n        siloRepository = ISiloRepository(_siloRepository);\n    }\n\n    /// @dev needed for unwrapping WETH\n    receive() external payable {\n        // `execute` method calls `IWrappedNativeToken.withdraw()`\n        // and we need to receive the withdrawn ETH unconditionally\n    }\n\n    /// @notice Execute actions\n    /// @dev User can bundle any combination and number of actions. It's possible to do multiple deposits,\n    /// withdraws etc. For that reason router may need to send multiple tokens back to the user. Combining\n    /// Ether and WETH deposits will make this function revert.\n    /// @param _actions array of actions to execute\n    function execute(Action[] calldata _actions) external virtual payable nonReentrant {\n        _executeActions(_actions);\n\n        // send all assets to user\n        for (uint256 i = 0; i < _actions.length;) {\n            IERC20 asset = _resolveAssetToSend(_actions[i]);\n            uint256 remainingBalance = asset.balanceOf(address(this));\n\n            if (remainingBalance != 0) {\n                _sendAsset(asset, remainingBalance);\n            }\n\n            // we can safely uncheck i because of `i < _actions.length` loop condition\n            unchecked {\n                i++;\n            }\n        }\n\n        // should never have leftover ETH, however\n        if (msg.value != 0 && address(this).balance != 0) {\n            // solhint-disable-next-line avoid-low-level-calls\n            (bool success, ) = msg.sender.call{value: address(this).balance}(\"\");\n            if (!success) revert EthTransferFailed();\n        }\n    }\n\n    function siloRouterPing() external pure returns (bytes4) {\n        return this.siloRouterPing.selector;\n    }\n\n    /// @dev Execute multiple Silo actions of any type from `ActionType`\n    /// @param _actions array of actions to execute\n    function _executeActions(Action[] calldata _actions) internal virtual {\n        for (uint256 i = 0; i < _actions.length;) {\n            if (_isActionExternal(_actions[i].actionType)) {\n                _executeExternalAction(_actions[i]);\n            } else {\n                _executeSiloAction(_actions[i]);\n            }\n\n            // we can safely uncheck i because of `i < _actions.length` loop condition\n            unchecked {\n                i++;\n            }\n        }\n    }\n\n    /// @dev Execute Silo action: deposit, withdraw, borrow or repay\n    /// @param _action action to execute, this can be one of many actions in the whole flow\n    function _executeSiloAction(Action calldata _action) internal virtual {\n        if (!siloRepository.isSilo(address(_action.silo))) revert InvalidSilo();\n\n        if (_action.actionType == ActionType.Deposit) {\n            _pullAssetIfNeeded(_action.asset, _action.amount);\n            _approveIfNeeded(_action.asset, address(_action.silo), _action.amount);\n            _action.silo.depositFor(address(_action.asset), msg.sender, _action.amount, _action.collateralOnly);\n        } else if (_action.actionType == ActionType.Withdraw) {\n            _action.silo.withdrawFor(\n                address(_action.asset),\n                msg.sender,\n                address(this),\n                _action.amount,\n                _action.collateralOnly\n            );\n        } else if (_action.actionType == ActionType.Borrow) {\n            _action.silo.borrowFor(address(_action.asset), msg.sender, address(this), _action.amount);\n        } else if (_action.actionType == ActionType.Repay) {\n            uint256 repayAmount; \n\n            if (_action.amount == type(uint256).max) {\n                _action.silo.accrueInterest(address(_action.asset));\n                repayAmount = _getRepayAmount(_action.silo, _action.asset, msg.sender);\n            } else {\n                repayAmount = _action.amount;\n            }\n\n            _pullAssetIfNeeded(_action.asset, repayAmount);\n            _approveIfNeeded(_action.asset, address(_action.silo), repayAmount);\n            _action.silo.repayFor(address(_action.asset), msg.sender, repayAmount);\n        } else {\n            revert UnsupportedAction();\n        }\n    }\n\n    /// @dev Execute external action: wrap or unwrap tokens\n    /// @param _action action to execute, this can be one of many actions in the whole flow\n    function _executeExternalAction(Action calldata _action) internal virtual {\n        if (_action.actionType == ActionType.Wrap) {\n            IERC20 underlyingToken = IERC20(IConvexSiloWrapper(address(_action.asset)).underlyingToken());\n            _pullAssetIfNeeded(underlyingToken, _action.amount);\n            _approveIfNeeded(underlyingToken, address(_action.asset), _action.amount);\n            IConvexSiloWrapper(address(_action.asset)).deposit(_action.amount, address(this));\n        } else if (_action.actionType == ActionType.Unwrap) {\n            _pullAssetIfNeeded(_action.asset, _action.amount);\n            IConvexSiloWrapper(address(_action.asset)).withdrawAndUnwrap(_action.amount);\n        } else {\n            revert UnsupportedAction();\n        }\n    }\n\n    /// @dev Approve Silo to transfer token if current allowance is not enough\n    /// @param _asset token to be approved\n    /// @param _spender Silo address that spends the token\n    /// @param _amount amount of token to be spent\n    function _approveIfNeeded(\n        IERC20 _asset,\n        address _spender,\n        uint256 _amount\n    ) internal virtual {\n        if (_asset.allowance(address(this), _spender) < _amount) {\n            // solhint-disable-next-line avoid-low-level-calls\n            (bool success, bytes memory data) = address(_asset).call(\n                abi.encodeCall(IERC20.approve, (_spender, type(uint256).max))\n            );\n\n            // Support non-standard tokens that don't return bool\n            if(!success || !(data.length == 0 || abi.decode(data, (bool)))) {\n                revert ApprovalFailed();\n            }\n        }\n    }\n\n    /// @dev Transfer funds from msg.sender to this contract if balance is not enough\n    /// @param _asset token to be approved\n    /// @param _amount amount of token to be spent\n    function _pullAssetIfNeeded(IERC20 _asset, uint256 _amount) internal virtual {\n        uint256 remainingBalance = _asset.balanceOf(address(this));\n\n        if (remainingBalance < _amount) {\n            // There can't be an underflow in the subtraction because of the previous check\n            unchecked {\n                _pullAsset(_asset, _amount - remainingBalance);\n            }\n        }\n    }\n\n    /// @dev Transfer asset from user to router\n    /// @param _asset asset address to be transferred\n    /// @param _amount amount of asset to be transferred\n    function _pullAsset(IERC20 _asset, uint256 _amount) internal virtual {\n        if (msg.value != 0 && _asset == wrappedNativeToken) {\n            wrappedNativeToken.deposit{value: _amount}();\n        } else {\n            _asset.safeTransferFrom(msg.sender, address(this), _amount);\n        }\n    }\n\n    /// @dev Transfer asset from router to user\n    /// @param _asset asset address to be transferred\n    /// @param _amount amount of asset to be transferred\n    function _sendAsset(IERC20 _asset, uint256 _amount) internal virtual {\n        if (address(_asset) == address(wrappedNativeToken)) {\n            wrappedNativeToken.withdraw(_amount);\n            // solhint-disable-next-line avoid-low-level-calls\n            (bool success, ) = msg.sender.call{value: _amount}(\"\");\n            if (!success) revert ERC20TransferFailed();\n        } else {\n            _asset.safeTransfer(msg.sender, _amount);\n        }\n    }\n\n    /// @dev Helper that calculates the maximum amount to repay if type(uint256).max is passed\n    /// @param _silo silo for which the debt will be repaid\n    /// @param _asset asset being repaid\n    /// @param _borrower user for which the debt being repaid\n    function _getRepayAmount(ISilo _silo, IERC20 _asset, address _borrower)\n        internal\n        view\n        virtual\n        returns (uint256)\n    {\n        ISilo.AssetStorage memory _assetStorage = _silo.assetStorage(address(_asset));\n        uint256 repayShare = _assetStorage.debtToken.balanceOf(_borrower);\n        uint256 debtTokenTotalSupply = _assetStorage.debtToken.totalSupply();\n        uint256 totalBorrowed = _assetStorage.totalBorrowAmount;\n        return repayShare.toAmountRoundUp(totalBorrowed, debtTokenTotalSupply);\n    }\n\n    /// @dev Helper that calculates if the action external or related to Silo\n    /// @return true if the action is external, false otherwise\n    function _isActionExternal(ActionType action) internal pure virtual returns (bool) {\n        return action == ActionType.Wrap || action == ActionType.Unwrap;\n    }\n\n    /// @dev Resolve asset to send back to user on finish of the actions. Usually, it is the equal to `_action.asset`.\n    ///     Returns the address of underlying asset in case of the `Unwrap` action.\n    /// @param _action specific action struct\n    /// @return asset address\n    function _resolveAssetToSend(Action calldata _action) internal view virtual returns (IERC20 asset) {\n        if (_action.actionType == ActionType.Unwrap) {\n            asset = IERC20(IConvexSiloWrapper(address(_action.asset)).underlyingToken());\n        } else {\n            asset = _action.asset;\n        }\n    }\n}\n"
    },
    "contracts/SiloV2.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\nimport \"./interfaces/ISilo.sol\";\nimport \"./BaseSilo.sol\";\n\n/// @title Silo with virtual methods\n/// @notice Silo is the main component of the protocol. It implements lending logic, manages and isolates\n/// risk, acts as a vault for assets, and performs liquidations. Each Silo is composed of the unique asset\n/// for which it was created (ie. UNI) and bridge assets (ie. ETH and SiloDollar). There may be multiple\n/// bridge assets at any given time.\n/// @dev Main Silo contact that inherits from Base contract. It implements all user/UI facing methods.\n/// @custom:security-contact security@silo.finance\ncontract SiloV2 is ISilo, BaseSilo {\n    constructor (ISiloRepository _repository, address _siloAsset, uint128 _version)\n        BaseSilo(_repository, _siloAsset, _version)\n    {\n        // initial setup is done in BaseSilo, nothing to do here\n    }\n\n    /// @inheritdoc ISilo\n    function deposit(address _asset, uint256 _amount, bool _collateralOnly)\n        external\n        virtual\n        override\n        returns (uint256 collateralAmount, uint256 collateralShare)\n    {\n        return _deposit(_asset, msg.sender, msg.sender, _amount, _collateralOnly);\n    }\n\n    /// @inheritdoc ISilo\n    function depositFor(\n        address _asset,\n        address _depositor,\n        uint256 _amount,\n        bool _collateralOnly\n    )\n        external\n        virtual\n        override\n        returns (uint256 collateralAmount, uint256 collateralShare)\n    {\n        return _deposit(_asset, msg.sender, _depositor, _amount, _collateralOnly);\n    }\n\n    /// @inheritdoc ISilo\n    function withdraw(address _asset, uint256 _amount, bool _collateralOnly)\n        external\n        virtual\n        override\n        returns (uint256 withdrawnAmount, uint256 withdrawnShare)\n    {\n        return _withdraw(_asset, msg.sender, msg.sender, _amount, _collateralOnly);\n    }\n\n    /// @inheritdoc ISilo\n    function withdrawFor(address _asset, address _depositor, address _receiver, uint256 _amount, bool _collateralOnly)\n        external\n        virtual\n        override\n        onlyRouter\n        returns (uint256 withdrawnAmount, uint256 withdrawnShare)\n    {\n        return _withdraw(_asset, _depositor, _receiver, _amount, _collateralOnly);\n    }\n\n    /// @inheritdoc ISilo\n    function borrow(\n        address _asset,\n        uint256 _amount\n    )\n        external\n        virtual\n        override\n        returns (uint256 debtAmount, uint256 debtShare)\n    {\n        return _borrow(_asset, msg.sender, msg.sender, _amount);\n    }\n\n    /// @inheritdoc ISilo\n    function borrowFor(address _asset, address _borrower, address _receiver, uint256 _amount)\n        external\n        virtual\n        override\n        onlyRouter\n        returns (uint256 debtAmount, uint256 debtShare)\n    {\n        return _borrow(_asset, _borrower, _receiver, _amount);\n    }\n\n    /// @inheritdoc ISilo\n    function repay(address _asset, uint256 _amount)\n        external\n        virtual\n        override\n        returns (uint256 repaidAmount, uint256 repaidShare)\n    {\n        return _repay(_asset, msg.sender, msg.sender, _amount);\n    }\n\n    /// @inheritdoc ISilo\n    function repayFor(address _asset, address _borrower, uint256 _amount)\n        external\n        virtual\n        override\n        returns (uint256 repaidAmount, uint256 repaidShare)\n    {\n        return _repay(_asset, _borrower, msg.sender, _amount);\n    }\n\n    /// @inheritdoc ISilo\n    function flashLiquidate(address[] memory _users, bytes memory _flashReceiverData)\n        external\n        virtual\n        override\n        returns (\n            address[] memory assets,\n            uint256[][] memory receivedCollaterals,\n            uint256[][] memory shareAmountsToRepay\n        )\n    {\n        assets = getAssets();\n        uint256 usersLength = _users.length;\n        receivedCollaterals = new uint256[][](usersLength);\n        shareAmountsToRepay = new uint256[][](usersLength);\n\n        for (uint256 i = 0; i < usersLength; i++) {\n            (\n                receivedCollaterals[i],\n                shareAmountsToRepay[i]\n            ) = _userLiquidation(assets, _users[i], IFlashLiquidationReceiver(msg.sender), _flashReceiverData);\n        }\n    }\n\n    /// @inheritdoc ISilo\n    function harvestProtocolFees() external virtual override returns (uint256[] memory harvestedAmounts) {\n        address[] memory assets = getAssets();\n        harvestedAmounts = new uint256[](assets.length);\n\n        address repositoryOwner = siloRepository.owner();\n\n        for (uint256 i; i < assets.length;) {\n            unchecked {\n                // it will not overflow because fee is much lower than any other amounts\n                harvestedAmounts[i] = _harvestProtocolFees(assets[i], repositoryOwner);\n                // we run out of gas before we overflow i\n                i++;\n            }\n        }\n    }\n\n    /// @inheritdoc ISilo\n    function accrueInterest(address _asset) public virtual override returns (uint256 interest) {\n        return _accrueInterest(_asset);\n    }\n}\n"
    },
    "contracts/TokensFactoryConvex.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"./TokensFactoryV2.sol\";\nimport \"./utils/ShareCollateralTokenConvex.sol\";\nimport \"./lib/Ping.sol\";\nimport \"./interfaces/ISiloRepository.sol\";\nimport \"./interfaces/IConvexSiloWrapperFactory.sol\";\n\n/// @title TokensFactoryConvex deploys ShareCollateralTokenConvex for ConvexSiloWrapper Silos and regular share tokens\n///     for regular Silos.\n/// @notice Deploys debt and collateral tokens for each Silo\n/// @custom:security-contact security@silo.finance\ncontract TokensFactoryConvex is TokensFactoryV2 {\n    // solhint-disable-next-line var-name-mixedcase\n    IConvexSiloWrapperFactory public immutable CONVEX_SILO_WRAPPER_FACTORY;\n\n    error InvalidConvexSiloWrapperFactory();\n\n    constructor (IConvexSiloWrapperFactory _wrapperFactory) {\n        if (!Ping.pong(_wrapperFactory.convexSiloWrapperFactoryPing)) {\n            revert InvalidConvexSiloWrapperFactory();\n        }\n\n        CONVEX_SILO_WRAPPER_FACTORY = _wrapperFactory;\n    }\n\n    /// @inheritdoc ITokensFactory\n    function createShareCollateralToken(\n        string calldata _name,\n        string calldata _symbol,\n        address _asset\n    )\n        external\n        virtual\n        override\n        onlySilo\n        returns (IShareToken token)\n    {\n        if (CONVEX_SILO_WRAPPER_FACTORY.isWrapper(_asset)) {\n            token = new ShareCollateralTokenConvex(_name, _symbol, msg.sender, _asset);\n        } else {\n            token = new ShareCollateralToken(_name, _symbol, msg.sender, _asset);\n        }\n\n        emit NewShareCollateralTokenCreated(address(token));\n    }\n}\n"
    },
    "contracts/TokensFactoryV2.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"./utils/ShareCollateralToken.sol\";\nimport \"./utils/ShareDebtToken.sol\";\nimport \"./interfaces/ITokensFactory.sol\";\n\n/// @title TokensFactoryV2 is the first TokensFactory version with functions changed to virtual.\n/// @notice Deploys debt and collateral tokens for each Silo\n/// @custom:security-contact security@silo.finance\ncontract TokensFactoryV2 is ITokensFactory {\n    ISiloRepository public siloRepository;\n\n    event InitSiloRepository();\n\n    error OnlySilo();\n    error SiloRepositoryAlreadySet();\n\n    modifier onlySilo() {\n        if (!siloRepository.isSilo(msg.sender)) revert OnlySilo();\n        _;\n    }\n\n    /// @inheritdoc ITokensFactory\n    function initRepository(address _repository) external virtual {\n        // We don't perform a ping to the repository because this is meant to be called in its constructor\n        if (address(siloRepository) != address(0)) revert SiloRepositoryAlreadySet();\n\n        siloRepository = ISiloRepository(_repository);\n        emit InitSiloRepository();\n    }\n\n    /// @inheritdoc ITokensFactory\n    function createShareCollateralToken(\n        string memory _name,\n        string memory _symbol,\n        address _asset\n    )\n        external\n        virtual\n        override\n        onlySilo\n        returns (IShareToken token)\n    {\n        token = new ShareCollateralToken(_name, _symbol, msg.sender, _asset);\n        emit NewShareCollateralTokenCreated(address(token));\n    }\n\n    /// @inheritdoc ITokensFactory\n    function createShareDebtToken(\n        string memory _name,\n        string memory _symbol,\n        address _asset\n    )\n        external\n        virtual\n        override\n        onlySilo\n        returns (IShareToken token)\n    {\n        token = new ShareDebtToken(_name, _symbol, msg.sender, _asset);\n        emit NewShareDebtTokenCreated(address(token));\n    }\n\n    function tokensFactoryPing() external pure override returns (bytes4) {\n        return this.tokensFactoryPing.selector;\n    }\n}\n"
    },
    "contracts/utils/GuardedLaunch.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"../interfaces/IGuardedLaunch.sol\";\nimport \"./TwoStepOwnable.sol\";\nimport \"./Manageable.sol\";\n\n/// @title GuardedLaunch\n/// @notice Implements security and risk averse functions for Silo\n/// @dev This contract is meant to limit Silo functionality for Beta Release in order to minimize any damage\n/// of potential critical vulnerability.\n/// @custom:security-contact security@silo.finance\ncontract GuardedLaunch is IGuardedLaunch, TwoStepOwnable, Manageable {\n    uint256 private constant _INFINITY = type(uint256).max;\n\n    /// @dev Initial value for defaultMaxLiquidity is 250 quote tokens\n    uint256 private constant _INITIAL_MAX_LIQUIDITY = 250 * 1e18;\n\n    /// @dev stores max liquidity config\n    MaxLiquidityLimit public maxLiquidity;\n\n    /// @dev stores pause config\n    Paused public isPaused;\n\n    error GlobalLimitDidNotChange();\n    error GlobalPauseDidNotChange();\n    error MaxLiquidityDidNotChange();\n    error SiloMaxLiquidityDidNotChange();\n    error SiloPauseDidNotChange();\n\n    constructor() Manageable(msg.sender) {\n        maxLiquidity.globalLimit = true;\n\n        maxLiquidity.defaultMaxLiquidity = _INITIAL_MAX_LIQUIDITY;\n    }\n\n    /// @inheritdoc IGuardedLaunch\n    function setLimitedMaxLiquidity(bool _globalLimit) external onlyManager override {\n        if (maxLiquidity.globalLimit == _globalLimit) revert GlobalLimitDidNotChange();\n\n        maxLiquidity.globalLimit = _globalLimit;\n        emit LimitedMaxLiquidityToggled(maxLiquidity.globalLimit);\n    }\n\n    /// @inheritdoc IGuardedLaunch\n    function setDefaultSiloMaxDepositsLimit(uint256 _maxDeposits) external onlyManager override {\n        if (maxLiquidity.defaultMaxLiquidity == _maxDeposits) {\n            revert MaxLiquidityDidNotChange();\n        }\n\n        maxLiquidity.defaultMaxLiquidity = _maxDeposits;\n        emit DefaultSiloMaxDepositsLimitUpdate(_maxDeposits);\n    }\n\n    /// @inheritdoc IGuardedLaunch\n    function setSiloMaxDepositsLimit(\n        address _silo,\n        address _asset,\n        uint256 _maxDeposits\n    ) external onlyManager override {\n        if (maxLiquidity.siloMaxLiquidity[_silo][_asset] == _maxDeposits) {\n            revert SiloMaxLiquidityDidNotChange();\n        }\n\n        maxLiquidity.siloMaxLiquidity[_silo][_asset] = _maxDeposits;\n        emit SiloMaxDepositsLimitsUpdate(_silo, _asset, _maxDeposits);\n    }\n\n    /// @inheritdoc IGuardedLaunch\n    function setGlobalPause(bool _globalPause) external onlyManager override {\n        if (isPaused.globalPause == _globalPause) revert GlobalPauseDidNotChange();\n\n        isPaused.globalPause = _globalPause;\n        emit GlobalPause(_globalPause);\n    }\n\n    /// @inheritdoc IGuardedLaunch\n    function setSiloPause(address _silo, address _asset, bool _pauseValue) external onlyManager override {\n        if (isPaused.siloPause[_silo][_asset] == _pauseValue) {\n            revert SiloPauseDidNotChange();\n        }\n\n        isPaused.siloPause[_silo][_asset] = _pauseValue;\n        emit SiloPause(_silo, _asset, _pauseValue);\n    }\n\n    /// @inheritdoc IGuardedLaunch\n    function isSiloPaused(address _silo, address _asset) external view override returns (bool) {\n        return isPaused.globalPause || isPaused.siloPause[_silo][address(0)] || isPaused.siloPause[_silo][_asset];\n    }\n\n    /// @inheritdoc IGuardedLaunch\n    function getMaxSiloDepositsValue(address _silo, address _asset) external view override returns (uint256) {\n        if (maxLiquidity.globalLimit) {\n            uint256 maxDeposits = maxLiquidity.siloMaxLiquidity[_silo][_asset];\n            if (maxDeposits != 0) {\n                return maxDeposits;\n            }\n            return maxLiquidity.defaultMaxLiquidity;\n        }\n        return _INFINITY;\n    }\n\n    /// @dev Returns the address of the current owner.\n    function owner() public view override(TwoStepOwnable, Manageable) virtual returns (address) {\n        return TwoStepOwnable.owner();\n    }\n}\n"
    },
    "contracts/utils/InterestRateDataResolver.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"../interfaces/IInterestRateModel.sol\";\nimport \"../interfaces/ISilo.sol\";\nimport \"../lib/Ping.sol\";\nimport \"../SiloLens.sol\";\n\ncontract InterestRateDataResolver {\n    ISiloRepository immutable public siloRepository;\n    SiloLens public immutable siloLens;\n\n    error InvalidSiloLens();\n    error InvalidSiloRepository();\n    error EmptySilos();\n\n    struct AssetData {\n        address asset;\n        IInterestRateModel.Config modelConfig;\n        uint256 currentInterestRate;\n        uint256 siloUtilization;\n        uint256 totalDepositsWithInterest;\n        uint256 depositAPY;\n    }\n\n    struct SiloAssetsData {\n        ISilo silo;\n        AssetData[] assetData;\n    }\n\n    constructor (ISiloRepository _siloRepo, SiloLens _lens) {\n        if (!Ping.pong(_siloRepo.siloRepositoryPing)) revert InvalidSiloRepository();\n        if (!Ping.pong(_lens.lensPing)) revert InvalidSiloLens();\n\n        siloRepository = _siloRepo;\n        siloLens = _lens;\n    }\n\n    /// @dev batch method for `getData()`\n    function getDataBatch(ISilo[] calldata _silos)\n        external\n        view\n        returns (SiloAssetsData[] memory siloAssetsData, uint256 timestamp)\n    {\n        if (_silos.length == 0) revert EmptySilos();\n\n        siloAssetsData = new SiloAssetsData[](_silos.length);\n\n        unchecked {\n            for(uint256 i; i < _silos.length; i++) {\n                address[] memory assets = _silos[i].getAssets();\n\n                siloAssetsData[i].silo = _silos[i];\n                siloAssetsData[i].assetData = new AssetData[](assets.length);\n\n                for (uint256 j; j < assets.length; j++) {\n                    (siloAssetsData[i].assetData[j],) = getData(_silos[i], assets[j]);\n                }\n            }\n        }\n\n        timestamp = block.timestamp;\n    }\n\n    function getModel(ISilo _silo, address _asset) public view returns (IInterestRateModel) {\n        return IInterestRateModel(siloRepository.getInterestRateModel(address(_silo), _asset));\n    }\n\n    /// @dev pulls all data required for bot that collect interest rate model data for researchers\n    function getData(ISilo _silo, address _asset)\n        public\n        view\n        returns (AssetData memory assetData, uint256 timestamp)\n    {\n        IInterestRateModel model = getModel(_silo, _asset);\n\n        assetData.asset = _asset;\n        assetData.modelConfig = model.getConfig(address(_silo), _asset);\n        assetData.currentInterestRate = model.getCurrentInterestRate(address(_silo), _asset, block.timestamp);\n        assetData.siloUtilization = siloLens.getUtilization(_silo, _asset);\n        assetData.totalDepositsWithInterest = siloLens.totalDepositsWithInterest(_silo, _asset);\n        assetData.depositAPY = siloLens.depositAPY(_silo, _asset);\n\n        timestamp = block.timestamp;\n    }\n}\n"
    },
    "contracts/utils/LiquidationReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\n/// @dev This is cloned solution of @openzeppelin/contracts/security/ReentrancyGuard.sol\nabstract contract LiquidationReentrancyGuard {\n    error LiquidationReentrancyCall();\n\n    uint256 private constant _LIQUIDATION_NOT_ENTERED = 1;\n    uint256 private constant _LIQUIDATION_ENTERED = 2;\n\n    uint256 private _liquidationStatus;\n\n    modifier liquidationNonReentrant() {\n        if (_liquidationStatus == _LIQUIDATION_ENTERED) {\n            revert LiquidationReentrancyCall();\n        }\n\n        _liquidationStatus = _LIQUIDATION_ENTERED;\n\n        _;\n\n        _liquidationStatus = _LIQUIDATION_NOT_ENTERED;\n    }\n\n    constructor() {\n        _liquidationStatus = _LIQUIDATION_NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/utils/Manageable.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\n/// @title Manageable\n/// @notice Implements simple manager role that can be changed by a manger or external owner role\n/// @dev This contract is designed to work with Ownable from openzeppelin\n/// @custom:security-contact security@silo.finance\nabstract contract Manageable {\n    /// @notice wallet address of manager role\n    address private _managerRole;\n\n    /// @notice Emitted when manager is changed\n    /// @param manager new manager address\n    event ManagerChanged(address manager);\n\n    error ManagerIsZero();\n    error OnlyManager();\n    error OnlyOwnerOrManager();\n    error ManagerDidNotChange();\n\n    modifier onlyManager() {\n        if (_managerRole != msg.sender) revert OnlyManager();\n        _;\n    }\n\n    /// @param _manager new manager address\n    constructor(address _manager) {\n        if (_manager == address(0)) revert ManagerIsZero();\n\n        _managerRole = _manager;\n    }\n\n    /// @notice Change manager address\n    /// @dev Callable by manager or external owner role\n    /// @param _manager new manager address\n    function changeManager(address _manager) external {\n        if (msg.sender != owner() && msg.sender != _managerRole) {\n            revert OnlyOwnerOrManager();\n        }\n\n        if (_manager == address(0)) revert ManagerIsZero();\n        if (_manager == _managerRole) revert ManagerDidNotChange();\n\n        _managerRole = _manager;\n        emit ManagerChanged(_manager);\n    }\n\n    function manager() public view virtual returns (address) {\n        return _managerRole;\n    }\n\n    /// @notice Gets external owner role\n    /// @return owner address\n    function owner() public view virtual returns (address);\n}\n"
    },
    "contracts/utils/ShareCollateralToken.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"./ShareToken.sol\";\nimport \"../interfaces/ISilo.sol\";\n\n/// @title ShareCollateralToken\n/// @notice ERC20 compatible token representing collateral position in Silo\n/// @custom:security-contact security@silo.finance\ncontract ShareCollateralToken is ShareToken {\n\n    error SenderNotSolventAfterTransfer();\n    error ShareTransferNotAllowed();\n\n    /// @dev Token is always deployed for specific Silo and asset\n    /// @param _name token name\n    /// @param _symbol token symbol\n    /// @param _silo Silo address for which tokens was deployed\n    /// @param _asset asset for which this tokens was deployed\n    constructor (\n        string memory _name,\n        string memory _symbol,\n        address _silo,\n        address _asset\n    ) ERC20(_name, _symbol) ShareToken(_silo, _asset) {\n        // all setup is done in parent contracts, nothing to do here\n    }\n\n    function _afterTokenTransfer(address _sender, address _recipient, uint256 _amount) internal override {\n        ShareToken._afterTokenTransfer(_sender, _recipient, _amount);\n\n        // if we minting or burning, Silo is responsible to check all necessary conditions\n        // make sure that _sender is solvent after transfer\n        if (_isTransfer(_sender, _recipient) && !silo.isSolvent(_sender)) {\n            revert SenderNotSolventAfterTransfer();\n        }\n\n        // report mint or transfer\n        _notifyAboutTransfer(_sender, _recipient, _amount);\n    }\n\n    function _beforeTokenTransfer(address _sender, address _recipient, uint256) internal view override {\n        // if we minting or burning, Silo is responsible to check all necessary conditions\n        if (!_isTransfer(_sender, _recipient)) {\n            return;\n        }\n\n        // Silo forbids having debt and collateral position of the same asset in given Silo\n        if (!silo.depositPossible(asset, _recipient)) revert ShareTransferNotAllowed();\n    }\n}\n"
    },
    "contracts/utils/ShareCollateralTokenConvex.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"./ShareCollateralTokenV2.sol\";\nimport \"../interfaces/IConvexSiloWrapper.sol\";\n\n/// @title ShareCollateralTokenConvex is the collateral token for ConvexSiloWrapper Silos. This token checkpoints\n///     rewards before collateral tokens transfer.\n/// @notice ERC20 compatible token representing collateral position in Silo\n/// @custom:security-contact security@silo.finance\ncontract ShareCollateralTokenConvex is ShareCollateralTokenV2 {\n    /// @dev Token is always deployed for specific Silo and asset\n    /// @param _name token name\n    /// @param _symbol token symbol\n    /// @param _silo Silo address for which tokens was deployed\n    /// @param _asset asset for which this tokens was deployed\n    constructor (\n        string memory _name,\n        string memory _symbol,\n        address _silo,\n        address _asset\n    ) ShareCollateralTokenV2(_name, _symbol, _silo, _asset) {\n        // all setup is done in parent contracts, nothing to do here\n    }\n\n    function _beforeTokenTransfer(address _sender, address _recipient, uint256 _amount) internal virtual override {\n        if (_isTransfer(_sender, _recipient)) {\n            IConvexSiloWrapper(asset).checkpointPair(_sender, _recipient);\n        }\n\n        super._beforeTokenTransfer(_sender, _recipient, _amount);\n    }\n}\n"
    },
    "contracts/utils/ShareCollateralTokenV2.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"./ShareToken.sol\";\nimport \"../interfaces/ISilo.sol\";\n\n/// @title ShareCollateralTokenV2 is the first ShareCollateralToken version with functions changed to virtual.\n///     _beforeTokenTransfer function `view` mutability is removed.\n/// @notice ERC20 compatible token representing collateral position in Silo\n/// @custom:security-contact security@silo.finance\ncontract ShareCollateralTokenV2 is ShareToken {\n\n    error SenderNotSolventAfterTransfer();\n    error ShareTransferNotAllowed();\n\n    /// @dev Token is always deployed for specific Silo and asset\n    /// @param _name token name\n    /// @param _symbol token symbol\n    /// @param _silo Silo address for which tokens was deployed\n    /// @param _asset asset for which this tokens was deployed\n    constructor (\n        string memory _name,\n        string memory _symbol,\n        address _silo,\n        address _asset\n    ) ERC20(_name, _symbol) ShareToken(_silo, _asset) {\n        // all setup is done in parent contracts, nothing to do here\n    }\n\n    function _afterTokenTransfer(address _sender, address _recipient, uint256 _amount) internal virtual override {\n        ShareToken._afterTokenTransfer(_sender, _recipient, _amount);\n\n        // if we minting or burning, Silo is responsible to check all necessary conditions\n        // make sure that _sender is solvent after transfer\n        if (_isTransfer(_sender, _recipient) && !silo.isSolvent(_sender)) {\n            revert SenderNotSolventAfterTransfer();\n        }\n\n        // report mint or transfer\n        _notifyAboutTransfer(_sender, _recipient, _amount);\n    }\n\n    function _beforeTokenTransfer(address _sender, address _recipient, uint256) internal virtual override {\n        // if we minting or burning, Silo is responsible to check all necessary conditions\n        if (!_isTransfer(_sender, _recipient)) {\n            return;\n        }\n\n        // Silo forbids having debt and collateral position of the same asset in given Silo\n        if (!silo.depositPossible(asset, _recipient)) revert ShareTransferNotAllowed();\n    }\n}\n"
    },
    "contracts/utils/ShareDebtToken.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"../interfaces/IERC20R.sol\";\nimport \"../interfaces/ISilo.sol\";\n\nimport \"./ShareToken.sol\";\n\n/// @title ShareDebtToken\n/// @notice ERC20 compatible token representing debt position in Silo\n/// @dev It implements reversed approvals and checks solvency of recipient on transfer.\n///\n/// It is assumed that there is no attack vector on taking someone else's debt because we don't see\n/// economical reason why one would do such thing. For that reason anyone can transfer owner's token\n/// to any recipient as long as receiving wallet approves the transfer. In other words, anyone can\n/// take someone else's debt without asking.\n/// @custom:security-contact security@silo.finance\ncontract ShareDebtToken is IERC20R, ShareToken {\n    /// @dev maps _owner => _recipient => amount\n    mapping(address => mapping(address => uint256)) private _receiveAllowances;\n\n    error OwnerIsZero();\n    error RecipientIsZero();\n    error ShareTransferNotAllowed();\n    error AmountExceedsAllowance();\n    error RecipientNotSolventAfterTransfer();\n\n    constructor (\n        string memory _name,\n        string memory _symbol,\n        address _silo,\n        address _asset\n    ) ERC20(_name, _symbol) ShareToken(_silo, _asset) {\n        // all setup is done in parent contracts, nothing to do here\n    }\n\n    /// @inheritdoc IERC20R\n    function setReceiveApproval(address owner, uint256 _amount) external virtual override {\n        _setReceiveApproval(owner, _msgSender(), _amount);\n    }\n\n    /// @inheritdoc IERC20R\n    function decreaseReceiveAllowance(address _owner, uint256 _subtractedValue) public virtual override {\n        uint256 currentAllowance = _receiveAllowances[_owner][_msgSender()];\n        _setReceiveApproval(_owner, _msgSender(), currentAllowance - _subtractedValue);\n    }\n\n    /// @inheritdoc IERC20R\n    function increaseReceiveAllowance(address _owner, uint256 _addedValue) public virtual override {\n        uint256 currentAllowance = _receiveAllowances[_owner][_msgSender()];\n        _setReceiveApproval(_owner, _msgSender(), currentAllowance + _addedValue);\n    }\n\n    /// @inheritdoc IERC20R\n    function receiveAllowance(address _owner, address _recipient) public view virtual override returns (uint256) {\n        return _receiveAllowances[_owner][_recipient];\n    }\n\n    /// @dev Set allowance\n    /// @param _owner owner of debt token\n    /// @param _recipient wallet that allows `_owner` to send debt to its wallet\n    /// @param _amount amount of token allowed to be transferred\n    function _setReceiveApproval(\n        address _owner,\n        address _recipient,\n        uint256 _amount\n    ) internal virtual {\n        if (_owner == address(0)) revert OwnerIsZero();\n        if (_recipient == address(0)) revert RecipientIsZero();\n\n        _receiveAllowances[_owner][_recipient] = _amount;\n\n        emit ReceiveApproval(_owner, _recipient, _amount);\n    }\n\n    function _beforeTokenTransfer(address _sender, address _recipient, uint256 _amount) internal override {\n        // If we are minting or burning, Silo is responsible to check all necessary conditions\n        if (!_isTransfer(_sender, _recipient)) {\n            return;\n        }\n\n        // Silo forbids having debt and collateral position of the same asset in given Silo\n        if (!silo.borrowPossible(asset, _recipient)) revert ShareTransferNotAllowed();\n\n        // _recipient must approve debt transfer, _sender does not have to\n        uint256 currentAllowance = receiveAllowance(_sender, _recipient);\n        if (currentAllowance < _amount) revert AmountExceedsAllowance();\n\n        // There can't be an underflow in the subtraction because of the previous check\n        unchecked {\n            // update debt allowance\n            _setReceiveApproval(_sender, _recipient, currentAllowance - _amount);\n        }\n    }\n\n    function _afterTokenTransfer(address _sender, address _recipient, uint256 _amount) internal override {\n        ShareToken._afterTokenTransfer(_sender, _recipient, _amount);\n\n        // if we are minting or burning, Silo is responsible to check all necessary conditions\n        // if we are NOT minting and not burning, it means we are transferring\n        // make sure that _recipient is solvent after transfer\n        if (_isTransfer(_sender, _recipient) && !silo.isSolvent(_recipient)) {\n            revert RecipientNotSolventAfterTransfer();\n        }\n        \n        // report mint or transfer\n        _notifyAboutTransfer(_sender, _recipient, _amount);\n    }\n}\n"
    },
    "contracts/utils/ShareToken.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\nimport \"../interfaces/ISilo.sol\";\nimport \"../interfaces/IBaseSilo.sol\";\nimport \"../interfaces/IShareToken.sol\";\nimport \"../interfaces/INotificationReceiver.sol\";\n\n\n/// @title ShareToken\n/// @notice Implements common interface for Silo tokens representing debt or collateral positions.\n/// @custom:security-contact security@silo.finance\nabstract contract ShareToken is ERC20, IShareToken {\n    /// @dev minimal share amount will give us higher precision for shares calculation,\n    /// that way losses caused by division will be reduced to acceptable level\n    uint256 public constant MINIMUM_SHARE_AMOUNT = 1e5;\n\n    /// @notice Silo address for which tokens was deployed\n    ISilo public immutable silo;\n\n    /// @notice asset for which this tokens was deployed\n    address public immutable asset;\n\n    /// @dev decimals that match the original asset decimals\n    uint8 internal immutable _decimals;\n\n    error OnlySilo();\n    error MinimumShareRequirement();\n\n    modifier onlySilo {\n        if (msg.sender != address(silo)) revert OnlySilo();\n\n        _;\n    }\n\n    /// @dev Token is always deployed for specific Silo and asset\n    /// @param _silo Silo address for which tokens was deployed\n    /// @param _asset asset for which this tokens was deployed\n    constructor(address _silo, address _asset) {\n        silo = ISilo(_silo);\n        asset = _asset;\n        _decimals = IERC20Metadata(_asset).decimals();\n    }\n\n    /// @inheritdoc IShareToken\n    function mint(address _account, uint256 _amount) external onlySilo override {\n        _mint(_account, _amount);\n    }\n\n    /// @inheritdoc IShareToken\n    function burn(address _account, uint256 _amount) external onlySilo override {\n        _burn(_account, _amount);\n    }\n\n    /// @inheritdoc IERC20Metadata\n    function symbol() public view virtual override(IERC20Metadata, ERC20) returns (string memory) {\n        return ERC20.symbol();\n    }\n\n    /// @return decimals that match original asset decimals\n    function decimals() public view virtual override(IERC20Metadata, ERC20) returns (uint8) {\n        return _decimals;\n    }\n\n    function _afterTokenTransfer(address _sender, address _recipient, uint256) internal override virtual {\n        // fixing precision error on mint and burn\n        if (_isTransfer(_sender, _recipient)) {\n            return;\n        }\n\n        uint256 total = totalSupply();\n        // we require minimum amount to be present from first mint\n        // and after burning, we do not allow for small leftover\n        if (total != 0 && total < MINIMUM_SHARE_AMOUNT) revert MinimumShareRequirement();\n    }\n\n    /// @dev Report token transfer to incentive contract if one is set\n    /// @param _from sender\n    /// @param _to recipient\n    /// @param _amount amount that was transferred\n    function _notifyAboutTransfer(address _from, address _to, uint256 _amount) internal {\n        INotificationReceiver notificationReceiver =\n            IBaseSilo(silo).siloRepository().getNotificationReceiver(address(silo));\n\n        if (address(notificationReceiver) != address(0)) {\n            // solhint-disable-next-line avoid-low-level-calls\n            (bool success,) = address(notificationReceiver).call(\n                abi.encodeWithSelector(\n                    INotificationReceiver.onAfterTransfer.selector,\n                    address(this),\n                    _from,\n                    _to,\n                    _amount\n                )\n            );\n\n            emit NotificationSent(notificationReceiver, success);\n        }\n    }\n\n    /// @dev checks if operation is \"real\" transfer\n    /// @param _sender sender address\n    /// @param _recipient recipient address\n    /// @return bool true if operation is real transfer, false if it is mint or burn\n    function _isTransfer(address _sender, address _recipient) internal pure returns (bool) {\n        // in order this check to be true, is is required to have:\n        // require(sender != address(0), \"ERC20: transfer from the zero address\");\n        // require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        // on transfer. ERC20 has them, so we good.\n        return _sender != address(0) && _recipient != address(0);\n    }\n}\n"
    },
    "contracts/utils/Tower.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"./TwoStepOwnable.sol\";\n\n/// @title Tower\n/// @notice Utility contract that stores addresses of any contracts\ncontract Tower is TwoStepOwnable {\n    mapping(bytes32 => address) private _coordinates;\n\n    error AddressZero();\n    error KeyIsTaken();\n    error EmptyCoordinates();\n\n    event NewCoordinates(string key, address indexed newContract);\n    event UpdateCoordinates(string key, address indexed newContract);\n    event RemovedCoordinates(string key);\n\n    /// @param _key string key\n    /// @return address coordinates for the `_key`\n    function coordinates(string calldata _key) external view virtual returns (address) {\n        return _coordinates[makeKey(_key)];\n    }\n\n    /// @param _key raw bytes32 key\n    /// @return address coordinates for the raw `_key`\n    function rawCoordinates(bytes32 _key) external view virtual returns (address) {\n        return _coordinates[_key];\n    }\n\n    /// @dev Registering new contract\n    /// @param _key key under which contract will be stored\n    /// @param _contract contract address\n    function register(string calldata _key, address _contract) external virtual onlyOwner {\n        bytes32 key = makeKey(_key);\n        if (_coordinates[key] != address(0)) revert KeyIsTaken();\n        if (_contract == address(0)) revert AddressZero();\n\n        _coordinates[key] = _contract;\n        emit NewCoordinates(_key, _contract);\n    }\n\n    /// @dev Removing coordinates\n    /// @param _key key to remove\n    function unregister(string calldata _key) external virtual onlyOwner {\n        bytes32 key = makeKey(_key);\n        if (_coordinates[key] == address(0)) revert EmptyCoordinates();\n\n        _coordinates[key] = address(0);\n        emit RemovedCoordinates(_key);\n    }\n\n    /// @dev Update key with new contract address\n    /// @param _key key under which new contract will be stored\n    /// @param _contract contract address\n    function update(string calldata _key, address _contract) external virtual onlyOwner {\n        bytes32 key = makeKey(_key);\n        if (_coordinates[key] == address(0)) revert EmptyCoordinates();\n        if (_contract == address(0)) revert AddressZero();\n\n        _coordinates[key] = _contract;\n        emit UpdateCoordinates(_key, _contract);\n    }\n\n    /// @dev generating mapping key based on string\n    /// @param _key string key\n    /// @return bytes32 representation of the `_key`\n    function makeKey(string calldata _key) public pure virtual returns (bytes32) {\n        return keccak256(abi.encodePacked(_key));\n    }\n}\n"
    },
    "contracts/utils/TwoStepOwnable.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.7.6 <0.9.0;\n\n/// @title TwoStepOwnable\n/// @notice Contract that implements the same functionality as popular Ownable contract from openzeppelin library.\n/// The only difference is that it adds a possibility to transfer ownership in two steps. Single step ownership\n/// transfer is still supported.\n/// @dev Two step ownership transfer is meant to be used by humans to avoid human error. Single step ownership\n/// transfer is meant to be used by smart contracts to avoid over-complicated two step integration. For that reason,\n/// both ways are supported.\nabstract contract TwoStepOwnable {\n    /// @dev current owner\n    address private _owner;\n    /// @dev candidate to an owner\n    address private _pendingOwner;\n\n    /// @notice Emitted when ownership is transferred on `transferOwnership` and `acceptOwnership`\n    /// @param newOwner new owner\n    event OwnershipTransferred(address indexed newOwner);\n    /// @notice Emitted when ownership transfer is proposed, aka pending owner is set\n    /// @param newPendingOwner new proposed/pending owner\n    event OwnershipPending(address indexed newPendingOwner);\n\n    /**\n     *  error OnlyOwner();\n     *  error OnlyPendingOwner();\n     *  error OwnerIsZero();\n     */\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        if (owner() != msg.sender) revert(\"OnlyOwner\");\n        _;\n    }\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(msg.sender);\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) revert(\"OwnerIsZero\");\n        _setOwner(newOwner);\n    }\n\n    /**\n     * @dev Transfers pending ownership of the contract to a new account (`newPendingOwner`) and clears any existing\n     * pending ownership.\n     * Can only be called by the current owner.\n     */\n    function transferPendingOwnership(address newPendingOwner) public virtual onlyOwner {\n        _setPendingOwner(newPendingOwner);\n    }\n\n    /**\n     * @dev Clears the pending ownership.\n     * Can only be called by the current owner.\n     */\n    function removePendingOwnership() public virtual onlyOwner {\n        _setPendingOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a pending owner\n     * Can only be called by the pending owner.\n     */\n    function acceptOwnership() public virtual {\n        if (msg.sender != pendingOwner()) revert(\"OnlyPendingOwner\");\n        _setOwner(pendingOwner());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Sets the new owner and emits the corresponding event.\n     */\n    function _setOwner(address newOwner) private {\n        if (_owner == newOwner) revert(\"OwnerDidNotChange\");\n\n        _owner = newOwner;\n        emit OwnershipTransferred(newOwner);\n\n        if (_pendingOwner != address(0)) {\n            _setPendingOwner(address(0));\n        }\n    }\n\n    /**\n     * @dev Sets the new pending owner and emits the corresponding event.\n     */\n    function _setPendingOwner(address newPendingOwner) private {\n        if (_pendingOwner == newPendingOwner) revert(\"PendingOwnerDidNotChange\");\n\n        _pendingOwner = newPendingOwner;\n        emit OwnershipPending(newPendingOwner);\n    }\n}\n"
    },
    "contracts/wrappers/convex/utils/SiloConvexStateChangesHandler.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"../../../lib/Ping.sol\";\nimport \"../../../interfaces/ISiloRepository.sol\";\nimport \"../../../interfaces/IConvexSiloWrapper.sol\";\nimport \"../../../interfaces/ISiloConvexStateChangesHandler.sol\";\nimport \"../../../interfaces/IConvexSiloWrapperFactory.sol\";\nimport \"../../../priceProviders/curveLPTokens/interfaces/ICurveLPTokensDetailsFetchersRepository.sol\";\n\n/// @dev `siloAsset` function is not defined in default Silo interface.\ninterface ISiloLike {\n    function siloAsset() external returns (address);\n}\n\n/// @title SiloConvexStateChangesHandler is used in `SiloConvex` for checkpoints for users rewards.\n///     This part of code can not be implemented in Silo code because of the smart contract bytecode limit.\ncontract SiloConvexStateChangesHandler is ISiloConvexStateChangesHandler {\n    // solhint-disable-next-line var-name-mixedcase\n    ISiloRepository public immutable SILO_REPOSITORY;\n\n    // solhint-disable-next-line var-name-mixedcase\n    ICurveLPTokensDetailsFetchersRepository public immutable FETCHERS_REPO;\n\n    // solhint-disable-next-line var-name-mixedcase\n    IConvexSiloWrapperFactory public immutable WRAPPER_FACTORY;\n\n    /// @dev silo => wrapper cached data of Silo assets to reduce external calls.\n    mapping(ISiloLike => IConvexSiloWrapper) public cachedSiloWrappers;\n\n    error InvalidConvexSiloWrapperFactory();\n    error InvalidFetchersRepo();\n    error InvalidRepository();\n    error OnlySilo();\n\n    modifier onlySilo() {\n        if (!SILO_REPOSITORY.isSilo(msg.sender)) revert OnlySilo();\n        _;\n    }\n\n    constructor (\n        ISiloRepository _repository,\n        ICurveLPTokensDetailsFetchersRepository _fetchersRepo,\n        IConvexSiloWrapperFactory _wrapperFactory\n    ) {\n        if (!Ping.pong(_repository.siloRepositoryPing)) {\n            revert InvalidRepository();\n        }\n\n        if (!Ping.pong(_fetchersRepo.curveLPTokensFetchersRepositoryPing)) {\n            revert InvalidFetchersRepo();\n        }\n\n        if (!Ping.pong(_wrapperFactory.convexSiloWrapperFactoryPing)) {\n            revert InvalidConvexSiloWrapperFactory();\n        }\n\n        SILO_REPOSITORY = _repository;\n        FETCHERS_REPO = _fetchersRepo;\n        WRAPPER_FACTORY = _wrapperFactory;\n    }\n\n    /// @inheritdoc ISiloConvexStateChangesHandler\n    function beforeBalanceUpdate(address _firstToCheckpoint, address _secondToCheckpoint)\n        external\n        virtual\n        override\n        onlySilo\n    {\n        IConvexSiloWrapper _wrapper = cachedSiloWrappers[ISiloLike(msg.sender)];\n\n        if (address(_wrapper) == address(0)) {\n            _wrapper = IConvexSiloWrapper(ISiloLike(msg.sender).siloAsset());\n            cachedSiloWrappers[ISiloLike(msg.sender)] = _wrapper;\n        }\n\n        _wrapper.checkpointPair(_firstToCheckpoint, _secondToCheckpoint);\n    }\n\n    /// @inheritdoc ISiloConvexStateChangesHandler\n    function wrapperSetupVerification(address _wrapper) external view virtual override returns (bool) {\n        if (!WRAPPER_FACTORY.isWrapper(_wrapper)) return false;\n\n        address underlyingToken = IConvexSiloWrapper(_wrapper).underlyingToken();\n        address assetPool = FETCHERS_REPO.getLPTokenPool(underlyingToken);\n\n        return assetPool != address(0);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}